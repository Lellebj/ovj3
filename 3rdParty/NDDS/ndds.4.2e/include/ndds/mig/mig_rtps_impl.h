/*
 * @(#)mig_rtps_impl.h    generated by: makeheader    Mon Dec  3 23:08:07 2007
 *
 *		built from:	rtps_impl.ifc
 */

#ifndef mig_rtps_impl_h
#define mig_rtps_impl_h

extern MIGDllVariable const char *
MIG_RTPS_SUBMESSAGE_ID_NAME[MIG_RTPS_SUBMESSAGE_ID_COUNT_MAX];



#ifndef reda_sequenceNumber_h
#include "reda/reda_sequenceNumber.h"
#endif
#ifndef reda_orderedDataType_h
#include "reda/reda_orderedDataType.h"
#endif

#ifdef __cplusplus
    extern "C" {
#endif



/* --------------------------------------------------------- */
  #define MIGRtpsObjectSuffix_isReserved(osx) \
    ((osx) & MIG_RTPS_OBJECT_KIND_R_BIT)

  #define MIGRtpsObjectSuffix_isMeta(osx) \
    ((osx) & MIG_RTPS_OBJECT_KIND_M_BIT)

  #define MIGRtpsObjectSuffix_isKeyed(osx) \
    (((osx) == MIG_RTPS_OBJECT_NORMAL_USER_CST_WRITER || \
      (osx) == MIG_RTPS_OBJECT_RESERVED_META_CST_WRITER || \
      (osx) == MIG_RTPS_OBJECT_NORMAL_USER_CST_READER || \
      (osx) == MIG_RTPS_OBJECT_RESERVED_META_CST_READER) ? \
      RTI_TRUE : RTI_FALSE)

/* --------------------------------------------------------- */
  #define MIGRtpsObjectSuffix_getRWType(osx) \
    ((((osx) & 0x3F) == 0x02 || ((osx) & 0x3F) == 0x03) ? \
     MIG_RTPS_RW_TYPE_WRITER :                            \
    ((((osx) & 0x3F) == 0x04 || ((osx) & 0x3F) == 0x07 || \
      ((osx) & 0x3F) == 0x3C || ((osx) & 0x3F) == 0x3D) ? \
     MIG_RTPS_RW_TYPE_READER : MIG_RTPS_RW_TYPE_UNKNOWN))

/* --------------------------------------------------------- */
  #define MIGRtpsObjectSuffix_getSampleType(osx) \
    ((((osx) & 0x3F) == 0x02 || ((osx) & 0x3F) == 0x07 || \
      ((osx) & 0x3F) == 0x3D) ?                           \
     MIG_RTPS_SAMPLE_TYPE_CST :                           \
    ((((osx) & 0x3F) == 0x03 || ((osx) & 0x3F) == 0x04 || \
      ((osx) & 0x3F) == 0x3C) ? \
     MIG_RTPS_SAMPLE_TYPE_PS : MIG_RTPS_SAMPLE_TYPE_UNKNOWN))

/* --------------------------------------------------------- */

/* --------------------------------------------------------- */
  /*RTPS.2.0*/
  #define MIGRtpsGuid_toString REDAOrderedDataType_toStringQuadInt
/* --------------------------------------------------------- */
  /*RTPS.2.0*/
  #define MIGRtpsGuid_copy(to, from) \
    (to)->prefix.hostId    = (from)->prefix.hostId;  \
    (to)->prefix.appId    = (from)->prefix.appId;  \
    (to)->prefix.instanceId    = (from)->prefix.instanceId;  \
    (to)->objectId = (from)->objectId;

/* --------------------------------------------------------- */
  /*RTPS.2.0*/
  #define MIGRtpsGuid_equals(a, b)   \
     ((a)->prefix.hostId   == (b)->prefix.hostId && \
     (a)->prefix.appId    == (b)->prefix.appId &&  \
     (a)->prefix.instanceId   == (b)->prefix.instanceId &&  \
     (a)->objectId == (b)->objectId)

/* --------------------------------------------------------- */
  #define MIGRtpsGuid_isUnknown(me)   \
    ((me)->prefix.hostId   == MIG_RTPS_HOST_ID_UNKNOWN && \
     (me)->prefix.appId    == MIG_RTPS_APP_ID_UNKNOWN &&  \
     (me)->prefix.instanceId    == MIG_RTPS_INSTANCE_ID_UNKNOWN &&  \
     (me)->objectId == MIG_RTPS_OBJECT_ID_UNKNOWN)

/* --------------------------------------------------------- */
  /*RTPS.2.0*/
  #define MIGRtpsParticipantId_equals(a, b)   \
     ((a)->hostId   == (b)->hostId && \
     (a)->appId    == (b)->appId &&  \
     (a)->instanceId   == (b)->instanceId )

#define MIGRtpsGuidPrefix_equals MIGRtpsParticipantId_equals

/* --------------------------------------------------------- */
  #define MIGRtpsObjectId_getObjectSuffix(oid) \
    ((MIGRtpsObjectSuffix)((oid) & 0x000000ff))
/* --------------------------------------------------------- */
  #define MIGRtpsObjectId_generate(instanceId, osx) \
    ((MIGRtpsObjectId)(((instanceId) << 8) | (osx)))
/* --------------------------------------------------------- */
  #define MIGRtpsGuid_getObjectSuffix(guid) \
    ((MIGRtpsObjectSuffix)((guid)->objectId & 0x000000ff))
/* --------------------------------------------------------- */
  #define MIGRtpsProtocolVersion_getMajor(version) (*(version) >> 8)
/* --------------------------------------------------------- */
  #define MIGRtpsProtocolVersion_getMinor(version) (*(version) & 0x00ff)
/* --------------------------------------------------------- */
  #define MIGRtpsVendorId_getMajor(vendor)         (*(vendor) >> 8)
/* --------------------------------------------------------- */
  #define MIGRtpsVendorId_getMinor(vendor)         (*(vendor) & 0x00ff)

/* --------------------------------------------------------- */
  #define MIGRtpsSequenceNumber_deserializeMacro(sn, streamPtr, needByteSwap) \
    (                                                                  \
      needByteSwap ? (                                                 \
        *(((char *)(&((sn)->high))) + 3) = *((*(streamPtr))++),        \
        *(((char *)(&((sn)->high))) + 2) = *((*(streamPtr))++),        \
        *(((char *)(&((sn)->high))) + 1) = *((*(streamPtr))++),        \
        *(((char *)(&((sn)->high)))    ) = *((*(streamPtr))++),        \
        *(((char *)(&((sn)->low)))  + 3) = *((*(streamPtr))++),        \
        *(((char *)(&((sn)->low)))  + 2) = *((*(streamPtr))++),        \
        *(((char *)(&((sn)->low)))  + 1) = *((*(streamPtr))++),        \
        *(((char *)(&((sn)->low)))     ) = *((*(streamPtr))++),        \
        RTI_TRUE                                                       \
      ) : (                                                            \
        (sn)->high = *((RTI_INT32 *)(*(streamPtr))), *(streamPtr) += 4,\
	(sn)->low = *((RTI_UINT32 *)(*(streamPtr))), *(streamPtr) += 4,\
        RTI_TRUE                                                       \
      )                                                                \
    )

  #ifndef RTI_PRECONDITION_TEST
    #define MIGRtpsSequenceNumber_deserialize \
      MIGRtpsSequenceNumber_deserializeMacro
  #endif

/* --------------------------------------------------------- */
  #define MIGRtpsEpoch_deserializeMacro(me, streamPtr, needByteSwap) \
    (                                                                 \
      needByteSwap ? (                                                \
        *(((char *)(me)) + 3) = *((*(streamPtr))++),                  \
        *(((char *)(me)) + 2) = *((*(streamPtr))++),                  \
        *(((char *)(me)) + 1) = *((*(streamPtr))++),                  \
        *(((char *)(me))    ) = *((*(streamPtr))++),                  \
        RTI_TRUE                                                      \
      ) : (                                                           \
        *(me) = *((REDAEpoch*)(*(streamPtr))), *(streamPtr) += 4,     \
        RTI_TRUE                                                      \
      )                                                               \
    )

  #ifndef RTI_PRECONDITION_TEST
    #define MIGRtpsEpoch_deserialize MIGRtpsEpoch_deserializeMacro
  #endif

/* --------------------------------------------------------- */
    #define MIGRtps_deserializeUnsignedShortMacro(twobytes, data, needByteSwap) \
    (                                                                           \
        needByteSwap ? (                                                        \
            *(((char *)(twobytes)) + 1) = *((*(data))++),                       \
            *(((char *)(twobytes))    ) = *((*(data))++),                       \
            RTI_TRUE                                                            \
        ) : (                                                                   \
            *(twobytes) = *((unsigned short *)(*(data))),                       \
            *(data) += 2,                                                       \
            RTI_TRUE                                                            \
        )                                                                       \
    )                                                                           \

    #ifndef RTI_PRECONDITION_TEST
        #define MIGRtps_deserializeUnsignedShort MIGRtps_deserializeUnsignedShortMacro
    #endif

/* --------------------------------------------------------- */
    #define MIGRtps_deserializeUnsignedLongMacro(fourbytes, data, needByteSwap) \
    (                                                                           \
        needByteSwap ? (                                                        \
            *(((char *)(fourbytes)) + 3) = *((*(data))++),                      \
            *(((char *)(fourbytes)) + 2) = *((*(data))++),                      \
            *(((char *)(fourbytes)) + 1) = *((*(data))++),                      \
            *(((char *)(fourbytes))    ) = *((*(data))++),                      \
            RTI_TRUE                                                            \
        ) : (                                                                   \
            *(fourbytes) = *((RTI_UINT32 *)(*(data))),                       \
            *(data) += 4,                                                       \
            RTI_TRUE                                                            \
        )                                                                       \
    )                                                                           \

    #ifndef RTI_PRECONDITION_TEST
        #define MIGRtps_deserializeUnsignedLong MIGRtps_deserializeUnsignedLongMacro
    #endif

/* --------------------------------------------------------- */
struct MIGRtpsBitmap {
    /* lead sequence */
    struct REDASequenceNumber _lead;
    /* The size of the bitmap in the number of bits. */
    RTI_INT32 _bitCount;
    /* The bitmap stored as an array of integers.

       NOTE1: This must be unsigned in order to apply the >> operator.
       NOTE2: There are two approaches to handle bits outside bitCount:
                  1) They must always be zeroed.
		  2) They can be anything.
	      The first approach puts the burden on otherwise simple
	      methods such as truncate to zero out truncated bits, whereas
	      the second approach puts the burden on methods such as shift
	      to make sure bits beyond the bitCount are not shifted in.
	      In our implementation, we have opted for the second approach. */
    RTI_UINT32 _bits[MIG_RTPS_BITMAP_32BITS_ARRAY_SIZE_MAX];
};



/* --------------------------------------------------------- */
  #define MIGRtpsBitmap_getLead(a) (&(a)->_lead)
/* --------------------------------------------------------- */
  #define MIGRtpsBitmap_getBitCount(a) (a)->_bitCount
/* --------------------------------------------------------- */
  #define MIGRtpsBitmap_resetMacro(a, seqNum, bitCount)                     \
  {                                                                    \
    register int MIGRtpsBitmap_g_resetI = 0;                           \
    (a)->_lead = *(seqNum);                                            \
    (a)->_bitCount = (bitCount);                                       \
    for (MIGRtpsBitmap_g_resetI=0;                                     \
         MIGRtpsBitmap_g_resetI<MIG_RTPS_BITMAP_32BITS_ARRAY_SIZE_MAX; \
         ++MIGRtpsBitmap_g_resetI) {                                   \
        (a)->_bits[MIGRtpsBitmap_g_resetI] = 0;                      \
    }                                                                  \
  }
  #ifndef RTI_PRECONDITION_TEST
    #define MIGRtpsBitmap_reset MIGRtpsBitmap_resetMacro
  #endif

/* --------------------------------------------------------- */
  #define MIGRtpsBitmap_getSerializedSize(bitmap) \
      12 + sizeof(RTI_INT32)*(((bitmap)->_bitCount + 31)/32)

  #define MIGRtpsSubmessageId_toString(id) MIG_RTPS_SUBMESSAGE_ID_NAME[id]

/* --------------------------------------------------------- */


extern MIGDllExport
RTIBool MIGRtps_serialize2Octets(struct RTICdrStream *stream,
				 const RTICdrUnsignedShort *in,
				 void *serializeOption);

extern MIGDllExport
RTIBool MIGRtps_deserialize2Octets(struct RTICdrStream *stream,
				   RTICdrUnsignedShort *out,
				   void *serializeOption);

extern MIGDllExport
unsigned int MIGRtps_get2OctetsMaxSizeSerialized(unsigned int size);


  #define MIGRtps_serializeProtocolVersion   MIGRtps_serialize2Octets
  #define MIGRtps_deserializeProtocolVersion MIGRtps_deserialize2Octets
  #define MIGRtps_getProtocolVersionMaxSizeSerialized \
     MIGRtps_get2OctetsMaxSizeSerialized

  #define MIGRtps_serializeVendorId   MIGRtps_serialize2Octets
  #define MIGRtps_deserializeVendorId MIGRtps_deserialize2Octets
  #define MIGRtps_getVendorIdMaxSizeSerialized \
     MIGRtps_get2OctetsMaxSizeSerialized



#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* mig_rtps_impl_h */
