/*
 * @(#)mig_rtps.h    generated by: makeheader    Mon Dec  3 23:08:07 2007
 *
 *		built from:	rtps.ifc
 */

#ifndef mig_rtps_h
#define mig_rtps_h


  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef reda_epoch_h
    #include "reda/reda_epoch.h"
  #endif
  #ifndef cdr_type_h
    #include "cdr/cdr_type.h"
  #endif
  #ifndef transport_common_h
    #include "transport/transport_common.h"
  #endif
  #ifndef mig_dll_h
    #include "mig/mig_dll.h"
  #endif
  #ifndef cdr_stream_h
    #include "cdr/cdr_stream.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif


  #define MIG_RTPS_HEADER_SIZE (20) /*RTPS.2.0*/


  #define MIG_RTPS_SUBMESSAGE_HEADER_SIZE (4)


  #define MIG_RTPS_SUBMESSAGE_OCTETS_TO_NEXT_HEADER_MAX (0xFFFF)


  #define MIG_RTPS_SUBMESSAGE_SIZE_MIN (8)


  #define MIG_RTPS_SUBMESSAGE_HEADER_SIZE_MAX (64)


  #define MIG_RTPS_SUBMESSAGE_ALIGNMENT (4)


  #define MIG_RTPS_SUBMESSAGE_ID_INVALID_MASK (0x40)


  #define MIG_RTPS_IP_ADDRESS_INVALID (0)


  #define MIG_RTPS_PORT_INVALID (0)


  #define MIG_RTPS_TIMESTAMP_SEC_DEFAULT (0)


  #define MIG_RTPS_TIMESTAMP_FRAC_DEFAULT (0)


  #define MIG_RTPS_PATHNAME_LEN_MAX (255)

typedef RTI_UINT32 MIGRtpsHostId;


  #define MIG_RTPS_HOST_ID_UNKNOWN (0x00000000)

extern MIGDllExport
RTIBool MIGRtpsHostId_serialize(
    struct RTICdrStream *stream,
    const MIGRtpsHostId *hostId,
    void *serializeOption);

extern MIGDllExport
RTIBool MIGRtpsHostId_deserialize(
    struct RTICdrStream *stream,
    const MIGRtpsHostId *hostId);

extern MIGDllExport
unsigned int MIGRtpsHostId_getMaxSizeSerialized(
    unsigned int size);

extern MIGDllExport
void MIGRtpsHostId_print(
    const MIGRtpsHostId *hostId,
    const char *desc,
    unsigned int indent);

typedef RTI_UINT32 MIGRtpsAppId;


  #define MIG_RTPS_APP_ID_UNKNOWN (0x00000000)

  #define MIGRtpsAppId_serialize MIGRtpsHostId_serialize

  #define MIGRtpsAppId_deserialize MIGRtpsHostId_deserialize
    
  #define MIGRtpsAppId_getMaxSizeSerialized MIGRtpsHostId_getMaxSizeSerialized

  #define MIGRtpsAppId_print MIGRtpsHostId_print

typedef RTI_UINT32 MIGRtpsInstanceId; /*RTPS.2.0*/


  #define MIG_RTPS_INSTANCE_ID_UNKNOWN (0x00000000) /*RTPS.2.0*/

  #define MIGRtpsInstanceId_serialize MIGRtpsHostId_serialize

  #define MIGRtpsInstanceId_deserialize MIGRtpsHostId_deserialize
    
  #define MIGRtpsInstanceId_getMaxSizeSerialized MIGRtpsHostId_getMaxSizeSerialized

  #define MIGRtpsInstanceId_print MIGRtpsHostId_print

typedef RTI_UINT32 MIGRtpsObjectId;


  #define MIG_RTPS_OBJECT_ID_UNKNOWN (0x00000000)

  #define MIGRtpsObjectId_serialize MIGRtpsHostId_serialize

  #define MIGRtpsObjectId_deserialize MIGRtpsHostId_deserialize
    
  #define MIGRtpsObjectId_getMaxSizeSerialized MIGRtpsHostId_getMaxSizeSerialized

  #define MIGRtpsObjectId_print MIGRtpsHostId_print

struct MIGRtpsGuidPrefix{
    /*e */
    MIGRtpsHostId   hostId;
    /*e */
    MIGRtpsAppId    appId;
    /*e */
    MIGRtpsInstanceId  instanceId; 

};

typedef struct MIGRtpsGuidPrefix MIGRtpsParticipantId;


  #define MIG_RTPS_GUID_PREFIX_UNKNOWN { \
    MIG_RTPS_HOST_ID_UNKNOWN,   \
    MIG_RTPS_APP_ID_UNKNOWN,    \
    MIG_RTPS_INSTANCE_ID_UNKNOWN} 


  #define MIG_RTPS_GUID_PREFIX_SIZE (12) 

struct MIGRtpsGuid {
    /*e */
    struct MIGRtpsGuidPrefix prefix;
    /*e */
    MIGRtpsObjectId objectId;
};


  #define MIG_RTPS_GUID_UNKNOWN {   \
    MIG_RTPS_GUID_PREFIX_UNKNOWN,   \
    MIG_RTPS_OBJECT_ID_UNKNOWN}

typedef RTI_UINT16 MIGRtpsDataFlags;


    #define MIG_RTPS_DATA_FLAGS_NONE (0)


    #define MIG_RTPS_DATA_INLINE_QOS_OFFSET_DEFAULT (16)

struct REDABuffer;

extern MIGDllExport const char *
MIGRtpsGuid_toString(const void *guid, struct REDABuffer *str);

extern MIGDllExport void
MIGRtpsGuid_toBase32(const struct MIGRtpsGuid *guid,char * str);

extern MIGDllExport 
void MIGRtpsGuid_htoncopy(struct MIGRtpsGuid *me,
                          const struct MIGRtpsGuid *src);

extern MIGDllExport 
void MIGRtpsGuid_ntohcopy(struct MIGRtpsGuid *me,
                          const struct MIGRtpsGuid *src);


  #define MIG_RTPS_GUID_STRING_LENGTH (44)

extern MIGDllExport void MIGRtpsGuid_copy(struct MIGRtpsGuid *me,
					  struct MIGRtpsGuid *src);

extern MIGDllExport
RTIBool MIGRtpsGuid_equals(struct MIGRtpsGuid *a, struct MIGRtpsGuid *b);

extern MIGDllExport
RTIBool MIGRtpsGuid_isUnknown(struct MIGRtpsGuid *me);

extern MIGDllExport 
RTIBool MIGRtpsGuid_serialize(
    struct RTICdrStream *stream,
    const struct MIGRtpsGuid *guid,
    void *serializeOption);

extern MIGDllExport
RTIBool MIGRtpsGuid_deserialize(
    struct RTICdrStream *stream,
    const struct MIGRtpsGuid *guid);

extern MIGDllExport 
unsigned int MIGRtpsGuid_getMaxSizeSerialized(
    unsigned int size);

extern MIGDllExport
int MIGRtpsGuid_compare(
    const struct MIGRtpsGuid *left,
    const struct MIGRtpsGuid *right);

extern MIGDllExport 
void MIGRtpsGuid_print(
    const struct MIGRtpsGuid *guid, 
    const char *desc, unsigned int indent);

typedef RTI_UINT16 MIGRtpsProtocolVersion;


  #define MIG_RTPS_PROTOCOL_VERSION_1_0 (0x0100)


  #define MIG_RTPS_PROTOCOL_VERSION_1_1 (0x0101)


  #define MIG_RTPS_PROTOCOL_VERSION_1_2 (0x0102)


  #define MIG_RTPS_PROTOCOL_VERSION_2_0 (0x0200) /*RTPS.2.0*/


  #define MIG_RTPS_PROTOCOL_VERSION_2_1 (0x0201)


  #define MIG_RTPS_PROTOCOL_VERSION    MIG_RTPS_PROTOCOL_VERSION_2_1 /*RTPS.2.1*/


  #define MIG_RTPS_PROTOCOL_VERSION_MAJOR (0x02) /* RTPS.2.1 */


  #define MIG_RTPS_PROTOCOL_VERSION_MINOR (0x01) /* RTPS.2.1 */

typedef RTI_UINT16 MIGRtpsVendorId;


  #define MIG_RTPS_VENDOR_ID_MAJOR (0x01)


  #define MIG_RTPS_VENDOR_ID_MINOR (0x01)


  #define MIG_RTPS_VENDOR_ID_RTI (0x0101)


  #define MIG_RTPS_VENDOR_ID_UNKNOWN (0x0000)

typedef enum {
    /*e padding */
    MIG_RTPS_PAD        = 0x01,
    /*e CST variable */
    MIG_RTPS_VAR        = 0x02,
    /*e P/S issue */
    MIG_RTPS_ISSUE      = 0x03,
    /*e acknowledgement */
    MIG_RTPS_ACK        = 0x06,
    /*e heartbeat */
    MIG_RTPS_HEARTBEAT  = 0x07,
    /*e gap */
    MIG_RTPS_GAP        = 0x08,
    /*e timestamp */
    MIG_RTPS_INFO_TS    = 0x09,
    /*e message source */
    MIG_RTPS_INFO_SRC   = 0x0c,
    /*e how to reply to sender using IPv4*/
    MIG_RTPS_INFO_REPLY_IP4 = 0x0d, /*RTPS.2.0*/
    /*e destination of the message; intended recipient */
    MIG_RTPS_INFO_DST    = 0x0e,
    /*e how to reply to sender using IPv6 */
    MIG_RTPS_INFO_REPLY   = 0x0f, /*RTPS.2.0*/
    /*e identifier for the data fragments submessage */
    MIG_RTPS_DATA_FRAG       = 0x10, /*RTPS.2.0*/
    /*e identifier for the no key data fragments submessage */
    MIG_RTPS_NOKEY_DATA_FRAG = 0x11, /*RTPS.2.0*/
    /*e identifier for the data fragments nack submessage */
    MIG_RTPS_NACK_FRAG       = 0x12, /*RTPS.2.0*/
    /*e identifier for the data fragments heartbeat submessage */
    MIG_RTPS_HEARTBEAT_FRAG  = 0x13, /*RTPS.2.0*/
    /*e data */
    MIG_RTPS_DATA = 0x15, /* RTPS 2.1 */
    /*e data */
    MIG_RTPS_DATA_FRAG_X = 0x16 /* RTPS 2.1 */
} MIGRtpsSubmessageId;


  #define MIG_RTPS_SUBMESSAGE_ID_COUNT_MAX (24)

  #define MIG_RTPS_SUBMESSAGE_ID_DROP_INVALID (0x40)


typedef RTI_UINT32 MIGRtpsStatusInfo;


  #define MIG_RTPS_NO_STATUS_INFO (0x00000000)


  #define MIG_RTPS_D_STATUS_INFO (0x00000001)


  #define MIG_RTPS_U_STATUS_INFO (0x00000002)


  #define MIG_RTPS_NO_FLAG (0x00)


  #define MIG_RTPS_ENDIAN_FLAG (0x01)


  #define MIG_RTPS_INFO_REPLY_M_FLAG (0x02)


  #define MIG_RTPS_INFO_TS_I_FLAG (0x02)


  #define MIG_RTPS_ACK_F_FLAG (0x02)


  #define MIG_RTPS_HEARTBEAT_F_FLAG (0x02)


  #define MIG_RTPS_HEARTBEAT_L_FLAG (0x04)


  #define MIG_RTPS_ISSUE_Q_FLAG (0x02)


  #define MIG_RTPS_ISSUE_D_FLAG (0x04)


  #define MIG_RTPS_DATA_Q_FLAG (0x02) 


  #define MIG_RTPS_DATA_D_FLAG (0x04) 

typedef enum {
    MIG_RTPS_OBJECT_NORMAL_USER_UNKNOWN        = 0x00,
    MIG_RTPS_OBJECT_NORMAL_USER_APPLICATION    = 0x01,
    /*e Use this suffix for writers of data with a key. */
    MIG_RTPS_OBJECT_NORMAL_USER_CST_WRITER     = 0x02,
    /*e Use this suffix for writers of data with no key. */
    MIG_RTPS_OBJECT_NORMAL_USER_PUBLICATION    = 0x03,
    /*e Use this suffix for readers of data with no key. */
    MIG_RTPS_OBJECT_NORMAL_USER_SUBSCRIPTION   = 0x04,
    /*e Use this suffix for readers of data with a key. */
    MIG_RTPS_OBJECT_NORMAL_USER_CST_READER     = 0x07,

    MIG_RTPS_OBJECT_NORMAL_USER_VIRTUAL_SUBSCRIPTION = 0x3C,
    MIG_RTPS_OBJECT_NORMAL_USER_VIRTUAL_CST_READER   = 0x3D,

    MIG_RTPS_OBJECT_RESERVED_USER_UNKNOWN      = 0x40,
    MIG_RTPS_OBJECT_RESERVED_USER_APPLICATION  = 0x41,
    MIG_RTPS_OBJECT_RESERVED_USER_CST_WRITER   = 0x42,
    MIG_RTPS_OBJECT_RESERVED_USER_PUBLICATION  = 0x43,
    MIG_RTPS_OBJECT_RESERVED_USER_SUBSCRIPTION = 0x44,
    MIG_RTPS_OBJECT_RESERVED_USER_CST_READER   = 0x47,

    MIG_RTPS_OBJECT_NORMAL_META_UNKNOWN        = 0x80,
    MIG_RTPS_OBJECT_NORMAL_META_APPLICATION    = 0x81,
    MIG_RTPS_OBJECT_NORMAL_META_CST_WRITER     = 0x82,
    MIG_RTPS_OBJECT_NORMAL_META_PUBLICATION    = 0x83,
    MIG_RTPS_OBJECT_NORMAL_META_SUBSCRIPTION   = 0x84,
    MIG_RTPS_OBJECT_NORMAL_META_CST_READER     = 0x87,

    MIG_RTPS_OBJECT_RESERVED_META_UNKNOWN      = 0xc0,
    MIG_RTPS_OBJECT_RESERVED_META_APPLICATION  = 0xc1,
    MIG_RTPS_OBJECT_RESERVED_META_CST_WRITER   = 0xc2,
    MIG_RTPS_OBJECT_RESERVED_META_PUBLICATION  = 0xc3,
    MIG_RTPS_OBJECT_RESERVED_META_SUBSCRIPTION = 0xc4,
    MIG_RTPS_OBJECT_RESERVED_META_CST_READER   = 0xc7
} MIGRtpsObjectSuffix;


  #define MIG_RTPS_OBJECT_KIND_M_BIT (0x80)


  #define MIG_RTPS_OBJECT_KIND_R_BIT (0x40)

typedef enum {
    MIG_RTPS_RW_TYPE_UNKNOWN,
    MIG_RTPS_RW_TYPE_READER,
    MIG_RTPS_RW_TYPE_WRITER
} MIGRtpsRWType;

typedef enum {
    MIG_RTPS_SAMPLE_TYPE_UNKNOWN,
    MIG_RTPS_SAMPLE_TYPE_CST,
    MIG_RTPS_SAMPLE_TYPE_PS
} MIGRtpsSampleType;

extern MIGDllExport
RTIBool MIGRtpsObjectSuffix_isReserved(MIGRtpsObjectSuffix osx);

extern MIGDllExport
RTIBool MIGRtpsObjectSuffix_isMeta(MIGRtpsObjectSuffix osx);

extern MIGDllExport
RTIBool MIGRtpsObjectSuffix_isKeyed(MIGRtpsObjectSuffix osx);

extern MIGDllExport
MIGRtpsRWType MIGRtpsObjectSuffix_getRWType(MIGRtpsObjectSuffix osx);

extern MIGDllExport
MIGRtpsRWType MIGRtpsObjectSuffix_getSampleType(MIGRtpsObjectSuffix osx);

extern MIGDllExport
MIGRtpsObjectSuffix MIGRtpsObjectId_getObjectSuffix(MIGRtpsObjectId oid);

extern MIGDllExport
MIGRtpsObjectId MIGRtpsObjectId_generate(
    int instanceId, MIGRtpsObjectSuffix osx);

extern MIGDllExport
MIGRtpsObjectSuffix MIGRtpsGuid_getObjectSuffix(struct MIGRtpsGuid *me);

struct REDASequenceNumber;

extern MIGDllExport RTIBool
MIGRtpsSequenceNumber_deserialize(struct REDASequenceNumber *me,
				  const char **stream, RTIBool needByteSwap);

extern MIGDllExport int
MIGRtpsSequenceNumber_getDistance(const struct REDASequenceNumber *s1,
				  const struct REDASequenceNumber *s2);


  #define MIG_RTPS_BITMAP_32BITS_ARRAY_SIZE_MAX (8)   /* 256/32 = 8 */

struct MIGRtpsBitmap;


  #define MIG_RTPS_BITMAP_SIZE_MAX              (256)


  #define MIG_RTPS_BITMAP_DISTANCE_MAX          (0x7FFFFFFF)

extern MIGDllExport RTIBool
MIGRtpsBitmap_equals(const struct MIGRtpsBitmap *l,
		     const struct MIGRtpsBitmap *r);

extern MIGDllExport void
MIGRtpsBitmap_reset(struct MIGRtpsBitmap *me,
		    const struct REDASequenceNumber *seqNum,
		    RTI_INT32 bitCount);

extern MIGDllExport RTIBool
MIGRtpsBitmap_setBit(struct MIGRtpsBitmap *me,
		     const struct REDASequenceNumber *num, RTIBool bit);

extern MIGDllExport RTIBool
MIGRtpsBitmap_getBit(const struct MIGRtpsBitmap *me, RTIBool *bit,
		     const struct REDASequenceNumber *num);

extern MIGDllExport RTIBool
MIGRtpsBitmap_getFirstBit(const struct MIGRtpsBitmap *me,
			  struct REDASequenceNumber *position,
			  RTIBool searchBit);

extern MIGDllExport RTIBool
MIGRtpsBitmap_fill(struct MIGRtpsBitmap *me,
		   const struct REDASequenceNumber *firstSeqNum,
		   const struct REDASequenceNumber *lastSeqNum,
		   RTIBool bit);

extern MIGDllExport void
MIGRtpsBitmap_copy(struct MIGRtpsBitmap *me,
		   const struct MIGRtpsBitmap *source,
		   unsigned int length);

extern MIGDllExport void
MIGRtpsBitmap_merge(struct MIGRtpsBitmap *me,
		    const struct MIGRtpsBitmap *source);

extern MIGDllExport RTIBool
MIGRtpsBitmap_shift(struct MIGRtpsBitmap *me,
		    const struct REDASequenceNumber *seqNum);

extern MIGDllExport void
MIGRtpsBitmap_truncate(struct MIGRtpsBitmap *me,
		       const struct REDASequenceNumber *seqNum);

extern MIGDllExport void
MIGRtpsBitmap_truncateToZeroCount(struct MIGRtpsBitmap *me,
				  const struct REDASequenceNumber *startSn,
				  int totalZeros);

extern MIGDllExport void
MIGRtpsBitmap_invert(struct MIGRtpsBitmap *me);

extern MIGDllExport void
MIGRtpsBitmap_compressTrailingOnes(struct MIGRtpsBitmap *me);

extern MIGDllExport RTIBool
MIGRtpsBitmap_deserialize(struct MIGRtpsBitmap *me, const char **stream,
			  RTIBool needByteSwap);

extern MIGDllExport RTI_INT32
MIGRtpsBitmap_getZeroCount(const struct MIGRtpsBitmap *me,
			   const struct REDASequenceNumber *sn);

extern MIGDllExport RTIBool
MIGRtpsFragmentBitmap_deserialize(struct MIGRtpsBitmap *me, const char **stream,
                                  RTIBool needByteSwap);

typedef RTI_UINT16 MIGRtpsParameterId;


#define MIG_RTPS_PID_INCOMPATIBLE_MASK              (0x4000)


#define MIG_RTPS_PID_PAD                             (0x0000)


#define MIG_RTPS_PID_SENTINEL                        (0x0001)


#define MIG_RTPS_PID_USER_DATA                       (0x002c)


#define MIG_RTPS_PID_TOPIC_NAME                      (0x0005)


#define MIG_RTPS_PID_TYPE_NAME                       (0x0007)


#define MIG_RTPS_PID_GROUP_DATA                       (0x002d)


#define MIG_RTPS_PID_TOPIC_DATA                       (0x002e)


#define MIG_RTPS_PID_DURABILITY         (0x001d)


#define MIG_RTPS_PID_DURABILITY_SERVICE (0x001e)


#define MIG_RTPS_PID_DEADLINE         (0x0023)


#define MIG_RTPS_PID_LATENCY_BUDGET         (0x0027)


#define MIG_RTPS_PID_LIVELINESS         (0x001b)


#define MIG_RTPS_PID_RELIABILITY        (0x001a)


#define MIG_RTPS_PID_LIFESPAN           (0x002b)


#define MIG_RTPS_PID_DESTINATION_ORDER (0x0025)


#define MIG_RTPS_PID_HISTORY           (0x0040)


#define MIG_RTPS_PID_RESOURCE_LIMITS   (0x0041)


#define MIG_RTPS_PID_OWNERSHIP         (0x001f)


#define MIG_RTPS_PID_OWNERSHIP_STRENGTH (0x0006)


#define MIG_RTPS_PID_PRESENTATION         (0x0021)


#define MIG_RTPS_PID_PARTITION         (0x0029)


#define MIG_RTPS_PID_TIME_BASED_FILTER (0x0004)


#define MIG_RTPS_PID_TRANSPORT_PRIORITY (0x0049)


#define MIG_RTPS_PID_PROTOCOL_VERSION                (0x0015)


#define MIG_RTPS_PID_VENDOR_ID                       (0x0016)


#define MIG_RTPS_PID_UNICAST_LOCATOR6     (0x002f)


#define MIG_RTPS_PID_MULTICAST_LOCATOR6     (0x0030)


#define MIG_RTPS_PID_MULTICAST_IPADDRESS    (0x0011)


#define MIG_RTPS_PID_DEFAULT_UNICAST_LOCATOR6     (0x0031)


#define MIG_RTPS_PID_METATRAFFIC_UNICAST_LOCATOR6 (0x0032)


#define MIG_RTPS_PID_METATRAFFIC_MULTICAST_LOCATOR6 (0x0033)


#define MIG_RTPS_PID_DEFAULT_UNICAST_IPADDRESS     (0x000c)


#define MIG_RTPS_PID_DEFAULT_UNICAST_PORT          (0x000e)


#define MIG_RTPS_PID_METATRAFFIC_UNICAST_IPADDRESS (0x0045)


#define MIG_RTPS_PID_METATRAFFIC_UNICAST_PORT     (0x000d)


#define MIG_RTPS_PID_METATRAFFIC_MULTICAST_IPADDRESS (0x000b)


#define MIG_RTPS_PID_METATRAFFIC_MULTICAST_PORT (0x0046)


#define MIG_RTPS_PID_EXPECTS_INLINE_QOS         (0x0043)


#define MIG_RTPS_PID_MANUAL_LIVELINESS_COUNT    (0x0034)


#define MIG_RTPS_PID_PARTICIPANT_BUILTIN_ENDPOINTS (0x0044)


#define MIG_RTPS_PID_LEASE_DURATION                (0x0002)


#define MIG_RTPS_PID_TYPECODE                      (0x0047)


#define MIG_RTPS_PID_CONTENT_FILTER_PROPERTY         (0x0035)


#define MIG_RTPS_PID_PROPERTY_LIST 	              (0x0059)


#define MIG_RTPS_PID_PARTICIPANT_GUID                 (0x0050)


#define MIG_RTPS_PID_PARTICIPANT_ENTITY_ID            (0x0051)


#define MIG_RTPS_PID_GROUP_GUID                       (0x0052)


#define MIG_RTPS_PID_GROUP_ENTITY_ID                 (0x0053)


   #define MIG_RTPS_PID_FILTER_SIGNATURE (0x0055)


   #define MIG_RTPS_PID_COHERENT_SET     (0x0056)


   #define MIG_RTPS_PID_DIRECTED_WRITE     (0x0057)


   #define MIG_RTPS_PID_BUILTIN_ENDPOINT_MASK     (0x0058)


   #define MIG_RTPS_PID_ENDPOINT_GUID    (0x005A)


   #define MIG_RTPS_PID_MAX_SAMPLE_SERIALIZED_SIZE     (0x0060)


   #define MIG_RTPS_PID_ENTITY_NAME     (0x0062)


   #define MIG_RTPS_PID_KEY_HASH     (0x0070)


   #define MIG_RTPS_PID_STATUS_INFO    (0x0071)


   #define MIG_RTPS_HEARTBEAT_SIZE_SERIALIZED  (32)


   #define MIG_RTPS_GAP_SIZE_SERIALIZED  (52)


   #define MIG_RTPS_NACKFRAG_SIZE_SERIALIZED  (56)


    #define MIG_RTPS_PID_ORIGINAL_WRITER_INFO (0x0061)

extern MIGDllExport RTIBool
MIGRtpsParameterSequence_skip(const char **stream, RTIBool needByteSwap, int maxParamLength);

struct RTICdrStream;

extern MIGDllExport
RTIBool MIGRtps_serializeProtocolVersion(struct RTICdrStream *stream,
					 const RTICdrUnsignedShort *in,
					 void *serializeOption);

extern MIGDllExport
RTIBool MIGRtps_deserializeProtocolVersion(struct RTICdrStream *stream,
					   RTICdrUnsignedShort *out,
					   void *serializeOption);

extern MIGDllExport
unsigned int MIGRtps_getProtocolVersionMaxSizeSerialized(unsigned int size);

extern MIGDllExport
RTIBool MIGRtps_serializeVendorId(struct RTICdrStream *stream,
				  const RTICdrUnsignedShort *in,
				  void *serializeOption);

extern MIGDllExport
RTIBool MIGRtps_deserializeVendorId(struct RTICdrStream *stream,
				    RTICdrUnsignedShort *out,
				    void *serializeOption);

extern MIGDllExport
unsigned int MIGRtps_getVendorIdMaxSizeSerialized(unsigned int size);

struct RTINtpTime;

extern MIGDllExport
RTIBool MIGRtps_serializeRtiNtpTime(struct RTICdrStream *stream,
				    const struct RTINtpTime *time,
				    void *serializeOption);

extern MIGDllExport
RTIBool MIGRtps_deserializeRtiNtpTime(struct RTICdrStream *stream,
				      struct RTINtpTime *time,
				      void *serializeOption);

extern MIGDllExport
unsigned int MIGRtps_getRtiNtpTimeMaxSizeSerialized(unsigned int size);

extern MIGDllExport
RTIBool MIGRtps_serializeSequenceNumber(struct RTICdrStream *stream,
					const struct REDASequenceNumber *seq,
					void *serializeOption);

extern MIGDllExport
RTIBool MIGRtps_deserializeSequenceNumber(struct RTICdrStream *stream,
					  struct REDASequenceNumber *seq,
					  void *serializeOption);

extern MIGDllExport
unsigned int MIGRtps_getSequenceNumberMaxSizeSerialized(unsigned int size);

extern MIGDllExport
RTIBool MIGRtps_serializeRtiBool(struct RTICdrStream *stream,
				 const RTIBool *in,
				 void *serializeOption);

extern MIGDllExport
RTIBool MIGRtps_deserializeRtiBool(struct RTICdrStream *stream,
				   RTIBool *out,
				   void *serializeOption);

extern MIGDllExport
unsigned int MIGRtps_getRtiBoolMaxSizeSerialized(unsigned int size);

extern MIGDllExport
RTIBool MIGRtps_serializeIpv4Address(struct RTICdrStream *stream,
				     const NDDS_Transport_Address_t *addr,
				     void *serializeOption);

extern MIGDllExport
RTIBool MIGRtps_deserializeIpv4Address(struct RTICdrStream *stream,
				       NDDS_Transport_Address_t *addr,
				       void *serializeOption);

extern MIGDllExport
unsigned int MIGRtps_getIpv4AddressMaxSizeSerialized(unsigned int size);

struct RTINetioLocator;

extern MIGDllExport
RTIBool MIGRtps_serializeIpv6Locator(struct RTICdrStream *stream,
				     const struct RTINetioLocator *loc,
				     void *serializeOption);

extern MIGDllExport
RTIBool MIGRtps_deserializeIpv6Locator(struct RTICdrStream *stream,
				       struct RTINetioLocator *loc,
				       void *serializeOption);

extern MIGDllExport
unsigned int MIGRtps_getIpv6LocatorMaxSizeSerialized(unsigned int size);

extern MIGDllExport RTIBool
MIGRtpsEpoch_deserialize(REDAEpoch* me,
			 const char **stream, RTIBool needByteSwap);

extern MIGDllExport RTIBool
MIGRtps_deserializeUnsignedShort(unsigned short *twobytes, const char **data, RTIBool needByteSwap);

extern MIGDllExport RTIBool
MIGRtps_deserializeUnsignedLong(RTI_UINT32 *fourbytes, const char **data, RTIBool needByteSwap);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

  #include "mig/mig_rtps_impl.h"

#endif /* mig_rtps_h */
