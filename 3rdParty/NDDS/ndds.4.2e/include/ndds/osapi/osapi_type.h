/*
 * @(#)osapi_type.h    generated by: makeheader    Mon Dec  3 23:07:48 2007
 *
 *		built from:	type.ifc
 */

#ifndef osapi_type_h
#define osapi_type_h



#define RTIBool int
#define RTI_FALSE (0)
#define RTI_TRUE  (1)

#ifndef NULL
  #define NULL (0)
#endif

/*
 * ALPHA's long is 64 bits
 */
#ifdef RTI_64BIT
  /**
    Atomic type that is 64 bits.
  */
    typedef signed long long  RTI_INT64;
    typedef unsigned long long RTI_UINT64;
#endif
#if defined(RTI_UNIX) || defined(RTI_VXWORKS) || defined(RTI_OPENVMS)
  /**
    Atomic type that is 32 bits.
  */
    typedef signed int  RTI_INT32;
    typedef unsigned int RTI_UINT32;
  /**
    Atomic type that is 16 bit integer.
  */
    typedef signed short  RTI_INT16;
    typedef unsigned short RTI_UINT16;
  /**
    Atomic type that is 8 bit integer.
  */
    typedef signed char   RTI_INT8;
    typedef unsigned char RTI_UINT8;
  /**
    Atomic type that is 32 bit float.
  */
  typedef float  RTI_FLOAT32;
  /**
    Atomic type that is 64 bit float.
  */
  typedef double RTI_DOUBLE64;
#endif

#if defined(RTI_PSOS)
    typedef signed int     RTI_INT32;
    typedef unsigned int   RTI_UINT32;
    typedef signed short   RTI_INT16;
    typedef unsigned short RTI_UINT16;
    typedef char           RTI_INT8;
    typedef unsigned char  RTI_UINT8;
    typedef float          RTI_FLOAT32;
    typedef double         RTI_DOUBLE64;
#endif

#if defined(RTI_NETOS)
    typedef signed int     RTI_INT32;
    typedef unsigned int   RTI_UINT32;
    typedef signed short   RTI_INT16;
    typedef unsigned short RTI_UINT16;
    typedef char           RTI_INT8;
    typedef unsigned char  RTI_UINT8;
    typedef float          RTI_FLOAT32;
    typedef double         RTI_DOUBLE64;
#endif

#if defined(RTI_LYNX)
    typedef signed int     RTI_INT32;
    typedef unsigned int   RTI_UINT32;
    typedef signed short   RTI_INT16;
    typedef unsigned short RTI_UINT16;
    typedef char           RTI_INT8;
    typedef unsigned char  RTI_UINT8;
    typedef float          RTI_FLOAT32;
    typedef double         RTI_DOUBLE64;
#endif

#if defined(RTI_QNX)
    typedef signed int     RTI_INT32;
    typedef unsigned int   RTI_UINT32;
    typedef signed short   RTI_INT16;
    typedef unsigned short RTI_UINT16;
    typedef char           RTI_INT8;
    typedef unsigned char  RTI_UINT8;
    typedef float          RTI_FLOAT32;
    typedef double         RTI_DOUBLE64;
#endif

#if defined(RTI_INTY)
    typedef signed int     RTI_INT32;
    typedef unsigned int   RTI_UINT32;
    typedef signed short   RTI_INT16;
    typedef unsigned short RTI_UINT16;
    typedef char           RTI_INT8;
    typedef unsigned char  RTI_UINT8;
    typedef float          RTI_FLOAT32;
    typedef double         RTI_DOUBLE64;
#endif

#ifdef RTI_WIN32
    typedef signed int     RTI_INT32;
    typedef unsigned int   RTI_UINT32;
    typedef char           RTI_INT8;
    typedef unsigned char  RTI_UINT8;
    typedef signed short   RTI_INT16;
    typedef unsigned short RTI_UINT16;
    typedef float          RTI_FLOAT32;
    typedef double         RTI_DOUBLE64;
#endif /* RTI_WIN32 */

#if defined(RTI_WINCE)
    typedef int            RTI_INT32;
    typedef unsigned int   RTI_UINT32;
    typedef char           RTI_INT8;
    typedef unsigned char  RTI_UINT8;
    typedef short          RTI_INT16;
    typedef unsigned short RTI_UINT16;
    typedef float          RTI_FLOAT32;
    typedef double         RTI_DOUBLE64;
#endif /* RTI_WINCE */

#if defined(RTI_WISP)
    typedef signed int     RTI_INT32;
    typedef unsigned int   RTI_UINT32;
    typedef double         RTI_DOUBLE64;
#endif

#ifdef __cplusplus
    extern "C" {
#endif


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* osapi_type_h */
