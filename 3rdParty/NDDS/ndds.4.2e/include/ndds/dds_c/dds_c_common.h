/*
 * @(#)dds_c_common.h    generated by: makeheader    Mon Dec  3 23:08:26 2007
 *
 *		built from:	common.ifc
 */

#ifndef dds_c_common_h
#define dds_c_common_h



#ifndef osapi_type_h
  #include "osapi/osapi_type.h"   /* for RTI_UINT32 */
#endif

/* TODO: The dependency on CDR should be removed in the future.
 *       See bug #7910.
 */
#ifndef osapi_type_h
  #include "osapi/osapi_type.h"
#endif
#ifndef cdr_stream_h
  #include "cdr/cdr_stream.h"
#endif
#ifndef cdr_type_h
  #include "cdr/cdr_type.h"
#endif
#ifndef event_activeDatabase_h
  #include "event/event_activeDatabase.h"
#endif
#ifndef netio_common_h
  #include "netio/netio_common.h"
#endif
#ifndef netio_configurator_h
  #include "netio/netio_configurator.h"
#endif
#ifndef mig_rtps_h
  #include "mig/mig_rtps.h"
#endif
#ifndef mig_generator_h
  #include "mig/mig_generator.h"
#endif
#ifndef commend_facade_h
  #include "commend/commend_facade.h"
#endif
#ifndef commend_activeFacade_h
  #include "commend/commend_activeFacade.h"
#endif


#ifndef pres_participant_h
  #include "pres/pres_participant.h"
#endif
#ifndef pres_psService_h
  #include "pres/pres_psService.h"
#endif
#ifndef pres_psReaderWriter_h
  #include "pres/pres_psReaderWriter.h"
#endif

#ifndef dds_c_dll_h
  #include "dds_c/dds_c_dll.h"
#endif

#ifdef __cplusplus
    extern "C" {
#endif


#define DDS_DOMAINID_TYPE_NATIVE    RTI_INT32

typedef struct PRESInstanceHandle DDS_HANDLE_TYPE_NATIVE;


#define DDS_HANDLE_NIL_NATIVE PRES_INSTANCE_HANDLE_NIL


#define DDS_BUILTIN_TOPIC_KEY_TYPE_NATIVE    RTI_UINT32

typedef RTICdrChar DDS_Char;

typedef RTICdrWchar DDS_Wchar;

typedef RTICdrOctet DDS_Octet;

typedef RTICdrShort DDS_Short;

typedef RTICdrUnsignedShort DDS_UnsignedShort;

typedef RTICdrLong DDS_Long;

typedef RTICdrUnsignedLong DDS_UnsignedLong;

typedef RTICdrLongLong DDS_LongLong;

typedef RTICdrUnsignedLongLong DDS_UnsignedLongLong;

typedef RTICdrFloat DDS_Float;

typedef RTICdrDouble DDS_Double;

typedef RTICdrLongDouble DDS_LongDouble;

typedef RTICdrBoolean DDS_Boolean;

typedef RTICdrEnum DDS_Enum;


#define DDS_BOOLEAN_TRUE    ((DDS_Boolean) 1)


#define DDS_BOOLEAN_FALSE   ((DDS_Boolean) 0)

struct RTIClock;

struct NDDS_InternalDefaults {
    /*i @brief	If this field is non-NULL, NDDS will use this clock. */
    struct RTIClock* custom_clock;
};

 extern DDSCDllVariable const struct NDDS_InternalDefaults
        NDDS_INTERNAL_DEFAULTS_PROFILE_DEFAULT;

 extern DDSCDllVariable struct NDDS_InternalDefaults NDDS_g_internalDefaults;



#define DDSC_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(T) \
 struct T; \
 DDSCDllExport void T ## _initialize(struct T* self); \
 DDSCDllExport void T ## _finalize(struct T* self); \
 DDSCDllExport struct T* T ## _copy(struct T* self, const struct T* from)
 
#ifdef __cplusplus
#define DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(T) \
     T() { T ## _initialize(this); }                 \
    ~T() { T ## _finalize(this); }                   \
    struct T& operator=(const struct T& from) {      \
        T ## _copy(this, &from); return *this;       \
    }
#else
#define DDSCPP_VARIABLE_LENGTH_VALUE_TYPE_SUPPORT(T)
#endif 



#ifdef NDEBUG
 #define DDS_DEBUG(code)
 #define dbgprintf
 #define dbgout
#else
 #define DDS_DEBUG(code)   code
 #define dbgprintf         fprintf
 #define dbgout		   stdout
#endif


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* dds_c_common_h */
