/*
 * @(#)dds_c_subscription.h    generated by: makeheader    Mon Dec  3 23:08:27 2007
 *
 *		built from:	subscription.ifc
 */

#ifndef dds_c_subscription_h
#define dds_c_subscription_h



  #ifndef dds_c_sequence_h
     #include "dds_c/dds_c_sequence.h"
  #endif

  #ifndef dds_c_topic_h
     #include "dds_c/dds_c_topic.h"
  #endif

  #ifndef dds_c_dll_h
     #include "dds_c/dds_c_dll.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif

typedef struct DDS_DataReaderImpl DDS_DataReader;

typedef struct DDS_SubscriberImpl DDS_Subscriber;

typedef DDS_Subscriber* DDS_Subscriber_ptr;


DDS_SEQUENCE(DDS_SubscriberSeq, DDS_Subscriber_ptr);

struct DDS_RequestedDeadlineMissedStatus {

    /*e \dref_RequestedDeadlineMissedStatus_total_count
     */                                                     
    DDS_Long total_count;

    /*e \dref_RequestedDeadlineMissedStatus_total_count_change
     */                                                     
    DDS_Long total_count_change;

    /*e \dref_RequestedDeadlineMissedStatus_last_instance_handle
     */                                                     
    DDS_InstanceHandle_t last_instance_handle;
};


#define DDS_RequestedDeadlineMissedStatus_INITIALIZER \
        { 0L, 0L, DDS_HANDLE_NIL_NATIVE }

extern DDSCDllExport DDS_ReturnCode_t DDS_RequestedDeadlineMissedStatus_initialize(
    struct DDS_RequestedDeadlineMissedStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_RequestedDeadlineMissedStatus_copy(
    struct DDS_RequestedDeadlineMissedStatus *self,
    const struct DDS_RequestedDeadlineMissedStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_RequestedDeadlineMissedStatus_finalize(
    struct DDS_RequestedDeadlineMissedStatus *self);

struct DDS_LivelinessChangedStatus {

    /*e \dref_LivelinessChangedStatus_alive_count
     */                                                     
    DDS_Long alive_count;

    /*e \dref_LivelinessChangedStatus_not_alive_count
     */                                                     
    DDS_Long not_alive_count;

    /*e \dref_LivelinessChangedStatus_alive_count_change
     */                                                     
    DDS_Long alive_count_change;

    /*e \dref_LivelinessChangedStatus_not_alive_count_change
     */
    DDS_Long not_alive_count_change;
    
    /*e \dref_LivelinessChangedStatus_last_publication_handle
     */
    DDS_InstanceHandle_t last_publication_handle;
};


#define DDS_LivelinessChangedStatus_INITIALIZER { 0L, 0L, 0L, 0L, \
    DDS_HANDLE_NIL_NATIVE }

extern DDSCDllExport DDS_ReturnCode_t DDS_LivelinessChangedStatus_initialize(
    struct DDS_LivelinessChangedStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_LivelinessChangedStatus_copy(
    struct DDS_LivelinessChangedStatus *self,
    const struct DDS_LivelinessChangedStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_LivelinessChangedStatus_finalize(
    struct DDS_LivelinessChangedStatus *self);

struct DDS_RequestedIncompatibleQosStatus {
    /*e \dref_RequestedIncompatibleQosStatus_total_count
	 */
    DDS_Long total_count;

    /*e \dref_RequestedIncompatibleQosStatus_total_count_change
     */                                                     
    DDS_Long total_count_change;

    /*e \dref_RequestedIncompatibleQosStatus_last_policy_id
     */                                                     
    DDS_QosPolicyId_t last_policy_id;

    /*e \dref_RequestedIncompatibleQosStatus_policies
     */                                                     
    struct DDS_QosPolicyCountSeq policies;
};


#define DDS_RequestedIncompatibleQosStatus_INITIALIZER \
        { 0L, 0L, DDS_INVALID_QOS_POLICY_ID, DDS_SEQUENCE_INITIALIZER }

extern DDSCDllExport DDS_ReturnCode_t DDS_RequestedIncompatibleQosStatus_initialize(
    struct DDS_RequestedIncompatibleQosStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_RequestedIncompatibleQosStatus_copy(
    struct DDS_RequestedIncompatibleQosStatus *self,
    const struct DDS_RequestedIncompatibleQosStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_RequestedIncompatibleQosStatus_finalize(
    struct DDS_RequestedIncompatibleQosStatus *self);

struct DDS_SampleLostStatus {
    /*e  \dref_SampleLostStatus_total_count
     */                                                     
    DDS_Long total_count;

    /*e  \dref_SampleLostStatus_total_count_change
     */                                                     
    DDS_Long total_count_change;
};


#define DDS_SampleLostStatus_INITIALIZER { 0L, 0L }

extern DDSCDllExport DDS_ReturnCode_t DDS_SampleLostStatus_initialize(
    struct DDS_SampleLostStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_SampleLostStatus_copy(
    struct DDS_SampleLostStatus *self,
    const struct DDS_SampleLostStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_SampleLostStatus_finalize(
    struct DDS_SampleLostStatus *self);

typedef enum {

    /*e \dref_SampleRejectedStatusKind_NOT_REJECTED
     */                                                     
    DDS_NOT_REJECTED,

    /*e \dref_SampleRejectedStatusKind_REJECTED_BY_INSTANCES_LIMIT
     */                                                     
    DDS_REJECTED_BY_INSTANCES_LIMIT,

    /*e \dref_SampleRejectedStatusKind_REJECTED_BY_SAMPLES_LIMIT
     */                                                     
    DDS_REJECTED_BY_SAMPLES_LIMIT,

    /*e \dref_SampleRejectedStatusKind_REJECTED_BY_SAMPLES_PER_INSTANCE_LIMIT
     */                                                     
    DDS_REJECTED_BY_SAMPLES_PER_INSTANCE_LIMIT,

    /*e \dref_SampleRejectedStatusKind_REJECTED_BY_REMOTE_WRITERS_LIMIT
     */
    DDS_REJECTED_BY_REMOTE_WRITERS_LIMIT,
    
    /*e \dref_SampleRejectedStatusKind_REJECTED_BY_REMOTE_WRITERS_PER_INSTANCE_LIMIT
     */
    DDS_REJECTED_BY_REMOTE_WRITERS_PER_INSTANCE_LIMIT,

    /*e \dref_SampleRejectedStatusKind_REJECTED_BY_SAMPLES_PER_REMOTE_WRITER_LIMIT
     */
    DDS_REJECTED_BY_SAMPLES_PER_REMOTE_WRITER_LIMIT

} DDS_SampleRejectedStatusKind;


#define DDS_REJECTED_BY_INSTANCE_LIMIT DDS_REJECTED_BY_INSTANCES_LIMIT

struct DDS_SampleRejectedStatus {

    /*e \dref_SampleRejectedStatus_total_count
     */                                                     
    DDS_Long total_count;

    /*e \dref_SampleRejectedStatus_total_count_change
     */                                                     
    DDS_Long total_count_change;

    /*e \dref_SampleRejectedStatus_last_reason
     */                                                     
    DDS_SampleRejectedStatusKind last_reason;

    /*e \dref_SampleRejectedStatus_last_instance_handle
     */
    DDS_InstanceHandle_t last_instance_handle;
};


#define DDS_SampleRejectedStatus_INITIALIZER \
        { 0L, 0L, DDS_NOT_REJECTED,DDS_HANDLE_NIL_NATIVE }

extern DDSCDllExport DDS_ReturnCode_t DDS_SampleRejectedStatus_initialize(
    struct DDS_SampleRejectedStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_SampleRejectedStatus_copy(
    struct DDS_SampleRejectedStatus *self,
    const struct DDS_SampleRejectedStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_SampleRejectedStatus_finalize(
    struct DDS_SampleRejectedStatus *self);

struct DDS_SubscriptionMatchedStatus {

    /*e \dref_SubscriptionMatchedStatus_total_count
     */                                                     
    DDS_Long total_count;

    /*e \dref_SubscriptionMatchedStatus_total_count_change
     */                                                     
    DDS_Long total_count_change;

    /*e \dref_SubscriptionMatchedStatus_current_count
     */
    DDS_Long current_count;

    /*e \dref_SubscriptionMatchedStatus_current_count_change
     */
    DDS_Long current_count_change;

    /*e \dref_SubscriptionMatchedStatus_last_publication_handle
     */                                                     
    DDS_InstanceHandle_t last_publication_handle;
};


#define DDS_SubscriptionMatchedStatus_INITIALIZER \
        { 0L, 0L, 0L, 0L, DDS_HANDLE_NIL_NATIVE}

extern DDSCDllExport DDS_ReturnCode_t DDS_SubscriptionMatchedStatus_initialize(
    struct DDS_SubscriptionMatchedStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_SubscriptionMatchedStatus_copy(
    struct DDS_SubscriptionMatchedStatus *self,
    const struct DDS_SubscriptionMatchedStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_SubscriptionMatchedStatus_finalize(
    struct DDS_SubscriptionMatchedStatus *self);

typedef enum {

    /*e \dref_SampleStateKind_READ_SAMPLE_STATE
     */       
    DDS_READ_SAMPLE_STATE     = 0x0001 << 0,

    /*e \dref_SampleStateKind_NOT_READ_SAMPLE_STATE
     */       
    DDS_NOT_READ_SAMPLE_STATE = 0x0001 << 1

} DDS_SampleStateKind;

typedef DDS_UnsignedLong DDS_SampleStateMask;

 extern DDSCDllVariable const DDS_SampleStateMask DDS_ANY_SAMPLE_STATE;

typedef enum {

    /*e \dref_ViewStateKind_NEW_VIEW_STATE
     */       
    DDS_NEW_VIEW_STATE     = 0x0001 << 0,

    /*e \dref_ViewStateKind_NOT_NEW_VIEW_STATE
     */       
    DDS_NOT_NEW_VIEW_STATE = 0x0001 << 1

} DDS_ViewStateKind;

typedef DDS_UnsignedLong DDS_ViewStateMask;

 extern DDSCDllVariable const DDS_ViewStateMask DDS_ANY_VIEW_STATE;

typedef enum {

    /*e \dref_InstanceStateKind_ALIVE_INSTANCE_STATE
     */       
    DDS_ALIVE_INSTANCE_STATE                = 0x0001 << 0,

    /*e \dref_InstanceStateKind_NOT_ALIVE_DISPOSED_INSTANCE_STATE
     */       
    DDS_NOT_ALIVE_DISPOSED_INSTANCE_STATE   = 0x0001 << 1,
    
    /*e \dref_InstanceStateKind_NOT_ALIVE_NO_WRITERS_INSTANCE_STATE
     */       
    DDS_NOT_ALIVE_NO_WRITERS_INSTANCE_STATE = 0x0001 << 2

} DDS_InstanceStateKind;

typedef DDS_UnsignedLong DDS_InstanceStateMask;

 extern DDSCDllVariable const DDS_InstanceStateMask
DDS_ANY_INSTANCE_STATE;

 extern DDSCDllVariable const DDS_InstanceStateMask
DDS_NOT_ALIVE_INSTANCE_STATE;

struct DDS_SampleInfo {

    /*e \dref_SampleInfo_sample_state
    */                                                     
    DDS_SampleStateKind  sample_state;

    /*e \dref_SampleInfo_view_state
    */                                                     
    DDS_ViewStateKind view_state;

    /*e \dref_SampleInfo_instance_state
    */                                                     
    DDS_InstanceStateKind instance_state;

    /*e \dref_SampleInfo_source_timestamp
    */                                                     
    struct DDS_Time_t    source_timestamp;

    /*e \dref_SampleInfo_instance_handle
    */                                                     
    DDS_InstanceHandle_t instance_handle;

    /*e \dref_SampleInfo_publication_handle
    */                                                     
    DDS_InstanceHandle_t publication_handle;

    /*e \dref_SampleInfo_disposed_generation_count
    */                                                     
    DDS_Long disposed_generation_count;

    /*e \dref_SampleInfo_no_writers_generation_count
    */                                                     
    DDS_Long no_writers_generation_count;

    /*e \dref_SampleInfo_sample_rank
    */                                                     
    DDS_Long sample_rank;

    /*e \dref_SampleInfo_generation_rank
    */                                                     
    DDS_Long generation_rank;

    /*e \dref_SampleInfo_absolute_generation_rank
    */                                                     
    DDS_Long absolute_generation_rank;

    /*e \dref_SampleInfo_valid_data
    */                                                     
    DDS_Boolean valid_data;

    /*e \dref_SampleInfo_reception_timestamp
    */ 
    struct DDS_Time_t reception_timestamp;

    /*e \dref_SampleInfo_publication_sequence_number 
    */
    struct DDS_SequenceNumber_t publication_sequence_number;
    
    /*e \dref_SampleInfo_reception_sequence_number 
    */
    struct DDS_SequenceNumber_t reception_sequence_number;

    /*i \dref_SampleInfo_publication_virtual_guid */
    struct DDS_GUID_t publication_virtual_guid;

    /*i \dref_SampleInfo_ publication_virtual_sequence_number
    */
    struct DDS_SequenceNumber_t publication_virtual_sequence_number;
};


DDS_SEQUENCE(DDS_SampleInfoSeq, struct DDS_SampleInfo);

typedef struct DDS_ReadConditionImpl DDS_ReadCondition;


#define DDS_ReadCondition_as_condition(readConditionPtr) \
            ((DDS_Condition*) readConditionPtr)

extern DDSCDllExport DDS_SampleStateMask
DDS_ReadCondition_get_sample_state_mask(
    DDS_ReadCondition* self);

extern DDSCDllExport DDS_ViewStateMask
    DDS_ReadCondition_get_view_state_mask(
    DDS_ReadCondition* self);

extern DDSCDllExport DDS_InstanceStateMask
    DDS_ReadCondition_get_instance_state_mask(
    DDS_ReadCondition* self);

extern DDSCDllExport DDS_DataReader*
DDS_ReadCondition_get_datareader(
    DDS_ReadCondition* self);

typedef struct DDS_QueryConditionImpl DDS_QueryCondition;


#define DDS_QueryCondition_as_readcondition(queryConditionPtr) \
            ((DDS_ReadCondition*) queryConditionPtr)

extern DDSCDllExport const char* DDS_QueryCondition_get_query_expression(
    DDS_QueryCondition* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_QueryCondition_get_query_parameters(
    DDS_QueryCondition* self,
    struct DDS_StringSeq* query_parameters);

extern DDSCDllExport DDS_ReturnCode_t DDS_QueryCondition_set_query_parameters(
    DDS_QueryCondition* self,
    const struct DDS_StringSeq* query_parameters);

struct DDS_DataReaderQos {
    /*e \dref_DataReaderQos_durability
    */                                                     
    struct DDS_DurabilityQosPolicy          durability;

    /*e \dref_DataReaderQos_deadline
    */                                                     
    struct DDS_DeadlineQosPolicy            deadline;

    /*e \dref_DataReaderQos_latency_budget
    */                                                     
    struct DDS_LatencyBudgetQosPolicy       latency_budget;

    /*e \dref_DataReaderQos_liveliness
    */                                                     
    struct DDS_LivelinessQosPolicy          liveliness;

    /*e \dref_DataReaderQos_reliability
    */                                                     
    struct DDS_ReliabilityQosPolicy         reliability;

    /*e \dref_DataReaderQos_destination_order
    */                                                     
    struct DDS_DestinationOrderQosPolicy    destination_order;

    /*e \dref_DataReaderQos_history
    */                                                     
    struct DDS_HistoryQosPolicy             history;

    /*e \dref_DataReaderQos_resource_limits
    */                                                     
    struct DDS_ResourceLimitsQosPolicy      resource_limits;

    /*e \dref_DataReaderQos_user_data 
    */                                                     
    struct DDS_UserDataQosPolicy            user_data;

    /*e \dref_DataReaderQos_ownership 
    */                                                     
    struct DDS_OwnershipQosPolicy           ownership;

    /*e \dref_DataReaderQos_time_based_filter
    */                                                     
    struct DDS_TimeBasedFilterQosPolicy     time_based_filter;

    /*e \dref_DataReaderQos_reader_data_lifecycle
     */
    struct DDS_ReaderDataLifecycleQosPolicy reader_data_lifecycle;
    
    /* --- Extensions: ---------------------------------------------------- */
    /*e \dref_DataReaderQos_reader_resource_limits
     */
    struct DDS_DataReaderResourceLimitsQosPolicy reader_resource_limits;

    /*e \dref_DataReaderQos_protocol
    */                                                     
    struct DDS_DataReaderProtocolQosPolicy     protocol;

    /*e \dref_DataReaderQos_transport_selection
     */    
    struct DDS_TransportSelectionQosPolicy transport_selection;
    
    /*e \dref_DataReaderQos_unicast
     */    
    struct DDS_TransportUnicastQosPolicy unicast;    
    
    /*e \dref_DataReaderQos_multicast
     */    
    struct DDS_TransportMulticastQosPolicy multicast;

   /*e \dref_DataReaderQos_type_support
    */
    struct DDS_TypeSupportQosPolicy type_support;

    /*e \dref_DataReaderQos_property
     */
    struct DDS_PropertyQosPolicy property;

    /*i \dref_DataReaderQos_service */
    struct DDS_ServiceQosPolicy service;
};

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReaderQos_initialize(
    struct DDS_DataReaderQos* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReaderQos_copy(
    struct DDS_DataReaderQos *self,
    const struct DDS_DataReaderQos *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReaderQos_finalize(
    struct DDS_DataReaderQos *self);


#define DDS_DataReaderQos_INITIALIZER            {        \
    DDS_DURABILITY_QOS_POLICY_DEFAULT,                    \
    DDS_DEADLINE_QOS_POLICY_DEFAULT,                      \
    DDS_LATENCY_BUDGET_QOS_POLICY_DEFAULT,                \
    DDS_LIVELINESS_QOS_POLICY_DEFAULT,                    \
    DDS_RELIABILITY_QOS_POLICY_DEFAULT,                   \
    DDS_DESTINATION_ORDER_QOS_POLICY_DEFAULT,             \
    DDS_HISTORY_QOS_POLICY_DEFAULT,                       \
    DDS_RESOURCE_LIMITS_QOS_POLICY_DEFAULT,               \
    DDS_USER_DATA_QOS_POLICY_DEFAULT,                     \
    DDS_OWNERSHIP_QOS_POLICY_DEFAULT,                     \
    DDS_TIME_BASED_FILTER_QOS_POLICY_DEFAULT,             \
    DDS_READER_DATA_LIFECYCLE_QOS_POLICY_DEFAULT,         \
    DDS_DATA_READER_RESOURCE_LIMITS_QOS_POLICY_DEFAULT,   \
    DDS_DATA_READER_PROTOCOL_QOS_POLICY_DEFAULT,          \
    DDS_TRANSPORT_SELECTION_QOS_POLICY_DEFAULT,           \
    DDS_TRANSPORT_UNICAST_QOS_POLICY_DEFAULT,             \
    DDS_TRANSPORT_MULTICAST_QOS_POLICY_DEFAULT,           \
    DDS_TYPESUPPORT_QOS_POLICY_DEFAULT,                   \
    DDS_PROPERTY_QOS_POLICY_DEFAULT,                      \
    DDS_SERVICE_QOS_POLICY_DEFAULT                        \
}

struct DDS_SubscriberQos {

    /*e \dref_SubscriberQos_presentation
    */                                                     
    struct DDS_PresentationQosPolicy    presentation;

    /*e \dref_SubscriberQos_partition
    */                                                     
    struct DDS_PartitionQosPolicy       partition;

    /*e \dref_SubscriberQos_group_data
    */                                                     
    struct DDS_GroupDataQosPolicy       group_data;

    /*e \dref_SubscriberQos_entity_factory
     */
    struct DDS_EntityFactoryQosPolicy  entity_factory;

    /* --- Extensions: ---------------------------------------------------- */

    /*e \dref_SubscriberQos_exclusive_area
    */
    struct DDS_ExclusiveAreaQosPolicy exclusive_area;
};

extern DDSCDllExport DDS_ReturnCode_t DDS_SubscriberQos_initialize(
    struct DDS_SubscriberQos* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_SubscriberQos_copy(
    struct DDS_SubscriberQos *self,
    const struct DDS_SubscriberQos *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_SubscriberQos_finalize(
    struct DDS_SubscriberQos *self);


#define DDS_SubscriberQos_INITIALIZER   { \
    DDS_PRESENTATION_QOS_POLICY_DEFAULT,    \
    DDS_PARTITION_QOS_POLICY_DEFAULT,       \
    DDS_GROUP_DATA_QOS_POLICY_DEFAULT,      \
    DDS_ENTITY_FACTORY_QOS_POLICY_DEFAULT,  \
    DDS_EXCLUSIVE_AREA_QOS_POLICY_DEFAULT \
}

typedef DDS_DataReader* DDS_DataReader_ptr;


DDS_SEQUENCE(DDS_DataReaderSeq, DDS_DataReader_ptr);

typedef void (*DDS_DataReaderListener_RequestedDeadlineMissedCallback)(
    void* listener_data,
    DDS_DataReader* reader,
    const struct DDS_RequestedDeadlineMissedStatus* status);

typedef void (*DDS_DataReaderListener_LivelinessChangedCallback)(
    void* listener_data,
    DDS_DataReader* reader,
    const struct DDS_LivelinessChangedStatus* status);

typedef void (*DDS_DataReaderListener_RequestedIncompatibleQosCallback)(
    void* listener_data,
    DDS_DataReader* reader,
    const struct DDS_RequestedIncompatibleQosStatus* status);

typedef void (*DDS_DataReaderListener_SampleRejectedCallback)(
    void* listener_data,
    DDS_DataReader* reader,
    const struct DDS_SampleRejectedStatus* status);

typedef void (*DDS_DataReaderListener_DataAvailableCallback)(
    void* listener_data,
    DDS_DataReader* reader);

typedef void (*DDS_DataReaderListener_SubscriptionMatchedCallback)(
    void* listener_data,
    DDS_DataReader* reader,
    const struct DDS_SubscriptionMatchedStatus* status);

typedef void (*DDS_DataReaderListener_SampleLostCallback)(
    void* listener_data,
    DDS_DataReader* reader, 
    const struct DDS_SampleLostStatus* status);

struct DDS_DataReaderListener {

    /*ce \dref_DataReaderListener_as_listener
     */
    struct DDS_Listener as_listener;
    
    /*ce \dref_DataReaderListener_on_requested_deadline_missed
     */                                                     
    DDS_DataReaderListener_RequestedDeadlineMissedCallback
        on_requested_deadline_missed;

    /*ce \dref_DataReaderListener_on_requested_incompatible_qos
     */                                                     
    DDS_DataReaderListener_RequestedIncompatibleQosCallback
        on_requested_incompatible_qos;

    /*ce \dref_DataReaderListener_on_sample_rejected
     */                                                     
    DDS_DataReaderListener_SampleRejectedCallback on_sample_rejected;

    /*ce \dref_DataReaderListener_on_liveliness_changed
     */                                                     
    DDS_DataReaderListener_LivelinessChangedCallback
        on_liveliness_changed;

    /*ce \dref_DataReaderListener_on_data_available
     */                                                     
    DDS_DataReaderListener_DataAvailableCallback on_data_available;

    /*ce \dref_DataReaderListener_on_subscription_matched
     */                                                     
    DDS_DataReaderListener_SubscriptionMatchedCallback on_subscription_matched;

    /*ce \dref_DataReaderListener_on_sample_lost
     */                                                     
    DDS_DataReaderListener_SampleLostCallback on_sample_lost;

};


#define DDS_DataReaderListener_INITIALIZER  { \
  DDS_Listener_INITIALIZER, \
  (DDS_DataReaderListener_RequestedDeadlineMissedCallback)NULL, \
  (DDS_DataReaderListener_RequestedIncompatibleQosCallback)NULL, \
  (DDS_DataReaderListener_SampleRejectedCallback)NULL, \
  (DDS_DataReaderListener_LivelinessChangedCallback)NULL, \
  (DDS_DataReaderListener_DataAvailableCallback)NULL, \
  (DDS_DataReaderListener_SubscriptionMatchedCallback)NULL, \
  (DDS_DataReaderListener_SampleLostCallback)NULL }

typedef void (*DDS_SubscriberListener_DataOnReadersCallback)(
    void* listener_data, DDS_Subscriber* sub);

struct DDS_SubscriberListener {

    /*ce \dref_SubscriberListener_as_datareaderlistener
     */
    struct DDS_DataReaderListener as_datareaderlistener;

    /*ce \dref_SubscriberListener_on_data_on_readers
     */                                                     
    DDS_SubscriberListener_DataOnReadersCallback on_data_on_readers;
};


#define DDS_SubscriberListener_INITIALIZER  \
    { DDS_DataReaderListener_INITIALIZER, \
      (DDS_SubscriberListener_DataOnReadersCallback)NULL }

 extern DDSCDllVariable const struct DDS_DataReaderQos
DDS_DATAREADER_QOS_DEFAULT;

 extern DDSCDllVariable const struct DDS_DataReaderQos
DDS_DATAREADER_QOS_USE_TOPIC_QOS;


#define DDS_Subscriber_as_entity(subscriberPtr) \
            ((DDS_Entity*) subscriberPtr)

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_get_default_datareader_qos(
    DDS_Subscriber* self,
    struct DDS_DataReaderQos* qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_set_default_datareader_qos(
    DDS_Subscriber* self,
    const struct DDS_DataReaderQos* qos);

extern DDSCDllExport DDS_DataReader* DDS_Subscriber_create_datareader(
    DDS_Subscriber* self,
    DDS_TopicDescription* topic,
    const struct DDS_DataReaderQos* qos,
    const struct DDS_DataReaderListener* listener,
    DDS_StatusMask mask);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_delete_datareader(
    DDS_Subscriber* self, DDS_DataReader* a_datareader);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_delete_contained_entities(
    DDS_Subscriber* self);

extern DDSCDllExport DDS_DataReader* DDS_Subscriber_lookup_datareader(
    DDS_Subscriber* self, const char* topic_name);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_begin_access(
    DDS_Subscriber* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_end_access(
    DDS_Subscriber* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_get_datareaders(
    DDS_Subscriber* self,
    struct DDS_DataReaderSeq* readers,
    DDS_SampleStateMask sample_states, DDS_ViewStateMask view_states,
    DDS_InstanceStateMask instance_states);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_notify_datareaders(
    DDS_Subscriber* self);

extern DDSCDllExport DDS_DomainParticipant* DDS_Subscriber_get_participant(
    DDS_Subscriber* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_copy_from_topic_qos(
    DDS_Subscriber* self, struct DDS_DataReaderQos* datareader_qos,
    const struct DDS_TopicQos* topic_qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_set_qos(
    DDS_Subscriber* self,
    const struct DDS_SubscriberQos* qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_get_qos(
    DDS_Subscriber* self,
    struct DDS_SubscriberQos* qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_set_listener(
    DDS_Subscriber* self,
    const struct DDS_SubscriberListener* l, DDS_StatusMask mask);

extern DDSCDllExport struct DDS_SubscriberListener DDS_Subscriber_get_listener(
    DDS_Subscriber* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_get_listenerX(
    DDS_Subscriber* self, struct DDS_SubscriberListener* listener);

extern DDSCDllExport DDS_ReturnCode_t
DDS_Subscriber_get_builtin_topic_key(const DDS_Subscriber* self,
                                     DDS_BuiltinTopicKey_t *key);

extern DDSCDllExport DDS_ReturnCode_t DDS_Subscriber_call_listenerT(
    DDS_Subscriber* self, DDS_StatusMask mask);

extern DDSCDllExport DDS_DataReader* DDS_Subscriber_lookup_datareader_by_builtin_topic_key(
    DDS_Subscriber* self,
    DDS_BuiltinTopicKey_t *key);


#define DDS_DataReader_as_entity(dataReaderPtr) \
            ((DDS_Entity*) dataReaderPtr)

extern DDSCDllExport DDS_ReadCondition* DDS_DataReader_create_readcondition(
    DDS_DataReader* self, DDS_SampleStateMask sample_states, 
    DDS_ViewStateMask view_states, DDS_InstanceStateMask instance_states);

extern DDSCDllExport DDS_QueryCondition* DDS_DataReader_create_querycondition(
    DDS_DataReader* self, DDS_SampleStateMask sample_states, 
    DDS_ViewStateMask view_states, DDS_InstanceStateMask instance_states,
    const char* query_expression,
    const struct DDS_StringSeq* query_parameters);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_delete_readcondition(
    DDS_DataReader* self, DDS_ReadCondition* condition);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_delete_contained_entities(
    DDS_DataReader* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_wait_for_historical_data(
    DDS_DataReader* self,
    const struct DDS_Duration_t* max_wait);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_set_last_publication_sequence_number(
    DDS_DataReader* self,
    const DDS_InstanceHandle_t * publication_handle,
    int offset_mode,
    const struct DDS_SequenceNumber_t * sequence_number);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_get_matched_publications(
    DDS_DataReader* self, struct DDS_InstanceHandleSeq* publication_handles);

struct DDS_PublicationBuiltinTopicData;

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataReader_get_matched_publication_data(
    DDS_DataReader* self,
    struct DDS_PublicationBuiltinTopicData* publication_data,
    const DDS_InstanceHandle_t* publication_handle);

extern DDSCDllExport DDS_TopicDescription* DDS_DataReader_get_topicdescription(
    DDS_DataReader* self);

extern DDSCDllExport DDS_Subscriber* DDS_DataReader_get_subscriber(
    DDS_DataReader* self);

struct PRESPsReader;

extern DDSCDllExport struct PRESPsReader* DDS_DataReader_get_presentation_readerI(
	    DDS_DataReader* self);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_sample_rejected_status(
    DDS_DataReader* self,
    struct DDS_SampleRejectedStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_liveliness_changed_status(
    DDS_DataReader* self,
    struct DDS_LivelinessChangedStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_requested_deadline_missed_status(
    DDS_DataReader* self,
    struct DDS_RequestedDeadlineMissedStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_requested_incompatible_qos_status(
    DDS_DataReader* self,
    struct DDS_RequestedIncompatibleQosStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_subscription_matched_status(
    DDS_DataReader* self,
    struct DDS_SubscriptionMatchedStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_get_sample_lost_status(
    DDS_DataReader* self,
    struct DDS_SampleLostStatus* status);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataReader_set_sample_rejected_statusT(
    DDS_DataReader* self, const struct DDS_SampleRejectedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataReader_set_liveliness_changed_statusT(
    DDS_DataReader* self, const struct DDS_LivelinessChangedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataReader_set_requested_deadline_missed_statusT(
    DDS_DataReader* self, 
    const struct DDS_RequestedDeadlineMissedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataReader_set_requested_incompatible_qos_statusT(
    DDS_DataReader* self, 
    const struct DDS_RequestedIncompatibleQosStatus* status);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_set_sample_lost_statusT(
    DDS_DataReader* self, const struct DDS_SampleLostStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataReader_set_subscription_matched_statusT(
    DDS_DataReader* self, const struct DDS_SubscriptionMatchedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_set_qos(
    DDS_DataReader* self,
    const struct DDS_DataReaderQos* qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_get_qos(
    DDS_DataReader* self,
    struct DDS_DataReaderQos* qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_set_listener(
    DDS_DataReader* self,
    const struct DDS_DataReaderListener* l, DDS_StatusMask mask);

extern DDSCDllExport struct DDS_DataReaderListener DDS_DataReader_get_listener(
    DDS_DataReader* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_get_listenerX(DDS_DataReader* self,
    struct DDS_DataReaderListener* listener);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataReader_get_builtin_topic_key(const DDS_DataReader* self,
                                     DDS_BuiltinTopicKey_t *key);

extern DDSCDllExport DDS_Boolean
DDS_DataReader_is_keyed(DDS_BuiltinTopicKey_t *key);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_call_listenerT(
    DDS_DataReader* self, DDS_StatusMask mask);

struct DDS_DataReaderLocalReaderStatistics {
    /*i \dref_DataReaderLocalReaderStatistics_queue_level_peak

        The maximum number of samples in this reader's queue over the 
        lifetime of the reader.  Can be reset.
     */
    DDS_UnsignedLong queue_level_peak;

    /*i \dref_DataReaderLocalReaderStatistics_matched_writers_count_peak

        The maximum number of remote writers matched to this reader over 
        the lifetime of the reader.  Can be reset.
     */
    DDS_UnsignedLong matched_writers_count_peak;

    /*i \dref_DataReaderLocalReaderStatistics_new_samples_received_count

        Number of new samples received.
     */
    DDS_UnsignedLong new_samples_received_count;

    /*i \dref_DataReaderLocalReaderStatistics_new_samples_received_bytes

        Total number of bytes of all new samples received.
     */
    DDS_UnsignedLong new_samples_received_bytes;

    /*i \dref_DataReaderLocalReaderStatistics_old_samples_received_count

        Number of old samples received again.
     */
    DDS_UnsignedLong old_samples_received_count;

    /*i \dref_DataReaderLocalReaderStatistics_old_samples_received_bytes

        Total number of bytes of all old samples received again.
     */
    DDS_UnsignedLong old_samples_received_bytes;

    /*i \dref_DataReaderLocalReaderStatistics_samples_filtered_count

        Number of samples filtered by the reader, due to content-filtered-topics 
        or time-based filtering
     */
    DDS_UnsignedLong samples_filtered_count;

    /*i \dref_DataReaderLocalReaderStatistics_heeartbeats_received_count

        Number of heartbeats received.
     */
    DDS_UnsignedLong heartbeats_received_count;

    /*i \dref_DataReaderLocalReaderStatistics_heartbeats_received_bytes

        Total number of bytes of all heartbeats received.
     */
    DDS_UnsignedLong heartbeats_received_bytes;

    /*i \dref_DataReaderLocalReaderStatistics_acks_sent_count

        Number of ACKs sent.
     */
    DDS_UnsignedLong acks_sent_count;

    /*i \dref_DataReaderLocalReaderStatistics_acks_sent_bytes

        Total number of bytes of all ACKs sent.
     */
    DDS_UnsignedLong acks_sent_bytes;

    /*i \dref_DataReaderLocalReaderStatistics_nacks_sent_count

        Number of NACKs sent.
     */
    DDS_UnsignedLong nacks_sent_count;

    /*i \dref_DataReaderLocalReaderStatistics_nacks_sent_bytes

        Total number of bytes of all NACKs sent.
     */
    DDS_UnsignedLong nacks_sent_bytes;

    /*i \dref_DataReaderLocalReaderStatistics_gaps_received_count

        Number of GAPs received.
     */
    DDS_UnsignedLong gaps_received_count;

    /*i \dref_DataReaderLocalReaderStatistics_gaps_received_bytes

        Total number of bytes of all GAPs received
     */
    DDS_UnsignedLong gaps_received_bytes;

    /*i \dref_DataReaderLocalReaderStatistics_samples_rejected_count

        Number of samples received but rejected. Rejection 
        is related to queue resource limits
     */
    DDS_UnsignedLong samples_rejected_count;
};


#define DDS_DataReaderLocalReaderStatistics_INITIALIZER { \
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, \
0L, 0L, 0L, 0L \
}

struct DDS_DataReaderMatchedWriterStatistics {
    /*i \dref_DataReaderMatchedWriterStatistics_new_samples_received_count

        Number of new samples received
     */
    DDS_UnsignedLong new_samples_received_count;

    /*i \dref_DataReaderMatchedWriterStatistics_new_samples_received_bytes

        Total number of bytes of all new samples received
     */
    DDS_UnsignedLong new_samples_received_bytes;

    /*i \dref_DataReaderMatchedWriterStatistics_old_samples_received_count

        Number of old samples received
     */
    DDS_UnsignedLong old_samples_received_count;

    /*i \dref_DataReaderMatchedWriterStatistics_old_samples_received_bytes

        Total number of bytes of all old samples received
     */
    DDS_UnsignedLong old_samples_received_bytes;

    /*i \dref_DataReaderMatchedWriterStatistics_samples_filtered_count

        Number of samples filtered by reader.  Filters include content-
        filtered-topics, time-based filter.
     */
    DDS_UnsignedLong samples_filtered_count;

    /*i \dref_DataReaderMatchedWriterStatistics_heartbeats_received_count

        Number of heartbeats received
     */
    DDS_UnsignedLong heartbeats_received_count;

    /*i \dref_DataReaderMatchedWriterStatistics_heartbeats_received_bytes

        Total number of bytes of all heartbeats received
     */
    DDS_UnsignedLong heartbeats_received_bytes;

    /*i \dref_DataReaderMatchedWriterStatistics_acks_sent_count

        Number of ACKs sent
     */
    DDS_UnsignedLong acks_sent_count;

    /*i \dref_DataReaderMatchedWriterStatistics_acks_sent_bytes

        Total number of bytes of all ACKs sent
     */
    DDS_UnsignedLong acks_sent_bytes;

    /*i \dref_DataReaderMatchedWriterStatistics_nacks_sent_count

        Number of NACKs sent
     */
    DDS_UnsignedLong nacks_sent_count;

    /*i \dref_DataReaderMatchedWriterStatistics_nacks_sent_bytes

        Total number of bytes of all NACKs sent
     */
    DDS_UnsignedLong nacks_sent_bytes;

    /*i \dref_DataReaderMatchedWriterStatistics_gaps_received_count
     */
    DDS_UnsignedLong gaps_received_count;

    /*i \dref_DataReaderMatchedWriterStatistics_gaps_received_bytes
     */
    DDS_UnsignedLong gaps_received_bytes;

    /*i \dref_DataReaderMatchedWriterStatistics_samples_rejected_count
     */
    DDS_UnsignedLong samples_rejected_count;
};


#define DDS_DataReaderMatchedWriterStatistics_INITIALIZER { \
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, \
0L, 0L, 0L \
}

typedef void (*DDS_DataReaderStatisticsListener_MatchedWritersStatisticsRequestCallback)(
            void* listener_data,
            DDS_DataReader *reader, 
            struct DDS_DataReaderMatchedWriterStatistics *stats,
            DDS_InstanceHandle_t *matchedWriter);

struct DDS_DataReaderStatisticsListener {
    /*i \dref_DataReaderStatisticsListener_as_listener
     */
    struct DDS_Listener as_listener;
    /*i \dref_DataReaderStatisticsListener_on_matched_writer_statistics_request
     */
    DDS_DataReaderStatisticsListener_MatchedWritersStatisticsRequestCallback
        on_matched_writer_statistics_request;
};


#define DDS_DataReaderStatisticsListener_INITIALIZER  { \
  DDS_Listener_INITIALIZER, \
  (DDS_DataReaderStatisticsListener_MatchedWritersStatisticsRequestCallback)NULL \
}

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_get_local_reader_statistics(
    DDS_DataReader *self,
    struct DDS_DataReaderLocalReaderStatistics *local_stats);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_get_matched_writers_statistics(
    DDS_DataReader* self,
    struct DDS_DataReaderStatisticsListener *statsListener);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_reset_statistics(
    DDS_DataReader *self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataReader_reset_peak_statistics(
    DDS_DataReader *self);

extern DDSCDllExport  void DDS_DataReader_print_local_reader_statistics(
    DDS_DataReader *reader,
    struct DDS_DataReaderLocalReaderStatistics *stats);

extern DDSCDllExport  void DDS_DataReader_print_matched_writer_statistics(
    DDS_DataReader *reader,
    struct DDS_DataReaderMatchedWriterStatistics *stats);

/* ----------------------------------------------------------------- */


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* dds_c_subscription_h */
