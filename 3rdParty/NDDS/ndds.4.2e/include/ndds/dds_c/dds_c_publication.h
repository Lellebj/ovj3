/*
 * @(#)dds_c_publication.h    generated by: makeheader    Mon Dec  3 23:08:27 2007
 *
 *		built from:	publication.ifc
 */

#ifndef dds_c_publication_h
#define dds_c_publication_h


  #ifndef dds_c_topic_h
    #include "dds_c/dds_c_topic.h"
  #endif
  #ifndef dds_c_dll_h
    #include "dds_c/dds_c_dll.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif

typedef struct DDS_DataWriterImpl DDS_DataWriter;

typedef struct DDS_PublisherImpl DDS_Publisher;

typedef DDS_Publisher* DDS_Publisher_ptr;


DDS_SEQUENCE(DDS_PublisherSeq, DDS_Publisher_ptr);

struct DDS_OfferedDeadlineMissedStatus {
    /*e \dref_OfferedDeadlineMissedStatus_total_count
     */
    DDS_Long total_count;

    /*e \dref_OfferedDeadlineMissedStatus_total_count_change
     */
    DDS_Long total_count_change;

    /*e \dref_OfferedDeadlineMissedStatus_last_instance_handle
     */
    DDS_InstanceHandle_t last_instance_handle;
};

 
#define DDS_OfferedDeadlineMissedStatus_INITIALIZER \
                { 0L, 0L, DDS_HANDLE_NIL_NATIVE }

extern DDSCDllExport DDS_ReturnCode_t DDS_OfferedDeadlineMissedStatus_initialize(
    struct DDS_OfferedDeadlineMissedStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_OfferedDeadlineMissedStatus_copy(
    struct DDS_OfferedDeadlineMissedStatus *self,
    const struct DDS_OfferedDeadlineMissedStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_OfferedDeadlineMissedStatus_finalize(
    struct DDS_OfferedDeadlineMissedStatus *self);

struct DDS_LivelinessLostStatus { 
    /*e \dref_LivelinessLostStatus_total_count
     */
    DDS_Long total_count;

    /*e \dref_LivelinessLostStatus_total_count_change
     */
    DDS_Long total_count_change;
};


#define DDS_LivelinessLostStatus_INITIALIZER { 0L, 0L }

extern DDSCDllExport DDS_ReturnCode_t DDS_LivelinessLostStatus_initialize(
    struct DDS_LivelinessLostStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_LivelinessLostStatus_copy(
    struct DDS_LivelinessLostStatus *self,
    const struct DDS_LivelinessLostStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_LivelinessLostStatus_finalize(
    struct DDS_LivelinessLostStatus *self);

struct DDS_OfferedIncompatibleQosStatus {
    /*e \dref_OfferedIncompatibleQosStatus_total_count
     */
    DDS_Long total_count;

    /*e \dref_OfferedIncompatibleQosStatus_total_count_change
     */
    DDS_Long total_count_change;

    /*e \dref_OfferedIncompatibleQosStatus_last_policy_id
     */
    DDS_QosPolicyId_t last_policy_id;

    /*e \dref_OfferedIncompatibleQosStatus_policies
     */
    struct DDS_QosPolicyCountSeq policies;
};


#define DDS_OfferedIncompatibleQosStatus_INITIALIZER \
        { 0L, 0L,DDS_INVALID_QOS_POLICY_ID, DDS_SEQUENCE_INITIALIZER }

extern DDSCDllExport DDS_ReturnCode_t DDS_OfferedIncompatibleQosStatus_initialize(
    struct DDS_OfferedIncompatibleQosStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_OfferedIncompatibleQosStatus_copy(
    struct DDS_OfferedIncompatibleQosStatus *self,
    const struct DDS_OfferedIncompatibleQosStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_OfferedIncompatibleQosStatus_finalize(
    struct DDS_OfferedIncompatibleQosStatus *self);

struct DDS_PublicationMatchedStatus {
    /*e \dref_PublicationMatchedStatus_total_count
     */
    DDS_Long total_count;

    /*e \dref_PublicationMatchedStatus_total_count_change
     */
    DDS_Long total_count_change;

    /*e \dref_PublicationMatchedStatus_current_count
     */
    DDS_Long current_count;

    /*e \dref_PublicationMatchedStatus_current_count_change
     */
    DDS_Long current_count_change;

    /*e \dref_PublicationMatchedStatus_last_subscription_handle
     */
    DDS_InstanceHandle_t last_subscription_handle;
};


#define DDS_PublicationMatchedStatus_INITIALIZER \
        { 0L, 0L, 0L, 0L, DDS_HANDLE_NIL_NATIVE }

extern DDSCDllExport DDS_ReturnCode_t DDS_PublicationMatchedStatus_initialize(
    struct DDS_PublicationMatchedStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_PublicationMatchedStatus_copy(
    struct DDS_PublicationMatchedStatus *self,
    const struct DDS_PublicationMatchedStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_PublicationMatchedStatus_finalize(
    struct DDS_PublicationMatchedStatus *self);

struct DDS_ReliableWriterCacheEventCount {
    /*e \dref_ReliableWriterCacheEventCount_total_count
     */
    DDS_Long total_count;

    /*e \dref_ReliableWriterCacheEventCount_total_count_change
     */
    DDS_Long total_count_change;
};


#define DDS_ReliableWriterCacheEventCount_INITIALIZER        { 0, 0 }

struct DDS_ReliableWriterCacheChangedStatus {
    /*e \dref_ReliableWriterCacheChangedStatus_empty_reliable_writer_cache
     */
    struct DDS_ReliableWriterCacheEventCount empty_reliable_writer_cache;

    /*e \dref_ReliableWriterCacheChangedStatus_full_reliable_writer_cache
     */
    struct DDS_ReliableWriterCacheEventCount full_reliable_writer_cache;

    /*e \dref_ReliableWriterCacheChangedStatus_low_watermark_reliable_writer_cache
     */
    struct DDS_ReliableWriterCacheEventCount
    low_watermark_reliable_writer_cache;

    /*e \dref_ReliableWriterCacheChangedStatus_high_watermark_reliable_writer_cache
     */
    struct DDS_ReliableWriterCacheEventCount
    high_watermark_reliable_writer_cache;

    /*e \dref_ReliableWriterCacheChangedStatus_unacknowledged_sample_count
     */
    DDS_Long unacknowledged_sample_count;
};


#define DDS_ReliableWriterCacheChangedStatus_INITIALIZER \
        { DDS_ReliableWriterCacheEventCount_INITIALIZER,   \
          DDS_ReliableWriterCacheEventCount_INITIALIZER,   \
          DDS_ReliableWriterCacheEventCount_INITIALIZER,   \
          DDS_ReliableWriterCacheEventCount_INITIALIZER,   \
          0L }

extern DDSCDllExport DDS_ReturnCode_t DDS_ReliableWriterCacheChangedStatus_initialize(
    struct DDS_ReliableWriterCacheChangedStatus* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_ReliableWriterCacheChangedStatus_copy(
    struct DDS_ReliableWriterCacheChangedStatus *self,
    const struct DDS_ReliableWriterCacheChangedStatus *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_ReliableWriterCacheChangedStatus_finalize(
    struct DDS_ReliableWriterCacheChangedStatus *self);

struct DDS_ReliableReaderActivityChangedStatus {
    /*e \dref_ReliableReaderActivityChangedStatus_active_count
     */                                                     
    DDS_Long active_count;

    /*e \dref_ReliableReaderActivityChangedStatus_inactive_count
     */                                                     
    DDS_Long inactive_count;

    /*e \dref_ReliableReaderActivityChangedStatus_active_count_change
     */                                                     
    DDS_Long active_count_change;

    /*e \dref_ReliableReaderActivityChangedStatus_inactive_count_change
     */                                                     
    DDS_Long inactive_count_change;
    
    /*e \dref_ReliableReaderActivityChangedStatus_last_instance_handle
     */                                                     
    DDS_InstanceHandle_t last_instance_handle;
};


#define DDS_ReliableReaderActivityChangedStatus_INITIALIZER \
        {0, 0, 0, 0,DDS_HANDLE_NIL_NATIVE}

extern DDSCDllExport 
DDS_ReturnCode_t DDS_ReliableReaderActivityChangedStatus_initialize(
    struct DDS_ReliableReaderActivityChangedStatus* self);

extern DDSCDllExport 
DDS_ReturnCode_t DDS_ReliableReaderActivityChangedStatus_copy(
    struct DDS_ReliableReaderActivityChangedStatus *self,
    const struct DDS_ReliableReaderActivityChangedStatus *source);

extern DDSCDllExport 
DDS_ReturnCode_t DDS_ReliableReaderActivityChangedStatus_finalize(
    struct DDS_ReliableReaderActivityChangedStatus *self);

struct DDS_DataWriterQos {
    /*e \dref_DataWriterQos_durability
     */
    struct DDS_DurabilityQosPolicy          durability;

    /*e \dref_DataWriterQos_durability_service
     */
    struct DDS_DurabilityServiceQosPolicy   durability_service;

    /*e \dref_DataWriterQos_deadline
     */
    struct DDS_DeadlineQosPolicy            deadline;

    /*e \dref_DataWriterQos_latency_budget
     */
    struct DDS_LatencyBudgetQosPolicy       latency_budget;

    /*e \dref_DataWriterQos_liveliness
     */
    struct DDS_LivelinessQosPolicy          liveliness;

    /*e \dref_DataWriterQos_reliability
     */
    struct DDS_ReliabilityQosPolicy         reliability;

    /*e \dref_DataWriterQos_destination_order
    */                                                     
    struct DDS_DestinationOrderQosPolicy    destination_order;

    /*e \dref_DataWriterQos_history
     */
    struct DDS_HistoryQosPolicy             history;

    /*e \dref_DataWriterQos_resource_limits
     */
    struct DDS_ResourceLimitsQosPolicy      resource_limits;

    /*e \dref_DataWriterQos_transport_priority
     */
    struct DDS_TransportPriorityQosPolicy   transport_priority;

    /*e \dref_DataWriterQos_lifespan
     */
    struct DDS_LifespanQosPolicy            lifespan;

    /*e \dref_DataWriterQos_user_data
     */
    struct DDS_UserDataQosPolicy            user_data;

    /*e \dref_DataWriterQos_ownership
     */
    struct DDS_OwnershipQosPolicy   ownership;

    /*e \dref_DataWriterQos_ownership_strength
     */
    struct DDS_OwnershipStrengthQosPolicy   ownership_strength;

    /*e \dref_DataWriterQos_writer_data_lifecycle
     */
    struct DDS_WriterDataLifecycleQosPolicy writer_data_lifecycle;

    /* --- Extensions: ---------------------------------------------------- */

    /*e \dref_DataWriterQos_protocol
     */
    struct DDS_DataWriterResourceLimitsQosPolicy writer_resource_limits;

    /*e \dref_DataWriterQos_protocol
     */
    struct DDS_DataWriterProtocolQosPolicy protocol;
    
    /*e \dref_DataWriterQos_transport_selection
     */    
    struct DDS_TransportSelectionQosPolicy transport_selection;
    
    /*e \dref_DataWriterQos_unicast
     */    
    struct DDS_TransportUnicastQosPolicy unicast;

    /*e \dref_DataWriterQos_type_support
     */
    struct DDS_TypeSupportQosPolicy type_support;

    /*e \dref_DataWriterQos_publish_mode
     */
    struct DDS_PublishModeQosPolicy publish_mode;

    /*e \dref_DataWriterQos_property
     */
    struct DDS_PropertyQosPolicy property;

    /*i \dref_DataWriterQos_service */
    struct DDS_ServiceQosPolicy service;
};

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriterQos_initialize(
    struct DDS_DataWriterQos* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriterQos_copy(
    struct DDS_DataWriterQos *self,
    const struct DDS_DataWriterQos *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriterQos_finalize(
    struct DDS_DataWriterQos *self);


#define DDS_DataWriterQos_INITIALIZER   {        \
    DDS_DURABILITY_QOS_POLICY_DEFAULT,                    \
    DDS_DURABILITY_SERVICE_QOS_POLICY_DEFAULT,            \
    DDS_DEADLINE_QOS_POLICY_DEFAULT,                      \
    DDS_LATENCY_BUDGET_QOS_POLICY_DEFAULT,                \
    DDS_LIVELINESS_QOS_POLICY_DEFAULT,                    \
    { DDS_RELIABLE_RELIABILITY_QOS, {0L, 0UL} },          \
    DDS_DESTINATION_ORDER_QOS_POLICY_DEFAULT,             \
    DDS_HISTORY_QOS_POLICY_DEFAULT,                       \
    DDS_RESOURCE_LIMITS_QOS_POLICY_DEFAULT,               \
    DDS_TRANSPORT_PRIORITY_QOS_POLICY_DEFAULT,            \
    DDS_LIFESPAN_QOS_POLICY_DEFAULT,                      \
    DDS_USER_DATA_QOS_POLICY_DEFAULT,                     \
    DDS_OWNERSHIP_QOS_POLICY_DEFAULT,                     \
    DDS_OWNERSHIP_STRENGTH_QOS_POLICY_DEFAULT,            \
    DDS_WRITER_DATA_LIFECYCLE_QOS_POLICY_DEFAULT,         \
    DDS_DATA_WRITER_RESOURCE_LIMITS_QOS_POLICY_DEFAULT,   \
    DDS_DATA_WRITER_PROTOCOL_QOS_POLICY_DEFAULT,          \
    DDS_TRANSPORT_SELECTION_QOS_POLICY_DEFAULT,           \
    DDS_TRANSPORT_UNICAST_QOS_POLICY_DEFAULT,             \
    DDS_TYPESUPPORT_QOS_POLICY_DEFAULT,                   \
    DDS_PUBLISH_MODE_QOS_POLICY_DEFAULT,                  \
    DDS_PROPERTY_QOS_POLICY_DEFAULT,                      \
    DDS_SERVICE_QOS_POLICY_DEFAULT                        \
}

struct DDS_PublisherQos {

    /*e \dref_PublisherQos_presentation
     */
    struct DDS_PresentationQosPolicy    presentation;

    /*e \dref_PublisherQos_partition
     */
    struct DDS_PartitionQosPolicy       partition;

    /*e \dref_PublisherQos_group_data
     */
    struct DDS_GroupDataQosPolicy       group_data;

    /*e \dref_PublisherQos_entity_factory
     */
    struct DDS_EntityFactoryQosPolicy   entity_factory;

    /* --- Extensions: ---------------------------------------------------- */

    /*e \dref_PublisherQos_asynchronous_publisher
     */
    struct DDS_AsynchronousPublisherQosPolicy asynchronous_publisher;

    /*e \dref_PublisherQos_exclusive_area
     */
    struct DDS_ExclusiveAreaQosPolicy  exclusive_area;
};

extern DDSCDllExport DDS_ReturnCode_t DDS_PublisherQos_initialize(
    struct DDS_PublisherQos* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_PublisherQos_copy(
    struct DDS_PublisherQos *self,
    const struct DDS_PublisherQos *source);

extern DDSCDllExport DDS_ReturnCode_t DDS_PublisherQos_finalize(
    struct DDS_PublisherQos *self);


#define DDS_PublisherQos_INITIALIZER   { \
    DDS_PRESENTATION_QOS_POLICY_DEFAULT,    \
    DDS_PARTITION_QOS_POLICY_DEFAULT,       \
    DDS_GROUP_DATA_QOS_POLICY_DEFAULT,      \
    DDS_ENTITY_FACTORY_QOS_POLICY_DEFAULT,  \
    DDS_ASYNCHRONOUS_PUBLISHER_QOS_POLICY_DEFAULT, \
    DDS_EXCLUSIVE_AREA_QOS_POLICY_DEFAULT \
}

typedef void (*DDS_DataWriterListener_OfferedDeadlineMissedCallback)(
            void* listener_data,
            DDS_DataWriter* writer,
            const struct DDS_OfferedDeadlineMissedStatus* status);

typedef void (*DDS_DataWriterListener_LivelinessLostCallback)(
            void* listener_data,
            DDS_DataWriter* writer,
            const struct DDS_LivelinessLostStatus* status);

typedef void (*DDS_DataWriterListener_OfferedIncompatibleQosCallback)(
            void* listener_data,
            DDS_DataWriter* writer, 
            const struct DDS_OfferedIncompatibleQosStatus* status);

typedef void (*DDS_DataWriterListener_PublicationMatchedCallback)(
            void* listener_data,
            DDS_DataWriter* writer, 
            const struct DDS_PublicationMatchedStatus* status);

typedef void (*DDS_DataWriterListener_ReliableWriterCacheChangedCallback)(
            void* listener_data,
            DDS_DataWriter* writer, 
            const struct DDS_ReliableWriterCacheChangedStatus* status);

typedef void (*DDS_DataWriterListener_ReliableReaderActivityChangedCallback)(
            void* listener_data,
            DDS_DataWriter* writer, 
            const struct DDS_ReliableReaderActivityChangedStatus* status);

struct DDS_DataWriterListener {
    /*ce \dref_DataWriterListener_as_listener
     */
    struct DDS_Listener as_listener;
    
    /*ce \dref_DataWriterListener_on_offered_deadline_missed
     */
    DDS_DataWriterListener_OfferedDeadlineMissedCallback
        on_offered_deadline_missed;
    
    /*ce \dref_DataWriterListener_on_offered_incompatible_qos
     */
    DDS_DataWriterListener_OfferedIncompatibleQosCallback
        on_offered_incompatible_qos;

    /*ce \dref_DataWriterListener_on_liveliness_lost
     */
    DDS_DataWriterListener_LivelinessLostCallback on_liveliness_lost;

    /*ce \dref_DataWriterListener_on_publication_matched
     */
    DDS_DataWriterListener_PublicationMatchedCallback on_publication_matched;
    
    /*ce \dref_DataWriterListener_on_reliable_writer_cache_changed
     */
    DDS_DataWriterListener_ReliableWriterCacheChangedCallback
    on_reliable_writer_cache_changed;
    
    /*ce \dref_DataWriterListener_on_reliable_reader_activity_changed
     */
    DDS_DataWriterListener_ReliableReaderActivityChangedCallback
    on_reliable_reader_activity_changed;

};


#define DDS_DataWriterListener_INITIALIZER  { \
  DDS_Listener_INITIALIZER, \
  (DDS_DataWriterListener_OfferedDeadlineMissedCallback)NULL, \
  (DDS_DataWriterListener_OfferedIncompatibleQosCallback)NULL, \
  (DDS_DataWriterListener_LivelinessLostCallback)NULL, \
  (DDS_DataWriterListener_PublicationMatchedCallback)NULL, \
  (DDS_DataWriterListener_ReliableWriterCacheChangedCallback)NULL, \
  (DDS_DataWriterListener_ReliableReaderActivityChangedCallback)NULL }

struct DDS_PublisherListener {
    /*ce \dref_PublisherListener_as_datawriterlistener
     */
    struct DDS_DataWriterListener as_datawriterlistener;
};


#define DDS_PublisherListener_INITIALIZER   { \
    DDS_DataWriterListener_INITIALIZER }

struct DDS_DataWriterLocalWriterStatistics {
    /*i \dref_DataWriterLocalStatistics_queue_level_peak
     */
    DDS_UnsignedLong queue_level_peak;

    /*i \dref_DataWriterLocalStatistics_matched_reader_count_peak
     */
    DDS_UnsignedLong matched_reader_count_peak;

    /*i \dref_DataWriterLocalStatistics_samples_sent_count
     */
    DDS_UnsignedLong samples_sent_count;

    /*i \dref_DataWriterLocalStatistics_samples_sent_bytes
     */
    DDS_UnsignedLong samples_sent_bytes;

    /*i \dref_DataWriterLocalStatistics_samples_filtered_count
     */
    DDS_UnsignedLong samples_filtered_count;

    /*i \dref_DataWriterLocalStatistics_heartbeats_sent_count
     */
    DDS_UnsignedLong heartbeats_sent_count;

    /*i \dref_DataWriterLocalStatistics_heartbeats_sent_bytes
     */
    DDS_UnsignedLong heartbeats_sent_bytes;

    /*i \dref_DataWriterLocalStatistics_samples_resent_count
     */
    DDS_UnsignedLong samples_resent_count;

    /*i \dref_DataWriterLocalStatistics_samples_resent_bytes
     */
    DDS_UnsignedLong samples_resent_bytes;

    /*i \dref_DataWriterLocalStatistics_acks_received_count
     */
    DDS_UnsignedLong acks_received_count;

    /*i \dref_DataWriterLocalStatistics_acks_received_bytes
     */
    DDS_UnsignedLong acks_received_bytes;

    /*i \dref_DataWriterLocalStatistics_nacks_received_count
     */
    DDS_UnsignedLong nacks_received_count;

    /*i \dref_DataWriterLocalStatistics_nacks_received_bytes
     */
    DDS_UnsignedLong nacks_received_bytes;

    /*i \dref_DataWriterLocalStatistics_gaps_sent_count
     */
    DDS_UnsignedLong gaps_sent_count;

    /*i \dref_DataWriterLocalStatistics_gaps_sent_bytes
     */
    DDS_UnsignedLong gaps_sent_bytes;

    /*i \dref_DataWriterLocalStatistics_samples_rejected_count
     */
    DDS_UnsignedLong samples_rejected_count;
};


#define DDS_DataWriterLocalWriterStatistics_INITIALIZER { \
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, \
0L, 0L, 0L, 0L, 0L, 0L \
}

struct DDS_DataWriterMatchedReaderStatistics {
    /*i \dref_DataWriterMatchedReaderStatistics_samples_sent_count
     */
    DDS_UnsignedLong samples_sent_count;

    /*i \dref_DataWriterMatchedReaderStatistics_samples_sent_bytes
     */
    DDS_UnsignedLong samples_sent_bytes;

    /*i \dref_DataWriterMatchedReaderStatistics_samples_filtered_count
     */
    DDS_UnsignedLong samples_filtered_count;

    /*i \dref_DataWriterMatchedReaderStatistics_heartbeats_sent_count
     */
    DDS_UnsignedLong heartbeats_sent_count;

    /*i \dref_DataWriterMatchedReaderStatistics_heartbeats_sent_bytes
     */
    DDS_UnsignedLong heartbeats_sent_bytes;

    /*i \dref_DataWriterMatchedReaderStatistics_samples_resent_count
     */
    DDS_UnsignedLong samples_resent_count;

    /*i \dref_DataWriterMatchedReaderStatistics_samples_resent_bytes
     */
    DDS_UnsignedLong samples_resent_bytes;

    /*i \dref_DataWriterMatchedReaderStatistics_acks_received_count
     */
    DDS_UnsignedLong acks_received_count;

    /*i \dref_DataWriterMatchedReaderStatistics_acks_received_bytes
     */
    DDS_UnsignedLong acks_received_bytes;

    /*i \dref_DataWriterMatchedReaderStatistics_nacks_received_count
     */
    DDS_UnsignedLong nacks_received_count;

    /*i \dref_DataWriterMatchedReaderStatistics_nacks_received_bytes
     */
    DDS_UnsignedLong nacks_received_bytes;

    /*i \dref_DataWriterMatchedReaderStatistics_gaps_sent_count
     */
    DDS_UnsignedLong gaps_sent_count;

    /*i \dref_DataWriterMatchedReaderStatistics_gaps_sent_bytes
     */
    DDS_UnsignedLong gaps_sent_bytes;
};


#define DDS_DataWriterMatchedReadersStatistics_INITIALIZER { \
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, \
0L, 0L, 0L \
}

struct DDS_DataWriterMatchedDestinationStatistics {
    /*i \dref_DataWriterMatchedDestinationStatistics_samples_sent_count
     */
    DDS_UnsignedLong samples_sent_count;

    /*i \dref_DataWriterMatchedDestinationStatistics_samples_sent_bytes
     */
    DDS_UnsignedLong samples_sent_bytes;

    /*i \dref_DataWriterMatchedDestinationStatistics_samples_filtered_count
     */
    DDS_UnsignedLong samples_filtered_count;

    /*i \dref_DataWriterMatchedDestinationStatistics_heartbeats_sent_count
     */
    DDS_UnsignedLong heartbeats_sent_count;

    /*i \dref_DataWriterMatchedDestinationStatistics_heartbeats_sent_bytes
     */
    DDS_UnsignedLong heartbeats_sent_bytes;

    /*i \dref_DataWriterMatchedDestinationStatistics_samples_resent_count
     */
    DDS_UnsignedLong samples_resent_count;

    /*i \dref_DataWriterMatchedDestinationStatistics_samples_resent_bytes
     */
    DDS_UnsignedLong samples_resent_bytes;

    /*i \dref_DataWriterMatchedDestinationStatistics_gaps_sent_count
     */
    DDS_UnsignedLong gaps_sent_count;

    /*i \dref_DataWriterMatchedDestinationStatistics_gaps_received_bytes
     */
    DDS_UnsignedLong gaps_sent_bytes;
};


#define DDS_DataWriterMatchedDestinationStatistics_INITIALIZER { \
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L \
}

 extern DDSCDllVariable const struct DDS_DataWriterQos
DDS_DATAWRITER_QOS_DEFAULT;

 extern DDSCDllVariable const struct DDS_DataWriterQos
DDS_DATAWRITER_QOS_USE_TOPIC_QOS;


#define DDS_Publisher_as_entity(publisherPtr) \
            ((DDS_Entity*) publisherPtr)

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_get_default_datawriter_qos(
    DDS_Publisher* self,
    struct DDS_DataWriterQos* qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_set_default_datawriter_qos(
    DDS_Publisher* self,
    const struct DDS_DataWriterQos* qos);

extern DDSCDllExport DDS_DataWriter* DDS_Publisher_create_datawriter(
    DDS_Publisher* self,
    DDS_Topic* topic,
    const struct DDS_DataWriterQos* qos,
    const struct DDS_DataWriterListener* listener,
    DDS_StatusMask mask);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_delete_datawriter(
    DDS_Publisher* self,
    DDS_DataWriter* a_datawriter);

extern DDSCDllExport DDS_DataWriter* DDS_Publisher_lookup_datawriter(
    DDS_Publisher* self,
    const char* topic_name);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_suspend_publications(
    DDS_Publisher* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_resume_publications(
    DDS_Publisher* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_begin_coherent_changes(
    DDS_Publisher* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_end_coherent_changes(
    DDS_Publisher* self);

extern DDSCDllExport DDS_DomainParticipant* DDS_Publisher_get_participant(
    DDS_Publisher* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_delete_contained_entities(
    DDS_Publisher* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_copy_from_topic_qos(
    DDS_Publisher* self,
    struct DDS_DataWriterQos* a_datawriter_qos,
    const struct DDS_TopicQos* a_topic_qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_set_qos(
    DDS_Publisher* self,
    const struct DDS_PublisherQos* qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_get_qos(DDS_Publisher* self,
    struct DDS_PublisherQos* qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_set_listener(
    DDS_Publisher* self,
    const struct DDS_PublisherListener* l, DDS_StatusMask mask);

extern DDSCDllExport struct DDS_PublisherListener DDS_Publisher_get_listener(
    DDS_Publisher* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_get_listenerX(
    DDS_Publisher* self, struct DDS_PublisherListener* listener);

extern DDSCDllExport DDS_ReturnCode_t
DDS_Publisher_get_builtin_topic_key(const DDS_Publisher* self,
             	      DDS_BuiltinTopicKey_t *key);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_wait_for_acknowledgments(
    DDS_Publisher* self, const struct DDS_Duration_t* max_wait);

extern DDSCDllExport DDS_ReturnCode_t DDS_Publisher_wait_for_asynchronous_publishing(
    DDS_Publisher* self, const struct DDS_Duration_t* max_wait);

extern DDSCDllExport DDS_DataWriter* DDS_Publisher_lookup_datawriter_by_builtin_topic_key(
    DDS_Publisher* self,
    DDS_BuiltinTopicKey_t *key);


#define DDS_DataWriter_as_entity(dataWriterPtr) \
            ((DDS_Entity*) dataWriterPtr)

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_assert_liveliness(
    DDS_DataWriter* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_get_matched_subscriptions(
    DDS_DataWriter* self, struct DDS_InstanceHandleSeq* subscription_handles);

struct DDS_SubscriptionBuiltinTopicData;

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataWriter_get_matched_subscription_data(
    DDS_DataWriter* self,
    struct DDS_SubscriptionBuiltinTopicData* subscription_data,
    const DDS_InstanceHandle_t* subscription_handle);

extern DDSCDllExport DDS_Topic* DDS_DataWriter_get_topic(
    DDS_DataWriter* self);

extern DDSCDllExport DDS_Publisher* DDS_DataWriter_get_publisher(
    DDS_DataWriter* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_wait_for_acknowledgments(
    DDS_DataWriter* self, const struct DDS_Duration_t* max_wait);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_wait_for_asynchronous_publishing(
    DDS_DataWriter* self, const struct DDS_Duration_t* max_wait);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_liveliness_lost_status(
    DDS_DataWriter* self,
    struct DDS_LivelinessLostStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_offered_deadline_missed_status(
    DDS_DataWriter* self,
    struct DDS_OfferedDeadlineMissedStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_offered_incompatible_qos_status(
    DDS_DataWriter* self,
    struct DDS_OfferedIncompatibleQosStatus* status);

extern DDSCDllExport
DDS_ReturnCode_t DDS_DataWriter_get_publication_matched_status(
    DDS_DataWriter* self,
    struct DDS_PublicationMatchedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataWriter_get_reliable_writer_cache_changed_status(
    DDS_DataWriter* self,
    struct DDS_ReliableWriterCacheChangedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataWriter_get_reliable_reader_activity_changed_status(
    DDS_DataWriter* self,
    struct DDS_ReliableReaderActivityChangedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataWriter_set_liveliness_lost_statusT(
    DDS_DataWriter* self,
    const struct DDS_LivelinessLostStatus* status);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataWriter_set_offered_deadline_missed_statusT(
    DDS_DataWriter* self,
    const struct DDS_OfferedDeadlineMissedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataWriter_set_offered_incompatible_qos_statusT(
    DDS_DataWriter* self,
    const struct DDS_OfferedIncompatibleQosStatus* status);

extern DDSCDllExport DDS_ReturnCode_t 
DDS_DataWriter_set_publication_matched_statusT(
    DDS_DataWriter* self,
    const struct DDS_PublicationMatchedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataWriter_set_reliable_writer_cache_changed_statusT(
    DDS_DataWriter* self,
    const struct DDS_ReliableWriterCacheChangedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataWriter_set_reliable_reader_activity_changed_statusT(
    DDS_DataWriter* self,
    const struct DDS_ReliableReaderActivityChangedStatus* status);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_set_qos(
    DDS_DataWriter* self,
    const struct DDS_DataWriterQos* qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_get_qos(
    DDS_DataWriter* self,
    struct DDS_DataWriterQos* qos);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_set_listener(
    DDS_DataWriter* self,
    const struct DDS_DataWriterListener* l, DDS_StatusMask mask);

extern DDSCDllExport struct DDS_DataWriterListener DDS_DataWriter_get_listener(
    DDS_DataWriter* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_get_listenerX(
    DDS_DataWriter* self, struct DDS_DataWriterListener* listener);

extern DDSCDllExport DDS_ReturnCode_t
DDS_DataWriter_get_builtin_topic_key(const DDS_DataWriter* self,
                                     DDS_BuiltinTopicKey_t *key);

extern DDSCDllExport DDS_Boolean
DDS_DataWriter_is_keyed(DDS_BuiltinTopicKey_t *key);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_call_listenerT(
    DDS_DataWriter* self, DDS_StatusMask mask);

typedef void (*DDS_DataWriterStatisticsListener_MatchedReadersStatisticsRequestCallback)(
            void* listener_data,
            DDS_DataWriter *writer, 
            struct DDS_DataWriterMatchedReaderStatistics *stats,
            DDS_InstanceHandle_t *matchedReader);

typedef void (*DDS_DataWriterStatisticsListener_MatchedDestinationsStatisticsRequestCallback)(
            void* listener_data,
            DDS_DataWriter *writer, 
            struct DDS_DataWriterMatchedDestinationStatistics *stats,
            struct DDS_Locator_t *destination);

struct DDS_DataWriterStatisticsListener {
    /*i \dref_DataWriterStatisticsListener_as_listener
     */
    struct DDS_Listener as_listener;
    /*i \dref_DataWriterStatisticsListener_on_matched_reader_statistics_request
     */
    DDS_DataWriterStatisticsListener_MatchedReadersStatisticsRequestCallback
        on_matched_reader_statistics_request;
    /*i \dref_DataWriterStatisticsListener_on_matched_destination_statistics_request
    */
    DDS_DataWriterStatisticsListener_MatchedDestinationsStatisticsRequestCallback
        on_matched_destination_statistics_request;
};


#define DDS_DataWriterStatisticsListener_INITIALIZER  { \
  DDS_Listener_INITIALIZER, \
  (DDS_DataWriterStatisticsListener_MatchedReadersStatisticsRequestCallback)NULL, \
  (DDS_DataWriterStatisticsListener_MatchedDestinationsStatisticsRequestCallback)NULL \
}

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_get_local_writer_statistics(
    DDS_DataWriter* self,
    struct DDS_DataWriterLocalWriterStatistics *local_stats);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_get_matched_readers_statistics(
    DDS_DataWriter* self,
    struct DDS_DataWriterStatisticsListener *statsListener);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_get_matched_destinations_statistics(
    DDS_DataWriter* self,
    struct DDS_DataWriterStatisticsListener *statsListener);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_reset_statistics(DDS_DataWriter* self);

extern DDSCDllExport DDS_ReturnCode_t DDS_DataWriter_reset_peak_statistics(DDS_DataWriter* self);

extern DDSCDllExport void DDS_DataWriter_print_local_writer_statistics(
    DDS_DataWriter* self,
    struct DDS_DataWriterLocalWriterStatistics *stats);

extern DDSCDllExport void DDS_DataWriter_print_matched_reader_statistics(
    DDS_DataWriter* self,
    struct DDS_DataWriterMatchedReaderStatistics *stats);

extern DDSCDllExport void DDS_DataWriter_print_matched_destination_statistics(
    DDS_DataWriter* self,
    struct DDS_DataWriterMatchedDestinationStatistics *stats);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* dds_c_publication_h */
