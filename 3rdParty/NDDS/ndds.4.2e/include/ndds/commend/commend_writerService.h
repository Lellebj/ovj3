/*
 * @(#)commend_writerService.h    generated by: makeheader    Mon Dec  3 23:08:09 2007
 *
 *		built from:	writerService.ifc
 */

#ifndef commend_writerService_h
#define commend_writerService_h


  #ifndef reda_table_h
    #include "reda/reda_table.h"
  #endif
  #ifndef reda_weakReference_h
    #include "reda/reda_weakReference.h"
  #endif
  #ifndef osapi_ntptime_h
    #include "osapi/osapi_ntptime.h"
  #endif
  #ifndef event_jobDispatcher_h
    #include "event/event_jobDispatcher.h"
  #endif
  #ifndef mig_rtps_h
    #include "mig/mig_rtps.h"
  #endif
  #ifndef mig_generator_h
    #include "mig/mig_generator.h"
  #endif
  #ifndef commend_dll_h
    #include "commend/commend_dll.h"
  #endif
  #ifndef commend_common_h
    #include "commend/commend_common.h"
  #endif
  #ifndef commend_writerStatistics_h
    #include "commend/commend_writerStatistics.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif

struct COMMENDWriterService;

struct COMMENDWriterServiceWriterSampleListener;

struct COMMENDWriterServiceWriterActivityListener;

struct COMMENDWriterServiceWriterStatisticsListener;

struct COMMENDFilterStatus;


#define COMMEND_WRITER_SERVICE_WRITER_LISTENER_STORAGE_LENGTH (4)


#define COMMEND_WRITER_LOCATOR_MAX_REMOTE_READER              (4)


#define COMMEND_WRITER_MAX_RTPS_OVERHEAD                      (512)

struct COMMENDWriterServiceWriterListenerStorage {
    void *field[COMMEND_WRITER_SERVICE_WRITER_LISTENER_STORAGE_LENGTH];
};

typedef RTIBool
(*COMMENDWriterServiceWriterSampleListenerOnDataRequestCallback)(
    const struct COMMENDWriterServiceWriterSampleListener *listener,
    struct MIGGeneratorSample **sample, RTIBool *dataValid,
    struct REDASequenceNumber *firstRelevantSn,
    struct REDASequenceNumber *nextRelevantSn,
    const struct COMMENDWriterServiceWriterListenerStorage *storage,
    const struct REDASequenceNumber *requestSn,
    int filterIndex,
    struct COMMENDFilterStatus *filterStatus,
    struct REDAWorker *worker);

typedef void
(*COMMENDWriterServiceWriterSampleListenerOnDataLoanFinishCallback)(
    const struct COMMENDWriterServiceWriterSampleListener *listener,
    struct MIGGeneratorSample *sample,
    const struct COMMENDWriterServiceWriterListenerStorage *storage,
    struct REDAWorker *worker);

typedef RTIBool
(*COMMENDWriterServiceWriterActivityListenerOnRemoteReaderInactiveCallback)(
    const struct COMMENDWriterServiceWriterActivityListener *listener,
    const struct COMMENDWriterServiceWriterListenerStorage *storage,
    struct REDAWorker *worker);

typedef RTIBool
(*COMMENDWriterServiceWriterActivityListenerOnRemoteReaderActiveCallback)(
    const struct COMMENDWriterServiceWriterActivityListener *listener,
    const struct COMMENDWriterServiceWriterListenerStorage *storage,
    struct REDAWorker *worker);

typedef RTIBool
(*COMMENDWriterServiceWriterSampleListenerOnFirstUnackedSnChangeCallback)(
    const struct COMMENDWriterServiceWriterSampleListener *listener,
    const struct COMMENDWriterServiceWriterListenerStorage *storage,
    const struct REDASequenceNumber *firstUnackedSn,
    struct REDAWorker *worker);

typedef RTIBool
(*COMMENDWriterServiceWriterSampleListenerOnBeAsynchPubCompletedCallback)(
    const struct COMMENDWriterServiceWriterSampleListener *listener,
    const struct COMMENDWriterServiceWriterListenerStorage *storage,
    const struct REDASequenceNumber *completedSn, RTIBool includingPrevious,
    struct REDAWorker *worker);

typedef RTIBool
(*COMMENDWriterServiceWriterActivityListenerOnStateRequestCallback)(
    const struct COMMENDWriterServiceWriterActivityListener *listener,
    struct RTINtpTime *nextResponseTime, struct RTINtpTime *snooze,
    const struct RTINtpTime *now,
    const struct COMMENDWriterServiceWriterListenerStorage *storage,
    struct REDAWorker *worker);

struct COMMENDWriterServiceWriterSampleListener {
    COMMENDWriterServiceWriterSampleListenerOnDataRequestCallback
        onDataRequest;
    COMMENDWriterServiceWriterSampleListenerOnDataLoanFinishCallback
        onDataLoanFinish;
    COMMENDWriterServiceWriterSampleListenerOnFirstUnackedSnChangeCallback
        onFirstUnackedSnChange;
    COMMENDWriterServiceWriterSampleListenerOnBeAsynchPubCompletedCallback
        onBeAsynchPubCompleted;
};

struct COMMENDWriterServiceWriterActivityListener {
    COMMENDWriterServiceWriterActivityListenerOnRemoteReaderInactiveCallback
        onRemoteReaderInactive;
    COMMENDWriterServiceWriterActivityListenerOnRemoteReaderActiveCallback
        onRemoteReaderActive;
    COMMENDWriterServiceWriterActivityListenerOnStateRequestCallback
        onStateRequest;
};

typedef RTIBool
(*COMMENDWriterServiceWriterStatisticsListenerOnMatchedReadersStatisticsRequestCallback)(
    const struct COMMENDWriterServiceWriterStatisticsListener *listener,
    const struct REDAWeakReference *writer,
    struct COMMENDWriterServiceMatchedReaderStatistics *matchedStats,
    const struct MIGRtpsGuid *matchedReader,
    struct REDAWorker *worker);

typedef RTIBool
(*COMMENDWriterServiceWriterStatisticsListenerOnMatchedDestinationsStatisticsRequestCallback)(
    const struct COMMENDWriterServiceWriterStatisticsListener *listener,
    const struct REDAWeakReference *writer,
    struct COMMENDWriterServiceMatchedDestinationStatistics *matchedStats,
    const struct RTINetioLocator *matchedLocator,
    struct REDAWorker *worker);

struct COMMENDWriterServiceWriterStatisticsListener {
    /* mirrors DDS_C as_listener struct, but exposed as ptr */
    void *listener_data;

    COMMENDWriterServiceWriterStatisticsListenerOnMatchedReadersStatisticsRequestCallback
        onMatchedReadersStatisticsRequest;

    COMMENDWriterServiceWriterStatisticsListenerOnMatchedDestinationsStatisticsRequestCallback
        onMatchedDestinationsStatisticsRequest;
};

struct COMMENDFilterStatus {
    /*e Filter index status: 0=passed 1=nopass */
    int status;
    /*e Filter index state: 1=invalid, 0=valid */
    int state;
};


#define COMMEND_FILTER_STATUS_NEW           {0,0}
#define COMMEND_FILTER_STATUS_NO_FILTER_NEW {0,0}
#define COMMEND_FILTER_INDEX_MAX            32
#define COMMEND_FILTER_INDEX_INVALID        0x7fffffff

#define COMMENDFilterStatus_clear(__me) \
	{(__me)->status = 0; (__me)->state = 0;}

#define COMMENDFilterStatus_dropSample(__me,__bitnum) \
	(__me)->status |= (1<<(__bitnum))

#define COMMENDFilterStatus_passSample(__me,__bitnum) \
	(__me)->status &= ~(1<<(__bitnum))

#define COMMENDFilterStatus_invalidateIndex(__me,__bitnum) \
	(__me)->state |= (1<<(__bitnum))

#define COMMENDFilterStatus_validateIndex(__me,__bitnum) \
	(__me)->state &= ~(1<<(__bitnum))

#define COMMENDFilterStatus_samplesAreDropped(__me) \
	((__me)->status != 0)

#define COMMENDFilterStatus_allIndicesAreInvalid(__me) \
	((__me)->state == 0xffffffff)

#define COMMENDFilterStatus_allIndicesAreValid(__me) \
	((__me)->state == 0)

#define COMMENDFilterStatus_sampleIsDropped(__me,__index) \
	((__me)->status & (1<<(__index)))

#define COMMENDFilterStatus_indexIsValid(__me,__index) \
	(((__index)>=0) && ((__index)<COMMEND_FILTER_INDEX_MAX) && !((__me)->state & (1<<(__index))))

#define COMMENDFilterStatus_indexInRange(__index) \
	(((__index)>=0) && ((__index)<COMMEND_FILTER_INDEX_MAX))


struct COMMENDWriterServiceProperty {
    /* local writer table property */
    struct REDATableProperty localTable;

    /* remote reader table property */
    struct REDATableProperty remoteTable;

    /* writer group table property */
    struct REDATableProperty groupTable;

    /*e Max number of destinations per send. Should >=
      COMMEND_COMMON_APP_IPADDRESS_COUNT_MAX */
    int destinationFanoutMax;

    RTIBool gatherStatistics;
};


  #define COMMEND_WRITER_SERVICE_PROPERTY_DEFAULT {  \
    /* localTable */              \
    {{16, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
     1}, \
    /* remoteTable */ \
    {{16, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
     1}, \
    /* groupTable */ \
    {{16, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
     1}, \
    COMMEND_COMMON_APP_IPADDRESS_COUNT_MAX, /* destinationFanoutMax */ \
    RTI_FALSE /* gatherStatistics */ }

struct COMMENDWriterServiceWriterProperty {
    /*e The type of the writer. CSTWriter is true, PSWriter otherwise */
    RTIBool isCstWriter;
    /*e The rate to send periodic liviness heartbeat if necessary. */
    struct RTINtpTime livelinessRate;
    /*e transport priority */
    int transportPriority;
    /*e What transports to use for local writer */
    struct RTINetioAliasList transportAliasList;
    /*e Array of entryport for communication back from the reader.
      Max COMMEND_COMMON_APP_IPADDRESS_COUNT_MAX. */
    struct RTINetioLocator entryport[COMMEND_COMMON_APP_IPADDRESS_COUNT_MAX];
    /*e Number of entryports. Could be 0 if using default. Writers that do
      not receive anything from the reader may ignore this.
    */
    int entryportCount;
    /*e Indicate whether or not to replace dropped samples with a HB
     * if needed to maintain liveliness
     */
    RTIBool forceFilteredLiveliness;
    /*e Indicates whether the writer must be able to fragment large data
        if the data size exceeds the max message size of its transports. */
    RTIBool supportsFragments;
    /*e Denotes the token bucket to use. NULL if writing synchronously.
     */
    struct RTIEventJobDispatcherTokenBucket *tokenBucket;
    /*e Denotes the publishing thread to use. NULL is asynch publishing is disabled.
    */        
    struct RTIEventJobDispatcherThread *asynchPubThread;
    /*e For asynch publishing flow controlling, how many bytes a single token is allowed to send.
    */        
    int bytesPerToken;
    /*e Max asynch samples.
    */
    int maxAsynchSamples;
    /*e Whether stats of comms are gathered
    */
    RTIBool gatherStatistics;
};


  #define COMMEND_WRITER_SERVICE_WRITER_PROPERTY_DEFAULT {  \
    RTI_FALSE, /* isCstWriter */                            \
    RTI_NTP_TIME_MAX, /* livelinessRate */                  \
    NDDS_TRANSPORT_PRIORITY_DEFAULT, /* transportPriority */\
    RTI_NETIO_ALIAS_LIST_DEFAULT, /* aliasList */           \
    {RTI_NETIO_LOCATOR_INVALID, /* transportAliasList */    \
     RTI_NETIO_LOCATOR_INVALID,                             \
     RTI_NETIO_LOCATOR_INVALID,                             \
     RTI_NETIO_LOCATOR_INVALID},                            \
    0,        /* entryportCount */   	         	    \
    RTI_TRUE, /* forceFilteredLiveliness  */                \
    RTI_FALSE,  /* supportsFragments */                      \
    NULL, /* tokenBucket */ \
    NULL, /* asynchPubThread */ \
    REDA_FAST_BUFFER_POOL_UNLIMITED /* maxAsynchSamples */, \
    RTI_FALSE /* gatherStatistics */ \
  }

struct REDAInlineList;

struct COMMENDFilterSignature {
    int signature[4];
};


#define COMMEND_FILTER_SIGNATURE_DEFAULT {{0,0,0,0}}

struct COMMENDWriterServiceRemoteReaderProperty {
    /*e Locators that can be used to reach the remote reader.
      Nodes are of type COMMENDLocatorInlineNode, containing the real locator.
      If used as unicast locators, should be < RTPS_IP_ADDRESS_MAX.
      But anonymous writer may use it as unlimited number of locators.
      That is, if you don't treat multicast or unicast locators differently,
      you can mix them here.
    */
    struct REDAInlineList* locators;

    /*e Some implementations make a distinction between unicast
      locators and the multicast locators.  So when you need to make a
      distinction, use this list to indicate MULTICAST locators.
    */
    struct REDAInlineList* multicastLocators;
    /*e Flag indicating whether reader is requiring inline QoS to be
    sent with every sample. 
    */
    RTIBool expectsInlineQos;
    /*e Filtering index assigned by the PRES layer. The index maps into the
	filter status in a sample
     */
     int filterIndex;

    /*e Filter signature that is used by the user of the service
     * to filter samples.
     */
     struct COMMENDFilterSignature filterSignature;
};


  #define COMMEND_WRITER_SERVICE_REMOTE_READER_PROPERTY_DEFAULT { \
         NULL, /* locators */ \
         NULL, /* multicastLocators */ \
         RTI_FALSE, /* expectsInlineQos */ \
         COMMEND_FILTER_INDEX_INVALID, /* filterIndex */ \
         COMMEND_FILTER_SIGNATURE_DEFAULT /* filterSignature */ \
  }

typedef RTIBool (*COMMENDWriterServiceWriteFunction)(
    struct COMMENDWriterService *me, 
    struct REDASequenceNumber *firstUnackedSnOut,
    const struct REDAWeakReference *writer,
    const struct REDASequenceNumber *firstSn,
    const struct MIGGeneratorSample *sample, 
    const struct RTINtpTime* nowIn,
    const struct RTINtpTime* blockTime,
    struct COMMENDFilterStatus *filterStatus,    
    struct REDAWorker *worker);

typedef RTIBool (*COMMENDWriterServiceLivelinessAssertFunction)(
    struct COMMENDWriterService *me, const struct REDAWeakReference *writer,
    struct REDAWorker *worker);

typedef RTIBool (*COMMENDWriterServiceWriterCreateFunction)(
    struct COMMENDWriterService *me,
    struct REDAWeakReference *recordWROut,
    MIGRtpsObjectId oid,
    const struct COMMENDWriterServiceWriterSampleListener *sListener,
    const struct COMMENDWriterServiceWriterActivityListener *aListener,
    const struct COMMENDWriterServiceWriterListenerStorage *storage,
    const struct COMMENDWriterServiceWriterProperty *property,
    const struct REDASequenceNumber * firstSn,
    const struct REDASequenceNumber * lastSn,
    const struct REDASequenceNumber * lowestUnackSn,
    struct REDAExclusiveArea *ea, struct REDAWorker *worker);

typedef RTIBool (*COMMENDWriterServiceWriterPropertySetFunction)(
    struct COMMENDWriterService *me, struct REDAWeakReference *writerWR,
    const struct COMMENDWriterServiceWriterProperty *property,
    struct REDAWorker *worker);

typedef RTIBool (*COMMENDWriterServiceGroupAssertFunction)(
    struct COMMENDWriterService *me, struct REDAWeakReference *recordWR,
    struct REDAWeakReference *writer,
    const struct RTINetioLocator* multicastLocator,
    struct REDAWorker *worker);

typedef RTIBool (*COMMENDWriterServiceRemoteReaderAssertFunction)(
    struct COMMENDWriterService *me, const struct REDAWeakReference *writer,
    const struct REDAWeakReference *group, const struct MIGRtpsGuid *guid,
    const struct COMMENDWriterServiceWriterListenerStorage *storage,
    const struct COMMENDWriterServiceRemoteReaderProperty *property,
    struct REDAWorker *worker);

typedef RTIBool (*COMMENDWriterServiceWriterDestroyFunction)(
    struct COMMENDWriterService *w, MIGRtpsObjectId oid,
    struct REDAWorker *worker);

typedef RTIBool (*COMMENDWriterServiceGroupRemoveFunction)(
    struct COMMENDWriterService *me, struct REDAWeakReference *group,
    struct REDAWorker *worker);

typedef RTIBool (*COMMENDWriterServiceRemoteReaderRemoveFunction)(
    struct COMMENDWriterService *w, MIGRtpsObjectId oid,
    const struct MIGRtpsGuid *guid, struct REDAWorker *worker);

typedef RTIBool (*COMMENDWriterServiceStateChangedFunction)(
    struct COMMENDWriterService *w, const struct REDAWeakReference *writer,
    const struct REDASequenceNumber *firstSn,
    const struct REDASequenceNumber *lastSn, struct REDAWorker *worker);

typedef void (*COMMENDWriterServiceShutdownFunction)
    (struct COMMENDWriterService *w, struct REDAWorker *worker);

typedef void (*COMMENDWriterServiceDeletionFunction)
    (struct COMMENDWriterService *w, struct REDAWorker *worker);

typedef RTIBool (*COMMENDWriterServiceGetLocalWriterStatisticsFunction)
    (struct COMMENDWriterService *w, 
     struct COMMENDWriterServiceLocalWriterStatistics *stats, 
     const struct REDAWeakReference *writer,
     struct REDAWorker *worker);

typedef RTIBool (*COMMENDWriterServiceGetMatchedReaderStatisticsFunction)
    (struct COMMENDWriterService *w, 
     struct COMMENDWriterServiceWriterStatisticsListener *listener,
     const struct REDAWeakReference *writer,
     struct REDAWorker *worker);

typedef RTIBool (*COMMENDWriterServiceGetMatchedDestinationsStatisticsFunction)
    (struct COMMENDWriterService *w, 
     struct COMMENDWriterServiceWriterStatisticsListener *listener,
     const struct REDAWeakReference *writer,
     struct REDAWorker *worker);

typedef RTIBool (*COMMENDWriterServiceResetStatisticsFunction)
    (struct COMMENDWriterService *w, 
     const struct REDAWeakReference *writer,
     struct REDAWorker *worker);

typedef RTIBool (*COMMENDWriterServiceInvalidateRemoteReaderFilterFunction)(struct COMMENDWriterService *w, 
										   MIGRtpsObjectId oid,
										   const struct MIGRtpsGuid *guid, 
										   struct REDAWorker *worker);

struct COMMENDWriterService {
    /*e */
    COMMENDWriterServiceWriterCreateFunction       createWriter;
    /*e */
    COMMENDWriterServiceWriterPropertySetFunction  setWriterProperty;
    /*e */
    COMMENDWriterServiceWriterDestroyFunction      destroyWriter;
    /*e */
    COMMENDWriterServiceGroupAssertFunction        assertGroup;
    /*e */
    COMMENDWriterServiceGroupRemoveFunction        removeGroup;
    /*e */
    COMMENDWriterServiceRemoteReaderAssertFunction assertRemoteReader;
    /*e */
    COMMENDWriterServiceRemoteReaderRemoveFunction removeRemoteReader;
    /*e */
    COMMENDWriterServiceInvalidateRemoteReaderFilterFunction invalidateRemoteReaderFilter;
    /*e */
    COMMENDWriterServiceWriteFunction              write;
    /*e */
    COMMENDWriterServiceStateChangedFunction       stateChanged;
    COMMENDWriterServiceLivelinessAssertFunction   assertLiveliness;
    COMMENDWriterServiceShutdownFunction           shutdown;
    COMMENDWriterServiceDeletionFunction           deleteService;

    COMMENDWriterServiceGetLocalWriterStatisticsFunction    getLocalWriterStatistics;
    COMMENDWriterServiceGetMatchedReaderStatisticsFunction  getMatchedReaderStatistics;
    COMMENDWriterServiceGetMatchedDestinationsStatisticsFunction    getMatchedDestinationsStatistics; 
    COMMENDWriterServiceResetStatisticsFunction                     resetStatistics;
};


#ifdef __cplusplus
    }	/* extern "C" */
#endif

  #include "commend/commend_writerService_impl.h"

#endif /* commend_writerService_h */
