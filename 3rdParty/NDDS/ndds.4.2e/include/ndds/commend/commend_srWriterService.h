/*
 * @(#)commend_srWriterService.h    generated by: makeheader    Mon Dec  3 23:08:09 2007
 *
 *		built from:	srWriterService.ifc
 */

#ifndef commend_srWriterService_h
#define commend_srWriterService_h


  #ifndef reda_worker_h
    #include "reda/reda_worker.h"
  #endif
  #ifndef reda_weakReference_h
    #include "reda/reda_weakReference.h"
  #endif
  #ifndef reda_database_h
    #include "reda/reda_database.h"
  #endif
  #ifndef mig_rtps_h
    #include "mig/mig_rtps.h"
  #endif
  #ifndef commend_dll_h
    #include "commend/commend_dll.h"
  #endif
  #ifndef commend_common_h
    #include "commend/commend_common.h"
  #endif
  #ifndef commend_writerService_h
    #include "commend/commend_writerService.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif

struct RTIClock;

struct REDADatabase;

struct COMMENDSrWriterService;


  /* NON_VOLATILE includes both TRANSIENT, TRANSIENT_LOCAL and PERSISTENT */
  #define COMMEND_WRITER_SERVICE_REMOTE_READER_NON_VOLATILE (1)
  #define COMMEND_WRITER_SERVICE_REMOTE_READER_VOLATILE  (2)

  #define COMMEND_SR_WRITER_SERVICE_SAMPLE_PTR_ARRAY_MAX (32)

struct COMMENDSrWriterServiceWriterProperty {
    /*e Parent property */
    struct COMMENDWriterServiceWriterProperty parent;
    /*e <<Immutable>>. Push data when write, or wait until NACK. */
    RTIBool pushMode;
    /*e The rate to send periodic heartbeat. Cannot be RTI_NTP_TIME_ZERO */
    struct RTINtpTime heartbeatRate;
    /*e The rate to send fast periodic heartbeat. Cannot be RTI_NTP_TIME_ZERO */
    struct RTINtpTime heartbeatRateFast;
    /*e The rate to send periodic heartbeat to late-joiners.  
    Cannot be RTI_NTP_TIME_ZERO */
    struct RTINtpTime heartbeatRateLateJoiner;
    /*e Whether late-joiner is serviced by heartbeatRateLateJoiner until 
    all available samples or until reaching the level of an existing reader */
    RTIBool lateJoinerAckAll; 
    /*e Whether to send HB at the fast rate or the normal rate */
    RTIBool useHeartbeatRateFast;
    /*e Max number of heartbeat to timeout a remote reader */
    int heartbeatRetriesMax;
    /*e Max output user data size for one repair packet (in bytes).
        If < 0, we will count the negative of the maximum number of samples
        that can be sent in 1 repair packet.  There are times (e.g. multicast
        repair packet) when this is a more meaningful bound.
    */
    int outputLoadMax;
    /*e Number of samples between two piggyback heartbeat */
    int samplesPerHeartbeat;
    /*e Duration to ignore NACKs that trigger redundant repairs */
    struct RTINtpTime nackSuppressionDuration;
};


  #define COMMEND_SR_WRITER_SERVICE_WRITER_PROPERTY_DEFAULT { \
    COMMEND_WRITER_SERVICE_WRITER_PROPERTY_DEFAULT,           \
    RTI_TRUE,                                                 \
    {30, 0}, /* heartbeatRate 30 sec*/                        \
    {30, 0}, /* heartbeatRateFast 30 sec*/                    \
    {30, 0}, /* heartbeatRateLateJoiner 30 sec */             \
    RTI_FALSE, /* lateJoinerAckAll No */                      \
    RTI_FALSE, /* useHeartbeatRateFast No */                  \
    10, /* heartbeatRetriesMax */                             \
    5000, /* outputLoadMax */                                 \
    1, /* samplesPerHeartbeat */                              \
    {0, 0}, /* nackSuppressionDuration */                     \
}

struct COMMENDSrWriterServiceRemoteReaderProperty {
    /*e parent property */
    struct COMMENDWriterServiceRemoteReaderProperty parent;
    /*e persistence type */
    int persistenceType;
};


  #define COMMEND_SR_WRITER_SERVICE_REMOTE_READER_PROPERTY_DEFAULT {     \
    COMMEND_WRITER_SERVICE_REMOTE_READER_PROPERTY_DEFAULT, /* parent */  \
    COMMEND_WRITER_SERVICE_REMOTE_READER_NON_VOLATILE /* persistenceType */ }

extern COMMENDDllExport struct COMMENDSrWriterService *
COMMENDSrWriterService_new(
    struct REDADatabase *db, struct COMMENDFacade *facade,
    struct COMMENDWriterServiceProperty *property,
    struct REDAExclusiveArea *ea, struct REDAWorker *worker);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

  #include "commend/commend_srWriterService_impl.h"

#endif /* commend_srWriterService_h */
