/*
 * @(#)commend_readerService.h    generated by: makeheader    Mon Dec  3 23:08:09 2007
 *
 *		built from:	readerService.ifc
 */

#ifndef commend_readerService_h
#define commend_readerService_h


  #ifndef reda_table_h
    #include "reda/reda_table.h"
  #endif
  #ifndef mig_rtps_h
    #include "mig/mig_rtps.h"
  #endif
  #ifndef commend_dll_h
    #include "commend/commend_dll.h"
  #endif
  #ifndef commend_common_h
    #include "commend/commend_common.h"
  #endif
  #ifndef commend_readerStatistics_h
    #include "commend/commend_readerStatistics.h"
  #endif
  #ifndef mig_generator_h
    #include "mig/mig_generator.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif


#define COMMEND_READER_SERVICE_OK (0)


#define COMMEND_READER_SERVICE_ERROR (1)


#define COMMEND_READER_SERVICE_PRECONDITION_NOT_MET (3)


#define COMMEND_READER_SERVICE_ILLEGAL_OPERATION (4)

struct COMMENDReaderService;

struct COMMENDReaderServiceReaderSampleListener;

struct COMMENDReaderServiceReaderStatisticsListener;

struct COMMENDReaderServiceReaderActivityListener;

struct COMMENDReaderServiceData {
    struct MIGGeneratorSample sample;
    /*e writer of the data */
    struct MIGRtpsGuid writer;
    /*e intended reader */
    struct MIGRtpsGuid reader;
};


  #define COMMEND_READER_SERVICE_DATA_DEFAULT { \
     MIG_GENERATOR_SAMPLE_DEFAULT, \
     MIG_RTPS_GUID_UNKNOWN, \
     MIG_RTPS_GUID_UNKNOWN }


#define COMMEND_READER_SERVICE_LISTENER_STORAGE_LENGTH (4)

struct COMMENDReaderServiceReaderListenerStorage {
    void *field[COMMEND_READER_SERVICE_LISTENER_STORAGE_LENGTH];
};

typedef RTIBool
(*COMMENDReaderServiceReaderSampleListenerOnNewDataCallback)(
    const struct COMMENDReaderServiceReaderSampleListener *listener,
    const struct REDASequenceNumber *firstRelevantSequenceNumber,
    const struct REDASequenceNumber *nextRelevantRangeStartSequenceNumber,
    const struct COMMENDReaderServiceData *data, int reservedCount,
    const struct RTINtpTime *timestamp,
    const struct COMMENDReaderServiceReaderListenerStorage *storage,
    struct REDAWorker *worker);

typedef int
(*COMMENDReaderServiceReaderSampleListenerOnGetFreeCountCallback)(
    const struct COMMENDReaderServiceReaderSampleListener *listener,
    const struct COMMENDReaderServiceReaderListenerStorage *storage,
    struct REDAWorker *worker);

typedef void
(*COMMENDReaderServiceReaderSampleListenerOnLostDataCallback)(
    const struct COMMENDReaderServiceReaderSampleListener *listener,
    const struct REDASequenceNumber *firstRelevantSequenceNumber,
    int reservedCount, const struct RTINtpTime *timestamp,
    unsigned int sampleLostCount,
    const struct COMMENDReaderServiceReaderListenerStorage *storage,
    struct REDAWorker *worker);

typedef void
(*COMMENDReaderServiceReaderSampleListenerOnCommitDataCallback)(
    const struct COMMENDReaderServiceReaderSampleListener *listener,
    const struct REDASequenceNumber *firstRelevantSequenceNumber,
    int reservedCount, const struct RTINtpTime *timestamp,
    const struct COMMENDReaderServiceReaderListenerStorage *storage,
    struct REDAWorker *worker);

typedef void
(*COMMENDReaderServiceReaderActivityListenerOnRemoteWriterInactiveCallback)(
    const struct COMMENDReaderServiceReaderActivityListener *listener,
    const struct COMMENDReaderServiceReaderListenerStorage *storage,
    struct REDAWorker *worker);

typedef void
(*COMMENDReaderServiceReaderActivityListenerOnRemoteWriterActiveCallback)(
    const struct COMMENDReaderServiceReaderActivityListener *listener,
    const struct COMMENDReaderServiceReaderListenerStorage *storage,
    struct REDAWorker *worker);

typedef RTIBool
(*COMMENDReaderServiceReaderActivityListenerOnStateRequestCallback)(
    const struct COMMENDReaderServiceReaderActivityListener *listener,
    struct RTINtpTime *nextResponseTime, struct RTINtpTime *snooze,
    const struct RTINtpTime *now,
    const struct COMMENDReaderServiceReaderListenerStorage *storage,
    struct REDAWorker *worker);

struct COMMENDReaderServiceReaderSampleListener {
    COMMENDReaderServiceReaderSampleListenerOnNewDataCallback onNewData;
    COMMENDReaderServiceReaderSampleListenerOnLostDataCallback onLostData;
    COMMENDReaderServiceReaderSampleListenerOnCommitDataCallback onCommitData;
    COMMENDReaderServiceReaderSampleListenerOnGetFreeCountCallback
        onGetFreeCount;
};

struct COMMENDReaderServiceReaderActivityListener {
    COMMENDReaderServiceReaderActivityListenerOnRemoteWriterInactiveCallback
        onRemoteWriterInactive;
    COMMENDReaderServiceReaderActivityListenerOnRemoteWriterActiveCallback
        onRemoteWriterActive;
    COMMENDReaderServiceReaderActivityListenerOnStateRequestCallback
        onStateRequest;
};

typedef RTIBool (*COMMENDReaderServiceReaderStatisticsListenerOnMatchedWriterStatisticsRequest) (
    const struct COMMENDReaderServiceReaderStatisticsListener *listener,
    struct REDAWeakReference *readerWR,
    struct COMMENDReaderServiceMatchedWriterStatistics *matchedStats,
    const struct MIGRtpsGuid *matchedWriter,
    struct REDAWorker *worker);

struct COMMENDReaderServiceReaderStatisticsListener {
    /* mirrors DDS_C as_listener struct, but exposed as ptr */
    void *listener_data;

    COMMENDReaderServiceReaderStatisticsListenerOnMatchedWriterStatisticsRequest
        onMatchedWriterStatisticsRequest;
};

struct COMMENDReaderServiceReaderFragmentResourceProperty {
    /*e The initial number of samples for which a Reader may store fragments. */
    int initial_fragmented_samples;
    /*e The maximum number of samples for which a Reader may store fragments. */
    int max_fragmented_samples;
    /*e The maximum number of samples per remote writer for which a Reader
        may store fragments. */
    int max_fragmented_samples_per_remote_writer;
    /*e Maximum number of fragments the reader can store per sample. */
    int max_fragments_per_sample;
    /*e Maximum size of any (fragmented) sample this reader will receive.
        If set to -1, the service will not pre-allocate memory, but instead
        will allocate memory from the heap upon receiving the first fragment
        of a new sample. The amount of memory allocated equals the amount of
        memory needed to store all fragments in the sample. Once all fragments
        of a sample have been received, the sample is deserialized and stored
        in the regular receive queue. At that time, the dynamically allocated
        memory is freed again.*/
    int max_sample_size;
    int max_sample_params_size;
};


  #define COMMEND_READER_SERVICE_READER_FRAGMENT_RESOURCE_PROPERTY_DEFAULT { \
    4,    /* initial_fragmented_samples */                                   \
    1024, /* max_fragmented_samples */                                       \
    2,    /* max_fragmented_samples_per_remote_writer */                     \
    256,  /* max_fragments_per_sample */                                     \
    -1,    /* max_sample_size */                                              \
    -1    /* max_sample_params_size */ }

struct COMMENDReaderServiceReaderProperty {
    /*e specified for any destination a reader may create */
    int transportPriority;
    /*e specified for local reader */
    struct RTINetioAliasList transportAliasList;
    /*e multicast entryports. Up to 4 Limit to one. Can be INVALID */
    struct RTINetioLocator multicastEntryport;
    /*e Description for unicast entryports. Can be 0 to 4. */
    struct RTINetioLocator unicastEntryport[
	COMMEND_COMMON_APP_IPADDRESS_COUNT_MAX];
    int unicastEntryportCount;
    /*e Whether this reader supports fragmented samples. */
    RTIBool supportsFragments;
    /*e Resource properties for storing fragments.
        Only relevant if supportsFragments == RTI_TRUE. */
    struct COMMENDReaderServiceReaderFragmentResourceProperty
        fragmentResources;
    /*e flags whether reader expects inline qos */
    RTIBool expectsInlineQos;
    /*e 
    */
    RTIBool gatherStatistics;
};


  #define COMMEND_READER_SERVICE_READER_PROPERTY_DEFAULT { \
    NDDS_TRANSPORT_PRIORITY_DEFAULT, /* transportPriority */\
    RTI_NETIO_ALIAS_LIST_DEFAULT, /* aliasList */	   \
    RTI_NETIO_LOCATOR_INVALID,                             \
    {RTI_NETIO_LOCATOR_INVALID,                            \
     RTI_NETIO_LOCATOR_INVALID,                            \
     RTI_NETIO_LOCATOR_INVALID,                            \
     RTI_NETIO_LOCATOR_INVALID},                           \
    0,                                                     \
    RTI_FALSE,                                              \
    COMMEND_READER_SERVICE_READER_FRAGMENT_RESOURCE_PROPERTY_DEFAULT, \
    RTI_FALSE,  /*expectsInlineQos*/ \
    RTI_FALSE /* gatherStatistics */ \
    }

struct COMMENDReaderServiceRemoteWriterProperty;

struct COMMENDReaderServiceProperty {
    /*e Allocation block size for reader table.*/
    struct REDATableProperty localTable;

    /* remote reader table property */
    struct REDATableProperty remoteTable;

    RTIBool gatherStatistics;
};

typedef RTIBool (*COMMENDReaderServiceReaderCreateFunction)(
    struct COMMENDReaderService *me, struct REDAWeakReference *recordWR,
    MIGRtpsObjectId oid,
    const struct COMMENDReaderServiceReaderSampleListener *sampleListener,
    const struct COMMENDReaderServiceReaderActivityListener *activityListener,
    const struct COMMENDReaderServiceReaderListenerStorage *storage,
    const struct COMMENDReaderServiceReaderProperty *property,
    struct REDAExclusiveArea *ea, struct REDAWorker *worker);

typedef RTIBool (*COMMENDReaderServiceReaderDestroyFunction)(
    struct COMMENDReaderService *me, MIGRtpsObjectId oid,
    struct REDAWorker *worker);

typedef RTIBool (*COMMENDReaderServiceRemoteWriterAssertFunction)(
    struct COMMENDReaderService *me,
    MIGRtpsObjectId oid, const struct MIGRtpsGuid *guid,
    const struct COMMENDReaderServiceReaderListenerStorage *sampleStorage,
    const struct COMMENDReaderServiceReaderListenerStorage *activityStorage,
    const struct COMMENDReaderServiceRemoteWriterProperty *property,
    struct REDAWorker *worker);

typedef RTIBool (*COMMENDReaderServiceRemoteWriterRemoveFunction)(
    struct COMMENDReaderService *me, MIGRtpsObjectId readerOid,
    const struct MIGRtpsGuid *remoteWriterGuid, struct REDAWorker *worker);

typedef RTIBool (*COMMENDReaderServiceRemoteWriterGetStatusFunction)(
    struct COMMENDReaderService *me, struct REDASequenceNumber *lastSn,
    MIGRtpsObjectId readerOid, const struct MIGRtpsGuid *remoteWriterGuid,
    struct REDAWorker *worker);

typedef RTIBool (*COMMENDReaderServiceReaderPropertySetFunction)(
    struct COMMENDReaderService *me, MIGRtpsObjectId oid,
    const struct COMMENDReaderServiceReaderProperty *p,
    struct REDAWorker *worker);

typedef void (*COMMENDReaderServiceShutdownFunction)
    (struct COMMENDReaderService *w, struct REDAWorker *worker);

typedef void (*COMMENDReaderServiceDeletionFunction)
    (struct COMMENDReaderService *me, struct REDAWorker *worker);

typedef RTIBool (*COMMENDReaderServiceGetLocalReaderStatisticsFunction)
    (struct COMMENDReaderService *me, 
     struct COMMENDReaderServiceLocalReaderStatistics *stats,
     const struct REDAWeakReference *reader,
     struct REDAWorker *worker);

typedef RTIBool (*COMMENDReaderServiceGetMatchedWriterStatisticsFunction)
    (struct COMMENDReaderService *me,
     struct COMMENDReaderServiceReaderStatisticsListener *listener,
     const struct REDAWeakReference *reader,
     struct REDAWorker *worker);

typedef RTIBool (*COMMENDReaderServiceResetStatisticsFunction)
    (struct COMMENDReaderService *me,
     const struct REDAWeakReference *reader,
     struct REDAWorker *worker);

typedef RTIBool (*COMMENDReaderServiceSetReaderLastReceivedSnFunction)(
    struct COMMENDReaderService * me,
    int *failReason,
    MIGRtpsObjectId readerOid,
    const struct MIGRtpsGuid * remoteWriterGuid,
    int offsetMode,
    const struct REDASequenceNumber * sn,
    struct REDAWorker * worker);

struct COMMENDReaderService {
    COMMENDReaderServiceReaderCreateFunction createReader;
    COMMENDReaderServiceReaderDestroyFunction destroyReader;
    COMMENDReaderServiceRemoteWriterAssertFunction assertRemoteWriter;
    COMMENDReaderServiceRemoteWriterRemoveFunction removeRemoteWriter;
    COMMENDReaderServiceRemoteWriterGetStatusFunction getRemoteWriterStatus;
    COMMENDReaderServiceReaderPropertySetFunction setReaderProperty;
    COMMENDReaderServiceSetReaderLastReceivedSnFunction setReaderLastReceivedSn;
    COMMENDReaderServiceShutdownFunction shutdown;
    COMMENDReaderServiceDeletionFunction deleteService;
    COMMENDReaderServiceGetLocalReaderStatisticsFunction getLocalReaderStatistics; 
    COMMENDReaderServiceGetMatchedWriterStatisticsFunction getMatchedWriterStatistics;
    COMMENDReaderServiceResetStatisticsFunction resetStatistics;
};


  #define COMMEND_READER_SERVICE_PROPERTY_DEFAULT { \
    /* localTable */              \
    {{16, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
     1}, \
    /* remoteTable */ \
    {{16, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
     1}, \
     RTI_FALSE /* gatherStatistics */ \
  }


#ifdef __cplusplus
    }	/* extern "C" */
#endif

  #include "commend/commend_readerService_impl.h"

#endif /* commend_readerService_h */
