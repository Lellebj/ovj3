/*
 * @(#)pres_common.h    generated by: makeheader    Mon Dec  3 23:08:14 2007
 *
 *		built from:	common.ifc
 */

#ifndef pres_common_h
#define pres_common_h


  #ifndef osapi_ntptime_h
    #include "osapi/osapi_ntptime.h"
  #endif
 #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
 #endif
 #ifndef osapi_alignment_h
    #include "osapi/osapi_alignment.h"
 #endif
 #ifndef osapi_thread_h
    #include "osapi/osapi_thread.h"
 #endif
 #ifndef reda_fastBuffer_h
    #include "reda/reda_fastBuffer.h"
 #endif
 #ifndef reda_weakReference_h
    #include "reda/reda_weakReference.h"
 #endif
 #ifndef event_jobDispatcher_h
    #include "event/event_jobDispatcher.h"
 #endif
 #ifndef netio_common_h
    #include "netio/netio_common.h" /*for RTI_NETIO_ALIAS_LIST_SEPARATOR*/
 #endif
 #ifndef mig_rtps_h
    #include "mig/mig_rtps.h"
 #endif
 #ifndef cdr_type_h
    #include "cdr/cdr_type.h"
 #endif
 #ifndef cdr_encapsulation_h
    #include "cdr/cdr_encapsulation.h"
 #endif
  #ifndef pres_dll_h
    #include "pres/pres_dll.h"
  #endif
  #ifndef pres_log_h
    #include "pres/pres_log.h"
  #endif
 #ifndef pres_condition_h
    #include "pres/pres_condition.h"
 #endif

#ifdef __cplusplus
    extern "C" {
#endif


  #define PRES_OWNERSHIP_STRENGTH_QOS_POLICY_VALUE_MIN (-2147483647-1)


  #define PRES_TIME_BASED_FILTER_QOS_POLICY_MINIMUM_SEPARATION_MAX {100000000,0}


  #define PRES_DEADLINE_QOS_POLICY_DEADLINE_PERIOD_MAX {100000000,0}


  #define PRES_LIFESPAN_QOS_POLICY_LIFESPAN_DURATION_MAX {100000000,0}

typedef enum {
    /*e
     * Volatile.
     */
    PRES_VOLATILE_DURABILITY_QOS,
    
    /*e
     * Transient Local.
     */
    PRES_TRANSIENT_LOCAL_DURABILITY_QOS,

    /*e
     * Transient.
     */
    PRES_TRANSIENT_DURABILITY_QOS,
    
    /*e
     * Persistent.
     */
    PRES_PERSISTENT_DURABILITY_QOS
} PRESDurabilityQosPolicyKind;

typedef enum {
    /*e
     * No service
     */
    PRES_NO_SERVICE_QOS,

    /*e
     * Persistence service.
     */
    PRES_PERSISTENCE_SERVICE_QOS
} PRESServiceQosPolicyKind;

typedef enum {
    PRES_INSTANCE_PRESENTATION_QOS,
    PRES_TOPIC_PRESENTATION_QOS,
    PRES_GROUP_PRESENTATION_QOS
} PRESPresentationQosPolicyAccessScopeKind;

typedef enum {
    /*e
     * Shared ownership.
     */
    PRES_SHARED_OWNERSHIP_QOS,

    /*e
     * Exclusive ownership.
     */
    PRES_EXCLUSIVE_OWNERSHIP_QOS
} PRESOwnershipQosPolicyKind;

typedef enum {
    /*e
     * Automatic.
     */
    PRES_AUTOMATIC_LIVELINESS_QOS,
    
    /*e
     * Manual by participant.
     */
    PRES_MANUAL_BY_PARTICIPANT_LIVELINESS_QOS,
    
    /*e
     * Manual by topic.
     */
    PRES_MANUAL_BY_TOPIC_LIVELINESS_QOS
} PRESLivelinessQosPolicyKind;

typedef enum {
    /*e
     * Best-effort (not reliable).
     */
    PRES_BEST_EFFORT_RELIABILITY_QOS = 0x01,
    
    /*e
     * Strict reliable.
  Guaranteed delivery enforced by publication.
  <UL>
    <LI>advantage
      <OL>
        <LI>messages are fully acknowledged
        <LI>the pub makes sure all messages are received and
        blocks the user from pumping more data in the
        system if this would lead to messaged being lost
        <LI>the pub KNOWS whether all subs have received an issue 
        or not; the user is alerted in case a sub becomes unresponsive
      </OL>
    <LI>disadvantage
      <OL>
        <LI>the throughput is essentially limited by the SLOWEST sub
	<LI>the pub must keep state on each sub (space & management overhead)
      </OL>
  </UL>
     */
    PRES_RELIABLE_RELIABILITY_QOS = 0x02
} PRESReliabilityQosPolicyKind;

typedef enum {
    /*e
     * Order by reception timestamp.
     */
    PRES_BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS,

    /*e
     * Order by source timestamp.
     */
    PRES_BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS
} PRESDestinationOrderQosPolicyKind;

typedef enum {
    PRES_INSTANCE_SCOPE_DESTINATIONORDER_QOS,
    PRES_TOPIC_SCOPE_DESTINATIONORDER_QOS
} PRESDestinationOrderQosPolicyScopeKind;

typedef enum {
    /*e
     * Keep just the last value.
     */
    PRES_KEEP_LAST_HISTORY_QOS,

    /*e
     * Keep all values.
     */
    PRES_KEEP_ALL_HISTORY_QOS
} PRESHistoryQosPolicyKind;

typedef enum {
    /*e
     * Refilter all the samples when reader subscribes
     */
     PRES_ALL_REFILTER_QOS,

    /*e
     * Never refilter samples that exists when a reader
     * subscribes
     */
     PRES_NONE_REFILTER_QOS,

    /*e
     * Refilter only when the reader requests a
     * sample that was written before the reader
     * was created.
     */
     PRES_ON_DEMAND_REFILTER_QOS
} PRESRefilterQosPolicyKind;

struct PRESSequenceOctet {
    /*e
      maximum capacity of sequence
    */
    RTI_UINT32 _maximum;
    /*e
      actual length of data in sequence
    */
    RTI_UINT32 _length;
    /*e
      pointer to first element in sequence
    */
    RTICdrOctet *_buffer;
};


#define PRES_SEQUENCE_OCTET_DEFAULT {       \
    0, /* maximum */                        \
    0, /* length */                         \
    NULL /* buffer */                       \
}

extern PRESDllExport
unsigned int PRESSequenceOctet_getMaxSizeSerialized(
    unsigned int size, int maxLength);

struct PRESUserDataQosPolicy {
    /*e
      Sequence of octet representating user data
    */
    struct PRESSequenceOctet data;
};

struct PRESEntityNameQosPolicy {
    /*e
      pointer to the name
    */
    RTICdrChar *name;
};


#define PRES_ENTITY_NAME_QOS_POLICY_DEFAULT {       \
    NULL /* name */                       \
}

extern int PRESEntityNameQosPolicy_compare(const void* l, const void* r);

extern int PRESEntityNameQosPolicy_copy(struct PRESEntityNameQosPolicy* self, 
                                 const struct PRESEntityNameQosPolicy* src);

struct PRESGroupDataQosPolicy {
    /*e
      Sequence of octet representating group data
    */
    struct PRESSequenceOctet data;
};

struct PRESAsynchronousPublisherQosPolicy {
    /*e
      asynch pub disabled
    */
    RTIBool disabled;
    /*e
      thread priority
    */
    int priority;
    /*e
      thread stack size
    */
    int stackSize;
    /*e
      thread options
    */
    int options;
};


#define PRES_ASYNCHRONOUS_PUBLISHER_QOS_POLICY_DEFAULT { \
    RTI_FALSE, /*disabled*/ \
    RTI_OSAPI_THREAD_PRIORITY_DEFAULT, /*priority*/ \
    RTI_OSAPI_THREAD_STACK_SIZE_DEFAULT, /*stackSize*/ \
    RTI_OSAPI_THREAD_OPTION_DEFAULT /*options*/ \
}

struct PRESTopicDataQosPolicy {
    /*e
      Sequence of octet representating topic data
    */
    struct PRESSequenceOctet data;
};

struct PRESDurabilityQosPolicy {
    /*e
     * Durability kind.
     */
    PRESDurabilityQosPolicyKind kind;
    /*e
     * Direct communication 
     * If kind is equal to PRES_TRANSIENT_DURABILITY_QOS or
     * PRES_PERSISTENCE_DURABILITY_QOS and directCommunication is RTI_FALSE
     * The data reader will not communicate directly with the data writers
     * offering persistence or transient durability. All the communication
     * will go through the persistence service.
     */
    RTIBool directCommunication;
};

struct PRESPresentationQosPolicy {
    /*e
      determines the largest scope spanning the entities for which the order
      and coherency of changes can be preserved.
     */
    PRESPresentationQosPolicyAccessScopeKind accessScope;
    /*e
      specify and receive coherent changes
     */
    RTIBool coherentAccess;
    /*e
      see the relative order of changes
     */
    RTIBool orderedAccess;
};

struct PRESCoherentSetQosPolicy {
    /*e
      Starting sequence number of the coherent set
     */
    struct REDASequenceNumber setFirstSn;
};

struct PRESDeadlineQosPolicy {
    /*e
     * How long the application should wait until considering the
     * deadline to be expired.
     */
    struct RTINtpTime deadlinePeriod;
};

struct PRESLatencyBudgetQosPolicy {
    /*e
     * Duration of latency.
     */
    struct RTINtpTime duration;
};

struct PRESOwnershipQosPolicy {
    /*e
     * Ownership kind.
     */
    PRESOwnershipQosPolicyKind kind;
};

struct PRESOwnershipStrengthQosPolicy {
    RTI_INT32 value;
};

struct PRESLivelinessQosPolicy {
    /*e
     * Kind of liveliness desired.
     */
    PRESLivelinessQosPolicyKind kind;
    
    /*e
     * Duration of liveliness.
     */
    struct RTINtpTime leaseDuration;
};

struct PRESTimeBasedFilterQosPolicy {
    /*e datareader does not want to receive more than one vlaue each
      minimumSeparation, regardless of hwo fast the changes orccur. */
    struct RTINtpTime minimumSeparation;
};

struct PRESTypeSupportQosPolicy {
    /*e Option passed to the serialize function
     */
    void *serializeOption;
};

typedef void* (*PRESContentFilterCompile)
	(RTI_UINT32 systemKey,void* handle,const char* expression,
	const char** parameters,RTI_INT32 param_length,const void *typeCode, void *old_handle,
	RTI_INT32* errorcode);

typedef RTI_INT32 (*PRESContentFilterEvaluate)
	(RTI_UINT32 systemKey,void* filterData, void* handle,const void* sample);

typedef void (*PRESContentFilterFinalize)
	(RTI_UINT32 systemKey,void* filterData, void* handle);


#define PRES_CONTENT_FILTER_STATE_UNKNOWN 0
#define PRES_CONTENT_FILTER_STATE_PASSED  1
#define PRES_CONTENT_FILTER_STATE_DROPPED 2
#define PRES_CONTENT_FILTER_SIGNATURE_DEFAULT {{0,0,0,0}}
#define PRES_CONTENT_FILTER_SIGNATURE_MAX     (4)
#define PRESContentFilterSignature_isEqual(__left,__right) \
 (((__left)->signature[0]==(__right)->signature[0]) ? \
 (((__left)->signature[1]==(__right)->signature[1]) ? \
 (((__left)->signature[2]==(__right)->signature[2]) ? \
 (((__left)->signature[3]==(__right)->signature[3]) ? 1 :0) : 0) :0) :0)

struct PRESContentFilterSignature {
	int signature[PRES_CONTENT_FILTER_SIGNATURE_MAX];
};

struct PRESContentFilterQosPolicy {
    /*i Unique key for each user of a filter */
    RTI_UINT32 systemKey;
    /*i Handle to pass to the evaluate function */
    void *handle;
    /*i Function that filters a sample */
    PRESContentFilterEvaluate evaluate;
    /*i Function that filters a sample on serialized*/
    PRESContentFilterEvaluate evaluateOnSerialized;
    /*i Function that finalizes the use of this filterPolicy */
    PRESContentFilterFinalize finalizeFunc;
    /*i Filter Signature */	
    struct PRESContentFilterSignature signature;
    /*i Weak reference to filter type */
    struct REDAWeakReference filterWR;
    /*i Apply filter */
    RTIBool doFilter;
    /*i filter data obtained through register */
    void *filterData;
};

struct PRESSequenceString {
    /*i The number of characters allocated in the 'string' field.*/
    RTI_UINT32 _maximum;

    /*i The logical number of characters in the 'string' field.*/
    RTI_UINT32 _length;

    /*e
     * The strings in this sequence, delimited by a character of the
     * client's choosing.
     */
    char *str;
};

struct PRESPartitionQosPolicy {
    /*e
      A list of strings.
    */
    struct PRESSequenceString name;
};

struct PRESProperty {
    /*i
        @brief Property name. The name octet sequence containing a NULL
        terminated string. 
    */
    struct PRESSequenceOctet name;
    /*i
        @brief Property value. The value octet sequence containing a NULL
        terminated string. 
    */
    struct PRESSequenceOctet value;
    /*i
        @brief Indicates if the property must be propagated or not.
    */
    RTIBool propagate;
};

struct PRESSequenceProperty {
    /*i The maximum number of elements in the property list*/
    RTI_UINT32 _maximum;
    
    /*i The number of elements in the property list */
    RTI_UINT32 _length;
    
    /*e The name,value pairs in this sequence */
    struct PRESProperty *_buffer;
    
    /*e Maximum length of the string buffer*/
    RTI_UINT32 _string_maximum;
    
    /*e Current length of string buffer */
    RTI_UINT32 _string_length;
    
    /*e Area allocated for storing string */
    char *_string_buffer;
};

struct PRESPropertyQosPolicy {
    struct PRESSequenceProperty data;
};


#define PRES_PROPERTY_QOS_POLICY_DEFAULT {{0,0,NULL,0,0,NULL}}

struct PRESStatisticsQosPolicy {
    RTIBool gatherStatistics;
};


#define PRES_STATISTICS_QOS_POLICY_DEFAULT {RTI_FALSE}


#define PRES_PARTITION_DEFAULT ""


#define  PRES_PARTITION_QOS_POLICY_NAME_SEPARATOR RTI_NETIO_ALIAS_LIST_SEPARATOR

struct PRESReliabilityQosPolicy {
    /*e
     * Reliability kind.
     */
    PRESReliabilityQosPolicyKind kind;
    /*e
     * Max blocking time.
     */
    struct RTINtpTime maxBlockingTime;
};

struct PRESDestinationOrderQosPolicy {
    /*e
     * Which destination order.
     */
    PRESDestinationOrderQosPolicyKind kind;
    /*e
     * Filter scope for destination order.
     */
    PRESDestinationOrderQosPolicyScopeKind scope;
};

struct PRESHistoryQosPolicy {
    /*e
     * Keep all vs. keep just the last value.
     */
    PRESHistoryQosPolicyKind kind;

    /*e 
     * What to do with stored samples 
     * when a new remote reader subscribes
     */
    PRESRefilterQosPolicyKind refilter;
	
    /*e
     * How many values to keep.
     */
    RTI_INT32 depth;
};

struct PRESTransportPriorityQosPolicy {
    /*e
     * The value of the priority.
     */
    RTI_INT32 value;
};

struct PRESLifespanQosPolicy {
    /*e
     * The value of the lifespan duration.
     */
    struct RTINtpTime duration;
};

struct PRESWriterDataLifecycleQosPolicy {
    /*e
     * Whether each time a DataWriter will automatically dispose instances when
     * they are unregistered.
     */
    RTIBool autodisposeUnregisteredInstances;
};

struct PRESReaderDataLifecycleQosPolicy {
    /*e
     * Whether each time a DataWriter will automatically dispose instances when
     * they are unregistered.
     */
    struct RTINtpTime autopurgeNowriterSamplesDelay;
    /*e
     * Whether each time a DataWriter will automatically dispose instances when
     * they are disposed.
     */
    struct RTINtpTime autopurgeDisposedSamplesDelay;
};

struct PRESEntityFactoryQosPolicy {
    /*e Whether the entity acting as a factory automatically enables the 
     *  instances it creates when enable is called.
     */
    RTIBool autoenableContainedEntities;
};

struct PRESResourceLimitsQosPolicy {
    /*e Control growth of number of samples. */
    struct REDAFastBufferPoolGrowthProperty sampleCount;
    
    /*e Control growth of number of instances. */
    struct REDAFastBufferPoolGrowthProperty instanceCount;
    
    /*e
     * The maximum number of samples per instance.
     */
    RTI_INT32 maxSamplesPerInstance;
};

extern RTIBool
PRESResourceLimitQos_limitExceeded(int limit, int current);

extern RTIBool
PRESResourceLimitQos_limitReached(int limit, int current);

struct PRESDurabilityServiceQosPolicy {
    /*e service_cleanup_delay */
    struct RTINtpTime serviceCleanupDelay;

    struct PRESHistoryQosPolicy history;

    /*e this has more info than we need, but we will only serialize what
      is in the spec (max...) */
    struct PRESResourceLimitsQosPolicy resourceLimits;
};

struct PRESServiceQosPolicy {
    /*e
     * Service kind
     */
    PRESServiceQosPolicyKind kind;
};


#define PRES_FILTER_SIGNATURE_BITMAP_LENGTH (1)
#define PRES_FILTER_SIGNATURE_LENGTH_MAX    (4)

struct PRESInlineParameterQos {
    /* for directed write */
    int directed_write_pid; /* int = 2 shorts, which covers pid and length */
    struct MIGRtpsGuid readerGuid;

    int coherency_pid; /* int = 2 shorts, which covers pid and length */
    struct REDASequenceNumber coherentSetFirstSn;

	int    signature_pid; /* int = 2 shorts, which covers pid and length */
	int    signatureBitmapLength;
	int    signatureBitmap[PRES_FILTER_SIGNATURE_BITMAP_LENGTH];
	int    signatureLength;
	struct PRESContentFilterSignature signature[PRES_FILTER_SIGNATURE_LENGTH_MAX];
        /* common for all inline parameters */
	int sentinel;
};

typedef RTI_UINT32 PRESStatusKind;

typedef RTI_UINT32 PRESStatusKindMask;


  /*e \ingroup PRESStatusModule
   * Inconsistent topic status.
   */
  #define PRES_INCONSISTENT_TOPIC_STATUS          (PRESStatusKind)(0x0001 << 0)
  /*e \ingroup PRESStatusModule
   * Sample lost status.
   */
  #define PRES_SAMPLE_LOST_STATUS                 (PRESStatusKind)(0x0001 << 1)
  /*e \ingroup PRESStatusModule
   * Data on readers status.
   */
  #define PRES_DATA_ON_READERS_STATUS             (PRESStatusKind)(0x0001 << 2)
  /*e \ingroup PRESStatusModule
   * Sample rejected status.
   */
  #define PRES_SAMPLE_REJECTED_STATUS             (PRESStatusKind)(0x0001 << 3)
  /*e \ingroup PRESStatusModule
   * Liveliness changed status.
   */
  #define PRES_LIVELINESS_CHANGED_STATUS          (PRESStatusKind)(0x0001 << 4)
  /*e \ingroup PRESStatusModule
   * Requested deadline missed status.
   */
  #define PRES_REQUESTED_DEADLINE_MISSED_STATUS   (PRESStatusKind)(0x0001 << 5)
  /*e \ingroup PRESStatusModule
   * Requested incompatible QoS status.
   */
  #define PRES_REQUESTED_INCOMPATIBLE_QOS_STATUS  (PRESStatusKind)(0x0001 << 6)
  /*e \ingroup PRESStatusModule
   * Data available status.
   */
  #define PRES_DATA_AVAILABLE_STATUS              (PRESStatusKind)(0x0001 << 7)
  /*e \ingroup PRESStatusModule
   * Liveliness lost status.
   */
  #define PRES_LIVELINESS_LOST_STATUS             (PRESStatusKind)(0x0001 << 8)
  /*e \ingroup PRESStatusModule
   * Offered deadline missed status.
   */
  #define PRES_OFFERED_DEADLINE_MISSED_STATUS     (PRESStatusKind)(0x0001 << 9)
  /*e \ingroup PRESStatusModule
   * Incompatible QoS status.
   */
  #define PRES_OFFERED_INCOMPATIBLE_QOS_STATUS    (PRESStatusKind)(0x0001 << 10)
  /*e \ingroup PRESStatusModule
   * Extend liveliness changed QoS status.
   */
  #define PRES_LIVELINESS_CHANGED_STATUS_X        (PRESStatusKind)(0x0001 << 11)
  /*e \ingroup PRESStatusModule
   * Extend liveliness updated QoS status.
   */
  #define PRES_LIVELINESS_UPDATED_STATUS_X        (PRESStatusKind)(0x0001 << 12)
  /*e \ingroup PRESStatusModule
   * Publication match status.
   */
  #define PRES_PUBLICATION_MATCH_STATUS           (PRESStatusKind)(0x0001 << 13)
  /*e \ingroup PRESStatusModule
   * Subscription match status.
   */
  #define PRES_SUBSCRIPTION_MATCH_STATUS          (PRESStatusKind)(0x0001 << 14)
  /*e \ingroup PRESStatusModule
   * Publication reliable queue status.
   */
  #define PRES_PUBLICATION_RELIABLE_QUEUE_STATUS_X (PRESStatusKind)(0x0001 <<15)
  /*e \ingroup PRESStatusModule
   * All statuses, exluding PRES_LIVELINESS_UPDATED_STATUS_X
   */
  #define PRES_STATUS_KIND_MASK_ALL             (PRESStatusKindMask)(0x0000efff)
  /*e \ingroup PRESStatusModule
   * No statuses.
   */
  #define PRES_STATUS_KIND_MASK_NONE            (PRESStatusKindMask)(0x0)

struct PRESInstanceHandle {
    /*e We use guid to represent an instance */
    struct MIGRtpsGuid guid;
    /*e so that we can allow all 0 guid values */
    RTIBool isValid;
};


/*e \ingroup PRESInstanceHandleClass
  Invalid instance handle
 */
  #define PRES_INSTANCE_HANDLE_NIL { \
      MIG_RTPS_GUID_UNKNOWN, \
      RTI_FALSE /* isValid */ }

extern PRESDllExport 
int PRESInstanceHandle_compare(const struct PRESInstanceHandle *me,
			       const struct PRESInstanceHandle *handle);

extern PRESDllExport 
RTIBool PRESInstanceHandle_isNil(const struct PRESInstanceHandle *me);

typedef enum {
    /*e
      sample is not rejected
    */
    PRES_NOT_REJECTED,
    /*e
      sample is rejected because instance limit is exceeded
    */
    PRES_REJECTED_BY_INSTANCE_LIMIT,
    /*e
      Sample is rejected because sample limit is exceeded
     */
    PRES_REJECTED_BY_SAMPLE_LIMIT,
    /*e
      sample is rejected because sample per instance limit is exceeded
    */
    PRES_REJECTED_BY_SAMPLES_PER_INSTANCE_LIMIT,
    /*e
      sample is rejected because remote writers limit is exceeded
    */
    PRES_REJECTED_BY_REMOTE_WRITERS_LIMIT,
    /*e
      sample is rejected because remote writers per instance limit is exceeded
    */
    PRES_REJECTED_BY_REMOTE_WRITERS_PER_INSTANCE_LIMIT,
    /*e
      sample is rejected because samples per remote writer limit is exceeded
    */
    PRES_REJECTED_BY_SAMPLES_PER_REMOTE_WRITER_LIMIT
} PRESSampleRejectedStatusKind;

typedef enum {
    /*e PRESInvalidQosPolicy */
    PRES_INVALID_QOS_POLICY,

    /*e PRESUserDataQosPolicy */
    PRES_USER_DATA_QOS_POLICY,

    /*e PRESDurabilityQosPolicy */
    PRES_DURABILITY_QOS_POLICY,

    /*e PRESPresentationQosPolicy */
    PRES_PRESENTATION_QOS_POLICY,

    /*e PRESDeadlineQosPolicy */
    PRES_DEADLINE_QOS_POLICY,

    /*e PRESLatencyBudgetQosPolicy */
    PRES_LATENCY_BUDGET_QOS_POLICY,

    /*e PRESOwnershipQosPolicy */
    PRES_OWNERSHIP_QOS_POLICY,

    /*e PRESOwnershipStrengthQosPolicy */
    PRES_OWNERSHIP_STRENGTH_QOS_POLICY,

    /*e PRESLivelinessQosPolicy */
    PRES_LIVELINESS_QOS_POLICY,

    /*e PRESTimeBasedFilterQosPolicy */
    PRES_TIME_BASED_FILTER_QOS_POLICY,

    /*e PRESPartitionQosPolicy */
    PRES_PARTITION_QOS_POLICY,

    /*e PRESReliabilityQosPolicy */
    PRES_RELIABILITY_QOS_POLICY,

    /*e PRESDestinationOrderQosPolicy */
    PRES_DESTINATION_ORDER_QOS_POLICY,

    /*e PRESHistoryQosPolicy */
    PRES_HISTORY_QOS_POLICY,

    /*e PRESResourceLimitsQosPolicy */
    PRES_RESOURCE_LIMITS_QOS_POLICY,

    /*e PRESContentFilterQosPolicy */
    PRES_CONTENTFILTER_QOS_POLICY,

    /*e PRESEntityFactoryQosPolicy */
    PRES_ENTITY_FACTORY_QOS_POLICY,

    /*e PRESWriterDataLifecycleQosPolicy */
    PRES_WRITER_DATA_LIFECYCLE_QOS_POLICY,

    /*e PRESReaderDataLifecycleQosPolicy */
    PRES_READER_DATA_LIFECYCLE_QOS_POLICY,

    /*e PRESTopicDataQosPolicy */
    PRES_TOPIC_DATA_QOS_POLICY,

    /*e PRESGroupDataQosPolicy */
    PRES_GROUP_DATA_QOS_POLICY,
    
    /*e PRESAsynchronousPublisherQosPolicy */
    PRES_ASYNCHRONOUS_PUBLISHER_QOS_POLICY,

    /*e PRESTransportPriorityQosPolicy */
    PRES_TRANSPORT_PRIORITY_QOS_POLICY,

    /*e PRESLifespanQosPolicy */
    PRES_LIFESPAN_QOS_POLICY,

    /*e PRESDurabilityServiceQosPolicy */
    PRES_DURABILITY_SERVICE_QOS_POLICY,

    /*e PRESPublishModeQosPolicy */
    PRES_PUBLISH_MODE_QOS_POLICY
} PRESQosPolicyId;

struct PRESQosPolicyCount {
    /*e
      ID for a participant qos policy.
     */
    PRESQosPolicyId policyId;
    /*e
      Number of times in which the qos is incompatible.
     */
    RTI_INT32 count;
};


/*e \ingroup PRESStatusModule 
  Policy index for reliability qos
*/
  #define PRES_INCOMPATIBLE_RELIABILITY_QOS_POLICY_INDEX (0)
/*e \ingroup PRESStatusModule 
  Policy index for ownership qos
*/
  #define PRES_INCOMPATIBLE_OWNERSHIP_QOS_POLICY_INDEX (1)
/*e \ingroup PRESStatusModule 
  Policy index for presentation qos
*/
  #define PRES_INCOMPATIBLE_PRESENTATION_QOS_POLICY_INDEX (2)
/*e \ingroup PRESStatusModule 
  Policy index for liveliness qos
*/
  #define PRES_INCOMPATIBLE_LIVELINESS_QOS_POLICY_INDEX (3)
/*e \ingroup PRESStatusModule 
  Policy index for durability qos
*/
  #define PRES_INCOMPATIBLE_DURABILITY_QOS_POLICY_INDEX (4)
/*e \ingroup PRESStatusModule 
  Policy index for deadline qos
*/
  #define PRES_INCOMPATIBLE_DEADLINE_QOS_POLICY_INDEX (5)
/*e \ingroup PRESStatusModule 
  Policy index for latency budget qos
*/
  #define PRES_INCOMPATIBLE_LATENCY_BUDGET_QOS_POLICY_INDEX (6)
/*e \ingroup PRESStatusModule 
  Policy index for destination order qos
*/
  #define PRES_INCOMPATIBLE_DESTINATION_ORDER_QOS_POLICY_INDEX (7)
/*e \ingroup PRESStatusModule 
  The maximum number of QoS that can be incompatible between reader and
  writer pair.
*/
  #define PRES_INCOMPATIBLE_QOS_POLICY_MAX (8)


  /*e \ingroup PRESStatusModule 
   * Queue event index for queue empty
   */
  #define PRES_QUEUE_EMPTY_QUEUE_EVENT_INDEX     (0)
  /*e \ingroup PRESStatusModule 
   * Queue event index for queue full
   */
  #define PRES_QUEUE_FULL_QUEUE_EVENT_INDEX      (1)
  /*e \ingroup PRESStatusModule 
   * Queue event index for low water mark
   */
  #define PRES_LOW_WATER_MARK_QUEUE_EVENT_INDEX  (2)
  /*e \ingroup PRESStatusModule 
   * Queue event index for high water mark
   */
  #define PRES_HIGH_WATER_MARK_QUEUE_EVENT_INDEX (3)
  /*e \ingroup PRESStatusModule 
   * The maximum number of (publication) reliable queue events.
   */
  #define PRES_QUEUE_EVENT_MAX                   (4)

typedef enum {
    /*e 
      Invalid queue event
    */
    PRES_INVALID_QUEUE_EVENT = -1,
    /*e 
      Queue empty (i.e. no unacknowledged samples)
    */
    PRES_QUEUE_EMPTY_QUEUE_EVENT = PRES_QUEUE_EMPTY_QUEUE_EVENT_INDEX,
    /*e
      Queue full (i.e. all available samples are unacknowledged)
    */
    PRES_QUEUE_FULL_QUEUE_EVENT = PRES_QUEUE_FULL_QUEUE_EVENT_INDEX,
    /*e 
      Low water mark (i.e. number of unacknowledged samples has decreased
      such that it has reached or fallen below user-specified low water mark.
    */
    PRES_LOW_WATER_MARK_QUEUE_EVENT = PRES_LOW_WATER_MARK_QUEUE_EVENT_INDEX,
    /*e 
      High water mark (i.e. number of unacknowledged samples has dincreased
      such that it has reached or surpassed user-specified high water mark.
    */
    PRES_HIGH_WATER_MARK_QUEUE_EVENT = PRES_HIGH_WATER_MARK_QUEUE_EVENT_INDEX
} PRESQueueEventId;

struct PRESQueueEventCount {
    /*e
      ID for a (publication) reliable queue event.
     */
    PRESQueueEventId eventId;
    /*e
      Number of times the queue event has occurred.
     */
    RTI_INT32 count;
    /*e
      The incremental number of times the queue event has occurred since the
      last time the listener was called or the status was read.
     */
    RTI_INT32 countChange;
};

struct PRESSampleLostStatus {
    /*e
      Total cumulative count of all samples lost across of instances of topics
      subscribed by the subscriber
    */
    RTI_INT32 totalCount;
    /*e
      The incremental number of samples lost since the last time the
      listener was called or the status was read.
    */
    RTI_INT32 totalCountChange;
};

struct PRESSampleRejectedStatus {
    /*e
      Total cumulative count of all samples rejected by the data reader.
    */
    RTI_INT32 totalCount;
    /*e
      The incremental number of samples rejected since the last time the
      listener was called or the status was read.
    */
    RTI_INT32 totalCountChange;
    /*e
      Reason for rejecting the last sample rejected
    */
    PRESSampleRejectedStatusKind lastReason;
    /*e
      Handle to the instance being updated by the last sample that was rejected.
     */
    struct PRESInstanceHandle lastInstanceHandle;
};

struct PRESInconsistentTopicStatus {
    /*e
     * Total count.
     */
    RTI_INT32 totalCount;
    
    /*e
     * Total count change.
     */
    RTI_INT32 totalCountChange;
};

struct PRESLivelinessChangedStatus {
    /*e
      The total count of currently active data writers that write the topic
      the data reader readers
    */
    RTI_INT32 activeCount;
    /*e
      The total count of currently inactive data writers that write the topic
      the data reader reads
    */
    RTI_INT32 inactiveCount;
    /*e
      The change in the active count since the last time the listener was
      called or the status was read.
     */
    RTI_INT32 activeCountChange;
    /*e
      The change in the inactive count since the last time the listeenr was
      called or the status was read
    */
    RTI_INT32 inactiveCountChange;

    /*e Last instance of the remote writer whose liveliness has changed */
    struct PRESInstanceHandle lastInstanceHandle;
};

struct PRESRequestedDeadlineMissedStatus {
    /*e
      Total cumulative count of the deadlines detected for any instance
      read by the data reader
    */
    RTI_INT32 totalCount;
    /*e
      The incremental number of deadlines detected since the last time
      the listener was called or the status was read.
    */
    RTI_INT32 totalCountChange;
    /*e
      Handle to the last instance in the data reader for which a deadline was
      detected
    */
    struct PRESInstanceHandle lastInstanceHandle;
};

struct PRESRequestedIncompatibleQosStatus {
    /*e
      Total cumulative count taht concerned data reader discovered a
      data writer for the same topic with an offered qos that is
      incompatible with that requested by the data reader
    */
    RTI_INT32 totalCount;
    /*e
      The change in total count since the last time the listener was
      called or the status was read
     */
    RTI_INT32 totalCountChange;
    /*e
      The policy id of one of the policies that was found to be incompatible
      the last me an incompatibility was detected.
     */
    PRESQosPolicyId lastPolicyId;
    /*e
      A list containing for each policy the total number of times that 
      the concerned data reader discovered a data writer for the
      same topic with an offered qos that is incompatible with that requested
      by the data reader.
    */
    struct PRESQosPolicyCount policies[PRES_INCOMPATIBLE_QOS_POLICY_MAX];
};

struct PRESLivelinessLostStatus {
    /*e
      Total cumulative count of hte number of times the data writer failed
      to actively signal its liveliness within the offered liveliness period.
     */
    RTI_INT32 totalCount;
    /*e
      The change in total count since the last itme the listener was called
      or the status was read.
     */
    RTI_INT32 totalCountChange;
};

struct PRESOfferedDeadlineMissedStatus {
    /*e
      The total cumulative count of the number of times the data writer failed
      to write within its offered deadline.
     */
    RTI_INT32 totalCount;
    /*e
      The change in total count since the last time the listener was
      called or the status was read.
    */
    RTI_INT32 totalCountChange;
    /*e
      Handle to the last instance in the data writer for which an offered
      deadline was missed.
     */
    struct PRESInstanceHandle lastInstanceHandle;
};

struct PRESOfferedIncompatibleQosStatus {
    /*e
      The total cumulative count the concerned data writer discovered a
      data reader for the same topic with a requested QoS that is 
      incompatible with that offered by the data writer.
     */
    RTI_INT32 totalCount;
    /*e
      The change in total count since the last time the listener was
      called or the status was read.
     */
    RTI_INT32 totalCountChange;
    /*e
      The policy ID of one of the policies that was found to be incompatible
      the last time an incompatiblity was detected.
    */
    PRESQosPolicyId lastPolicyId;
    /*e
      A list containing for each policy the total numbre of times that
      the concerned data writer discovered a data reader for the same topic
      with a requested QoS that is incompatible with
      that offered by the data writer
    */
    struct PRESQosPolicyCount policies[PRES_INCOMPATIBLE_QOS_POLICY_MAX];
};

struct PRESLivelinessUpdatedStatus {
    /*e
      Last guid of the remote writer whose liveliness has be updated.
    */
    struct MIGRtpsGuid lastGuid;
};

struct PRESPublicationMatchStatus {
    /*e
      The total number of times the writer has matched a remote reader.
     */
    RTI_INT32 totalCount;
    /*e
      The change in totalCount since the last time the listener was
      called or the status was read.
     */
    RTI_INT32 totalCountChange;
    /*e
      The number of remote readers with which the writer is currently matched.
     */
    RTI_INT32 currentCount;
    /*e
      The change in currentCount since the last time the listener was
      called or the status was read.
     */
    RTI_INT32 currentCountChange;

    /*e last instance of last remote reader to trigger a status update. */
    struct PRESInstanceHandle lastSubscriptionHandle;
};

struct PRESSubscriptionMatchStatus {
    /*e
      The total number of times the eader has matched a remote writer.
     */
    RTI_INT32 totalCount;
    /*e
      The change in totalCount since the last time the listener was
      called or the status was read.
     */
    RTI_INT32 totalCountChange;
    /*e
      The number of remote writers with which the reader is currently matched.
     */
    RTI_INT32 currentCount;
    /*e
      The change in currentCount since the last time the listener was
      called or the status was read.
     */
    RTI_INT32 currentCountChange;

    /*e instance handle of last remote writer to trigger a status update. */
    struct PRESInstanceHandle lastPublicationHandle;
};

struct PRESPublicationReliableQueueStatus {
    /*e
      The id of the last event on the reliable queue.
     */
    PRESQueueEventId lastQueueEventId;
    /*e
      A list containing for each queue event the total number of times that 
      event has occurred and the incremental number of times since the
      listener was called or the status was read.
    */
    struct PRESQueueEventCount queueEvents[PRES_QUEUE_EVENT_MAX];
    /*e
      The total number of unacknowledged samples in the reliable writer queue.
     */
    RTI_INT32 unacknowledgedSampleCount;
};

typedef enum {
    /*e
      Indicates invalid sample state
     */
    PRES_SAMPLE_STATE_INVALID = 0,
    /*e
      Indicates read sample state
     */
    PRES_SAMPLE_STATE_READ = 0x0001 << 0,
    /*e
      Indicates not read sample state
     */
    PRES_SAMPLE_STATE_NOT_READ = 0x0001 << 1
} PRESSampleStateKind;

typedef enum {
    /*e
      Indicates invalid view state
     */
    PRES_VIEW_STATE_INVALID = 0,
    /*e
      Indicates new view state
     */
    PRES_VIEW_STATE_NEW = 0x0001 << 0,
    /*e
      Indicates not new view state
    */
    PRES_VIEW_STATE_NOT_NEW = 0x0001 << 1
} PRESViewStateKind;

typedef enum {
    /*e
      Indicates invalid instance state
    */
    PRES_INSTANCE_STATE_INVALID = 0,
    /*e
      Indicates alive instance state
    */
    PRES_INSTANCE_STATE_ALIVE = 0x0001 << 0,
    /*e
      Indicates not alive disposed instance state
    */
    PRES_INSTANCE_STATE_NOT_ALIVE_DISPOSED = 0x0001 << 1,
    /*e
      Indicates not alive no writers instance state
    */
    PRES_INSTANCE_STATE_NOT_ALIVE_NO_WRITERS = 0x0001 << 2
} PRESInstanceStateKind;

struct PRESIeeeTime {
    /*e Seconds */
    RTI_INT32 sec;
    /*e Nano seconds */
    RTI_UINT32 nanosec;
};


/*e \ingroup PRESCommonModule
  Invalid IEEE time
*/
#define PRES_IEEE_TIME_INVALID { -1L, 0UL }


extern	int PRESIeeeTime_compare(const struct PRESIeeeTime left,
			 const struct PRESIeeeTime right);

struct PRESOctetGuid {
    RTI_UINT8 value[16];
};


extern	void PRESOctetGuid_from_mig_guid(
        struct PRESOctetGuid * self,
        const struct MIGRtpsGuid * other);

struct PRESSampleInfo {
    /*e
      Sample state of sample
    */
    RTI_UINT32 sampleState;
    /*e
      View state of instance
    */
    RTI_UINT32 viewState;
    /*e
      Instance state of instance
     */
    RTI_UINT32 instanceState;
    /*e
      Time when sample was sent
     */
    struct PRESIeeeTime sourceTimestamp;
    /*e
      Handle to the sample instance
     */
    struct PRESInstanceHandle instanceHandle;
    /*e
      Handle to the writer that modified the instance
     */
    struct PRESInstanceHandle publicationHandle;
    /*e
      Disposed generation count of instance at sample reception
    */
    RTI_INT32 disposedGenerationCount;
    /*e
      No writers generation count of instance at sample reception
    */
    RTI_INT32 noWritersGenerationCount;
    /*e
      Sample rank of sample
    */
    RTI_INT32 sampleRank;
    /*e
      Generation rank of sample
    */
    RTI_INT32 generationRank;
    /*e
      Absolute generation rank of sample
    */
    RTI_INT32 absoluteGenerationRank;
    /*e
      Denotes whether there is valid data
      This has to match DDS_Boolean
    */
    RTICdrBoolean hasData;
    /*e
      Time when sample was received
     */
    struct PRESIeeeTime receptionTimestamp;
    /*e
      Sequence number
    */
    struct REDASequenceNumber publicationSequenceNumber;
    /*e
      Sequence number
    */
    struct REDASequenceNumber receptionSequenceNumber;
    /*e
      Publication virtual guid
    */
    struct PRESOctetGuid publicationVirtualGuid;
    /*e
      Publication virtual sequence number
    */
    struct REDASequenceNumber publicationVirtualSequenceNumber;
};

struct PRESLoanedSampleInfo {
    struct PRESSampleInfo sampleInfo;
    void* userObject;
    void* internalObject;
};

typedef void
(*PRESLoanedSampleInfoListenerUserObjectInitializeFnc)(
    void** userObject, void* param);

typedef void
(*PRESLoanedSampleInfoListenerUserObjectFinalizeFnc)(
    void** userObject, void* param);

struct PRESLoanedSampleInfoListener {
    PRESLoanedSampleInfoListenerUserObjectInitializeFnc userObjectInitializeFnc;
    void* userObjectInitializeParam;

    PRESLoanedSampleInfoListenerUserObjectFinalizeFnc userObjectFinalizeFnc;
    void* userObjectFinalizeParam;
};



/*e \ingroup PRESSampleStateModule
  Read sample state mask
 */
  #define PRES_SAMPLE_STATE_MASK_BIT_READ          (0x00000001)
/*e \ingroup PRESSampleStateModule
  Not read sample state mask
 */
  #define PRES_SAMPLE_STATE_MASK_BIT_NOT_READ      (0x00000002)
/*e \ingroup PRESSampleStateModule
  All sample states mask
 */
  #define PRES_SAMPLE_STATE_MASK_ALL               (0xffffffff)

/*e \ingroup PRESViewStateModule
  New view state mask
 */
  #define PRES_VIEW_STATE_MASK_BIT_NEW                      (0x00000001)
/*e \ingroup PRESViewStateModule
  Not new view state mask
 */
  #define PRES_VIEW_STATE_MASK_BIT_NOT_NEW                  (0x00000002)
/*e \ingroup PRESViewStateModule
  All view states mask
 */
  #define PRES_VIEW_STATE_MASK_ALL                          (0xffffffff)

/*e \ingroup PRESInstanceStateModule
  Alive instance state mask
 */
  #define PRES_INSTANCE_STATE_MASK_BIT_ALIVE                (0x00000001)
/*e \ingroup PRESInstanceStateModule
  Not alive disposed instance state mask
 */
  #define PRES_INSTANCE_STATE_MASK_BIT_NOT_ALIVE_DISPOSED   (0x00000002)
/*e \ingroup PRESInstanceStateModule
  Not alive no writers instance state mask
 */
  #define PRES_INSTANCE_STATE_MASK_BIT_NOT_ALIVE_NO_WRITERS (0x00000004)
/*e \ingroup PRESInstanceStateModule
  Not alive instance state mask
 */
  #define PRES_INSTANCE_STATE_MASK_BIT_NOT_ALIVE            (0x00000006)
/*e \ingroup PRESInstanceStateModule
  All instance states mask
 */
  #define PRES_INSTANCE_STATE_MASK_ALL                      (0xffffffff)

typedef RTI_UINT32 PRESSampleStateMask;

typedef RTI_UINT32 PRESViewStateMask;

typedef RTI_UINT32 PRESInstanceStateMask;


/*e \ingroup PRESErrorModule
  No error
 */
  #define PRES_RETURN_OK /*                   (0) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 0)
/*e \ingroup PRESErrorModule
  Generic error
 */
  #define PRES_RETURN_ERROR /*                (1) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 1)
/*e \ingroup PRESErrorModule
  Unsupported feature
 */
  #define PRES_RETURN_UNSUPPORTED /*          (2) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 2)
/*e \ingroup PRESErrorModule
  Running out of resources
 */
  #define PRES_RETURN_OUT_OF_RESOURCES /*     (3) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 3)
/*e \ingroup PRESErrorModule
  entity not enabled
 */
  #define PRES_RETURN_NOT_ENABLED /*          (4) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 4)
/*e \ingroup PRESErrorModule
  Cannot change immutable policy
 */
  #define PRES_RETURN_IMMUTABLE_POLICY /*     (5) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 5)
/*e \ingroup PRESErrorModule
  Policies are inconsistent
 */
  #define PRES_RETURN_INCONSISTENT_POLICY /*  (6) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 6)
/*e \ingroup PRESErrorModule
  Try to destroy entities that is not empty
 */
  #define PRES_RETURN_ENTITY_NOT_EMPTY /*     (7) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 7)
/*e \ingroup PRESErrorModule
  Entity not found in factory
 */
  #define PRES_RETURN_NOT_FOUND /*            (8) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 8)
/*e \ingroup PRESErrorModule
  Instance not found
 */
  #define PRES_RETURN_NO_INSTANCE /*          (9) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 9)
/*e \ingroup PRESErrorModule
  Timeout
 */
  #define PRES_RETURN_TIMEOUT /*              (10) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 10)
/*e \ingroup PRESErrorModule
  record already exists
 */
  #define PRES_RETURN_ALREADY_EXISTS /*       (11) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 11)
/*e \ingroup PRESErrorModule
  Source timestamp is out of order.  */
  #define PRES_RETURN_TIMESTAMP_OUT_OF_ORDER /* (12) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 12)
/*e \ingroup PRESErrorModule
  Bad parameter.
 */
  #define PRES_RETURN_BAD_PARAMETER /* (13) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 13)
/*e \ingroup PRESErrorModule
  Waitset has a thread blocking on it already.
 */
  #define PRES_RETURN_WAITSET_BLOCKED /* (14) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 14)
/*e \ingroup PRESErrorModule
  Condition not attached to waitset
 */
  #define PRES_RETURN_CONDITION_NOT_ATTACHED /* (15) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 15)
/*e \ingroup PRESErrorModule
  No coherent set.
 */
  #define PRES_RETURN_NO_COHERENT_SET /* (16) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 16)
/*e \ingroup PRESErrorModule
  No call to suspendPublications.
 */
  #define PRES_RETURN_NO_SUSPEND_PUBLICATIONS_CALL /* (17) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 17)
/*e \ingroup PRESErrorModule
  No coherent set.
 */
  #define PRES_RETURN_NO_BEGIN_ACCESS_CALL /* (18) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 18)
/*e \ingroup PRESErrorModule
  entity ignored by user
 */
  #define PRES_RETURN_IGNORED /*          (19) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 19)
/*e \ingroup PRESErrorModule
  Precondition not met
 */
  #define PRES_RETURN_PRECONDITION_NOT_MET /* (20) */ \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_PRES, SUBMODULE_PRES_COMMON, 20)

typedef RTI_UINT32 PRESServiceId;


/*e \ingroup PRESServiceIdModule
  Unknown service id
 */
#define PRES_SERVICE_ID_UNKNOWN (0)

typedef union RTIOsapiAlignmentUnionOfAllDataTypes PRESWord;

typedef enum {
    /*e
     * Created
     */
    PRES_ENTITY_STATE_CREATED,
    
    /*e
     * Enabled.
     */
    PRES_ENTITY_STATE_ENABLED,

    /*e
     * Ready to be destroyed.
     */
    PRES_ENTITY_STATE_PREDESTROY,

    /*e
     * Destroyed.
     */
    PRES_ENTITY_STATE_DESTROYED
    
} PRESEntityState;

struct PRESStatusCondition {
    struct PRESCondition _base;
    PRESStatusKindMask _statusMask;
    PRESStatusKindMask _resetStatusMask;
};

struct PRESEntity {
    /*i enabled state */
    PRESEntityState state;
    /*i Global unique identifier for the entity */
    struct MIGRtpsGuid guid;
    /*i Participant to which entity belongs */
    struct PRESParticipant *participant;
    /*i status condition which belongs to this entity*/
    struct PRESStatusCondition statusCondition;
    /*i Pointer to user object stored with entity */
    PRESWord *userObject;
};

struct PRESLocalEndpoint {
    /*e Endpoint extends entity */
    struct PRESEntity parent;
    /*i The group to which teh endpoint belongs */
    struct PRESGroup *_group;
    /*i References the record in the Participant LocalTopic table containing
       the topic and associated type of the endpoint */
    struct REDAWeakReference _localTopicWR;
    /*i References the record in the Participant TopicType table containing
       the topic and associated type of the endpoint
       This value is invalid before the topic is enabled.
    */
    struct REDAWeakReference _topicTypeWR;
    /*i The service to which the endpoint belongs */
    struct PRESService *_service;
    /*i The service keeps its own table of endpoints this is a WR into that 
      other table */
    struct REDAWeakReference _endpointWR;

    /* putting in a hack, which will be addressed later.
     * for making getStatusChanges consistent
     */
     RTIBool _onDataAvailableStatusFlag;
};

struct PRESLocalEndpointProperty {
    /*e
      ID of service from which the local endpoint is created
    */
    int serviceId;

    /*e transport priority for netio send/receive resource created for
      this endpoint */
    /*e mutable, unsupported */
    struct PRESTransportPriorityQosPolicy transportPriority;

    /*e desired transport plugin alias for this endpoint */
    struct RTINetioAliasList transportAliasList;
};


/*e \ingroup PRESEntityModule
  Default value of local endpoint property
*/
#define PRES_LOCAL_ENDPOINT_PROPERTY_DEFAULT {   \
    PRES_SERVICE_ID_UNKNOWN,		         \
    {0}, /* transportPriority */                 \
    RTI_NETIO_ALIAS_LIST_DEFAULT, /*transportAliasList */ \
}

struct PRESRemoteEndpointProperty {
    /*e
      ID of service from which the remote endpoint is asserted.
    */
    int serviceId;
};


/*e \ingroup PRESEntityModule
  Default value of remote endpoint property
*/
#define PRES_REMOTE_ENDPOINT_PROPERTY_DEFAULT {  \
    PRES_SERVICE_ID_UNKNOWN          \
}

struct PRESGroup {
    /*e
      PRESGroup is one kind of entity
     */
    struct PRESEntity _parent;
    /*i
      Weak reference tot he group record in the group table.
     */
    struct REDAWeakReference _groupWR;
    /*i
      EA used by the group.
     */
    struct REDAExclusiveArea *_groupEa;
    /*i
      Pointer to the service from which the group is created
    */
    struct PRESService *_service;

    /* putting in a hack, which will be addressed later.
     * for making getStatusChanges consistent
     */
     RTIBool _onDataOnReadersStatusFlag;
};

struct PRESGroupProperty {
    /*e
      ID of the service that the group is created from
    */
    int serviceId;
};


/*e \ingroup PRESEntityModule
  Default value of group property
*/
#define PRES_GROUP_PROPERTY_DEFAULT {  \
    PRES_SERVICE_ID_UNKNOWN /* serviceId */         \
}

typedef enum {
    /*e
      normal user writer group
    */
    PRES_GROUP_SUFFIX_NORMAL_USER_WRITER_GROUP = 0x08,
    /*e
      normal user reader group
    */
    PRES_GROUP_SUFFIX_NORMAL_USER_READER_GROUP = 0x09,
    
    /*e
      reserved user writer group
    */
    PRES_GROUP_SUFFIX_RESERVED_USER_WRITER_GROUP = 0x48,
    /*e
      reserved user reader group
    */
    PRES_GROUP_SUFFIX_RESERVED_USER_READER_GROUP = 0x49,

    /*e
      normal meta writer group
    */
    PRES_GROUP_SUFFIX_NORMAL_META_WRITER_GROUP = 0x88,
    /*e
      normal meta reader group
    */
    PRES_GROUP_SUFFIX_NORMAL_META_READER_GROUP = 0x89,
    
    /*e
      reserved meta writer group
    */
    PRES_GROUP_SUFFIX_RESERVED_META_WRITER_GROUP = 0xc8,
    /*e
      reserved meta reader group
    */
    PRES_GROUP_SUFFIX_RESERVED_META_READER_GROUP = 0xc9,

    /*e
      normal user virtual reader group
    */
    PRES_GROUP_SUFFIX_NORMAL_USER_VIRTUAL_READER_GROUP = 0x3e
} PRESGroupSuffix;

typedef enum {
    /*e
      normal user topic
    */
    PRES_TOPIC_SUFFIX_NORMAL_USER_TOPIC = 0x0a,
    /*e
      reserved user topic
    */
    PRES_TOPIC_SUFFIX_RESERVED_USER_TOPIC = 0x4a,
    /*e
      normal meta topic
    */
    PRES_TOPIC_SUFFIX_NORMAL_META_TOPIC = 0x8a,
    /*e
      reserved meta topic
    */
    PRES_TOPIC_SUFFIX_RESERVED_META_TOPIC = 0xca,

    /*e
      normal user virtual topic
    */
    PRES_TOPIC_SUFFIX_NORMAL_USER_VIRTUAL_TOPIC = 0x3f
} PRESTopicSuffix;

extern PRESDllExport
RTIBool PRESTopicSuffix_isTopic(MIGRtpsObjectSuffix osx);

struct PRESTopicImmutableProperty {
    /*e
     * Durability QoS policy.
     */
    struct PRESDurabilityQosPolicy durability;
    
    /*e Durability service QoS policy. */
    struct PRESDurabilityServiceQosPolicy durabilityService;
    
    /*e
     * Ownership QoS policy.
     */
    struct PRESOwnershipQosPolicy ownership;
    
    /*e
     * Liveliness QoS policy.
     */
    struct PRESLivelinessQosPolicy liveliness;
    
    /*e
     * Reliability QoS policy.
     */
    struct PRESReliabilityQosPolicy reliability;
    
    /*e
     * Destination order QoS policy.
     */
    struct PRESDestinationOrderQosPolicy destinationOrder;
    
    /*e
     * History QoS policy.
     */
    struct PRESHistoryQosPolicy history;
    
    /*e
     * Resource limits QoS policy.
     */
    struct PRESResourceLimitsQosPolicy resourceLimits;

    /*e
        whether this topic need to be destroyed when deleteContainedEntities
        is called on factroy*/
    RTIBool explicitDestroyOnly;
};

struct PRESTopicMutableProperty {
    /*e
     * Deadline QoS policy.
     */
    struct PRESDeadlineQosPolicy deadline;
    
    /*e
     * Latency budget QoS policy.
     */
    struct PRESLatencyBudgetQosPolicy latencyBudget;

    /*e
     * Transport priority qos policy.
     */
    struct PRESTransportPriorityQosPolicy transportPriority;

    /*e
     * Lifespan qos policy.
     */
    struct PRESLifespanQosPolicy lifespan;

    /*e
     * Topic data qos policy.
     */
    struct PRESTopicDataQosPolicy topicData;
};

struct PRESTopicProperty {
    /*e
     * The immutable portion of a topic property.
     */
    struct PRESTopicImmutableProperty immutable_part;
    
    /*e
     * The mutable portion of a topic property.
     */
    struct PRESTopicMutableProperty mutable_part;
};


/*e \ingroup PRESEntityModule
  Default value of topic property.
*/
#define PRES_TOPIC_PROPERTY_DEFAULT {                               \
  { /* immutable_part */ \
   {PRES_VOLATILE_DURABILITY_QOS}, /* durability */                 \
   { /* durabilityServiceQosPolicy */ \
       RTI_NTP_TIME_ZERO, /* serviceCleanupDelay */ \
       {PRES_KEEP_LAST_HISTORY_QOS, PRES_NONE_REFILTER_QOS, 1}, /* history */ \
       { /* resourceLimits */ \
         REDA_FAST_BUFFER_POOL_GROWTH_PROPERTY_DEFAULT, /* sampleCount */ \
         REDA_FAST_BUFFER_POOL_GROWTH_PROPERTY_DEFAULT, /* instanceCount */ \
         REDA_FAST_BUFFER_POOL_UNLIMITED /* maxSamplesPerInstance */ \
       } \
   }, /* durabilityServiceQosPolicy */ \
   {PRES_SHARED_OWNERSHIP_QOS}, /* ownership */                     \
   {PRES_AUTOMATIC_LIVELINESS_QOS, RTI_NTP_TIME_MAX},/* liveliness */\
   {PRES_BEST_EFFORT_RELIABILITY_QOS}, /* reliability */            \
   {PRES_BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS,                 \
    PRES_INSTANCE_SCOPE_DESTINATIONORDER_QOS}, /* destinationOrder */ \
   {PRES_KEEP_LAST_HISTORY_QOS, PRES_NONE_REFILTER_QOS, 1}, /* history */ \
   { /* resourceLimits */ \
     REDA_FAST_BUFFER_POOL_GROWTH_PROPERTY_DEFAULT, /* sampleCount */ \
     REDA_FAST_BUFFER_POOL_GROWTH_PROPERTY_DEFAULT, /* instanceCount */ \
     REDA_FAST_BUFFER_POOL_UNLIMITED /* maxSamplesPerInstance */ \
   }, \
   RTI_FALSE /* explicitDestroyOnly */ \
  } /* end immutable */,                                            \
  { /* mutable_part */ \
   {RTI_NTP_TIME_MAX} /* deadline */,                                      \
   {RTI_NTP_TIME_ZERO} /* latencyBudget */,                                \
   {0} /* transportPriority */,                                            \
   {RTI_NTP_TIME_MAX} /* lifespan */,                                      \
   {{0, 0, NULL}} /* topicData */ \
  } /* end mutable */                                                    \
}

struct PRESContentFilteredTopicMutableProperty {
	/*e Filtering policy
         */	
	struct PRESContentFilterQosPolicy filterPolicy;
};


/*e \ingroup PRESEntityModule
  Default value of content filter Qos policy property.
*/
#define PRES_CONTENT_FILTER_QOS_POLICY_DEFAULT \
{0,\
 NULL,\
 (PRESContentFilterEvaluate)NULL,\
 (PRESContentFilterEvaluate)NULL,\
 (PRESContentFilterFinalize)NULL,\
 PRES_CONTENT_FILTER_SIGNATURE_DEFAULT,\
 REDA_WEAK_REFERENCE_INVALID,\
 RTI_FALSE}

#define PRES_CONTENTFILTEREDTOPIC_PROPERTY_MUTABLE_DEFAULT {\
PRES_CONTENT_FILTER_QOS_POLICY_DEFAULT\
}


struct PRESContentFilteredTopicImmutableProperty {
        /*e A compile function for the filter expression 
	 */
	PRESContentFilterCompile compile;
        /*e An eval function that operates on a sample
         */
        PRESContentFilterEvaluate evaluate;
        /*e An eval function that operates on a sample serialized
         */
        PRESContentFilterEvaluate evaluateOnSerialized;
        /*e Function called when a policy is no longer used
         */
	PRESContentFilterFinalize finalizeFunc;
        /*e An handle pass to the compile function
         */
	void *handle;
};

extern void* PRESContentFilterSQLCompile(/* RTI_UINT32,void*,const char*,const char**,RTI_INT32,const void*,void*,RTI_INT32* */);

extern RTI_INT32 PRESContentFilterSQLEvaluate(/* RTI_UINT32,void*,void*,const void* */);

extern void PRESContentFilterSQLFinalize(/* RTI_UINT32,void*,void* */);


/*e \ingroup PRESEntityModule
  Name of the default content filtering function
*/
#define PRES_CONTENTFILTEREDTOPIC_DEFAULT_FILTERNAME "RTISQLFILTER"

/*e \ingroup PRESEntityModule
  Maximum lenght of the content filtered topic properties sent over
  the wire. This length includes the length of the content filter name (CFN)
  , related topic name (RTN), filter expression (FE), filter parameters (FP) 
  and filter name (FN). The following expression must always be valid. Note that 
  length(FE) means the number of non-null octets + 1 for the null terminator
  length(CFN) + length(RTP) + length(FN)+length(FE)+length(FP) 
        < PRES_CONTENTFILTER_PROPERTY_DATA_LEN_MAX
*/
#define PRES_CONTENT_FILTER_PROPERTY_LEN_MAX  256

#define PRES_CONTENTFILTEREDTOPIC_PROPERTY_IMMUTABLE_DEFAULT {\
PRESContentFilterSQLCompile                  ,\
PRESContentFilterSQLEvaluate                 ,\
PRESContentFilterSQLEvaluateOnSerialized     ,\
PRESContentFilterSQLFinalize                 ,\
NULL                                          \
}

struct PRESContentFilteredTopicProperty {
    /*e
     * The immutable portion of a content filtered topic property.
     */
    struct PRESContentFilteredTopicImmutableProperty immutable_part;
    
    /*e
     * The mutable portion of a content filtered topic property.
     */
    struct PRESContentFilteredTopicMutableProperty mutable_part;
};


/*e \ingroup PRESEntityModule
  Default value of topic property.
*/
#define PRES_CONTENTFILTEREDTOPIC_PROPERTY_DEFAULT { \
PRES_CONTENTFILTEREDTOPIC_PROPERTY_IMMUTABLE_DEFAULT, \
PRES_CONTENTFILTEREDTOPIC_PROPERTY_MUTABLE_DEFAULT   \
}

struct PRESContentFilterProperty {
    /*e
      Sequence of octet representating user data
    */
    struct PRESSequenceOctet propertyData;
    char *contentFilterName;
    char *relatedTopicName;
    char *filterName;
    char *filterExpression;	
    char *filterParameters;
    int parameterLength;
};


#define PRES_CONTENT_FILTER_PROPERTY_DEFAULT \
{{0,0,NULL},NULL,NULL,NULL,NULL,NULL,0}

typedef enum {
    PRES_FLOWCONTROLLER_SCHED_POLICY_EDF,
    PRES_FLOWCONTROLLER_SCHED_POLICY_RR
} PRESFlowControllerSchedPolicy;

struct PRESFlowControllerProperty {
    PRESFlowControllerSchedPolicy schedPolicy;
    struct RTIEventJobDispatcherTokenBucketProperty bucketProperty;
};


#define PRES_FLOW_CONTROLLER_PROPERTY_DEFAULT \
{ \
    PRES_FLOWCONTROLLER_SCHED_POLICY_EDF, \
    RTI_EVENT_JOB_DISPATCHER_TOKEN_BUCKET_PROPERTY_DEFAULT \
}

struct PRESLocalEndpointConfigListener;

typedef void
(*PRESLocalEndpointConfigListenerOnAfterLocalEndpointEnabledCallback)(
    const struct PRESLocalEndpointConfigListener *me,
    const struct MIGRtpsGuid *guid,
    const struct PRESLocalEndpointProperty *property,
    struct REDAWorker *worker);

typedef void
(*PRESLocalEndpointConfigListenerOnAfterLocalEndpointDestructionCallback)(
    const struct PRESLocalEndpointConfigListener *me,
    const struct MIGRtpsGuid *guid,
    struct REDAWorker *worker);

typedef void
(*PRESLocalEndpointConfigListenerOnAfterLocalEndpointPropertyChangedCallback)(
    const struct PRESLocalEndpointConfigListener *me,
    const struct MIGRtpsGuid *guid,
    const struct PRESLocalEndpointProperty *newProp,
    struct REDAWorker *worker);

struct PRESLocalEndpointConfigListener {
    PRESLocalEndpointConfigListenerOnAfterLocalEndpointEnabledCallback
        onAfterLocalEndpointEnabled;
    PRESLocalEndpointConfigListenerOnAfterLocalEndpointPropertyChangedCallback
    onAfterLocalEndpointPropertyChanged;
    PRESLocalEndpointConfigListenerOnAfterLocalEndpointDestructionCallback
    onAfterLocalEndpointDestruction;
};

struct PRESRemoteEndpointConfigListener;

typedef void
(*PRESRemoteEndpointConfigListenerOnAfterRemoteEndpointCreationCallback)(
    const struct PRESRemoteEndpointConfigListener *me,
    const struct MIGRtpsGuid *guid,
    const struct PRESRemoteEndpointProperty *property,
    struct REDAWorker *worker);

typedef void
(*PRESRemoteEndpointConfigListenerOnAfterRemoteEndpointDestructionCallback)(
    const struct PRESRemoteEndpointConfigListener *me,
    const struct MIGRtpsGuid *guid,
    struct REDAWorker *worker);

typedef void
(*PRESRemoteEndpointConfigListenerOnAfterRemoteEndpointPropertyChangedCallback)(
    const struct PRESRemoteEndpointConfigListener *me,
    const struct MIGRtpsGuid *guid,
    const struct PRESRemoteEndpointProperty *oldProp,
    const struct PRESRemoteEndpointProperty *newProp,
    struct REDAWorker *worker);

struct PRESRemoteEndpointConfigListener {
    PRESRemoteEndpointConfigListenerOnAfterRemoteEndpointCreationCallback
        onAfterRemoteEndpointCreation;
    PRESRemoteEndpointConfigListenerOnAfterRemoteEndpointPropertyChangedCallback onAfterRemoteEndpointPropertyChanged;
    PRESRemoteEndpointConfigListenerOnAfterRemoteEndpointDestructionCallback
    onAfterRemoteEndpointDestruction;
};

struct PRESProductVersion {
    /*e
      Major Version
    */
    RTICdrChar major;
    /*e
      Minor Version
    */
    RTICdrChar minor;
    /*e
      Release letter
    */
    RTICdrChar release;
    /*e
      Revision number
    */
    RTICdrChar revision;
};


/*e \ingroup PRESVendorSpecificParameterModule
  Default value of product version.
*/
#define PRES_PRODUCT_VERSION_DEFAULT { 0, 0, '0', 0 }
#define PRES_PRODUCT_VERSION_42c0 { 4, 2, 'c', 0 }
#define PRES_PRODUCT_VERSION_42d0 { 4, 2, 'd', 0 }
#define PRES_PRODUCT_VERSION_EARLIEST_COMPATIBLE_VERSION PRES_PRODUCT_VERSION_42d0

extern int PRESProductVersion_compare(const void* l, const void* r);

typedef enum {
    /*e
     * Matching entities.
     */
    PRES_DISCOVER_MATCHING_REMOTE_ENTITIES_PROMISCUITY = 0x0001,

    /*e
     * All entities.
     */
    PRES_DISCOVER_ALL_REMOTE_ENTITIES_PROMISCUITY = 0xFFFF
} PRESDiscoveryPluginPromiscuityKind;

typedef RTI_UINT32 PRESBuiltinEndpointMask;


#define PRES_BUILTIN_ENDPOINT_NONE  0x00000000

struct PRESOriginalWriterInfo {
    /*e
     * Original writer guid
     */
    struct MIGRtpsGuid writerGuid;
    /*e
     * Original writer sequence number
     */
    struct REDASequenceNumber sequenceNumber;
};


struct PRESOdbcDatabaseConnection;


#ifdef __cplusplus
    }	/* extern "C" */
#endif

  #include "pres/pres_common_impl.h"

#endif /* pres_common_h */
