/*
 * @(#)pres_cstReaderCollator.h    generated by: makeheader    Mon Dec  3 23:08:15 2007
 *
 *		built from:	cstReaderCollator.ifc
 */

#ifndef pres_cstReaderCollator_h
#define pres_cstReaderCollator_h


  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef reda_fastBuffer_h
    #include "reda/reda_fastBuffer.h"
  #endif
  #ifndef reda_worker_h
    #include "reda/reda_worker.h"
  #endif
  #ifndef pres_dll_h
    #include "pres/pres_dll.h"
  #endif
  #ifndef pres_common_h
    #include "pres/pres_common.h"
  #endif
  #ifndef pres_readerStatistics_h
    #include "pres/pres_readerStatistics.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif

struct PRESCstReaderCollatorRemoteWriterQueue;

struct PRESCstReaderCollator;

struct PRESCstReaderCollatorProperty {
    /*e Owner of this collator. */
    struct MIGRtpsGuid readerGuid;

    /*e Virtual Reader GUID */
    struct MIGRtpsGuid virtualReaderGuid;

    /*e Control growth in number of entries. */
    struct REDAFastBufferPoolGrowthProperty entryCount;

    /*e The maximum allowable number of entries per remote writer. */
    int maximalEntryPerRemoteWriterCount;

    /*e Control growth in number of remote writers. */
    struct REDAFastBufferPoolGrowthProperty remoteWriterCount;

    /*e Control growth in number of virtual remote writers. */
    struct REDAFastBufferPoolGrowthProperty virtualWriterCount;

    /*e The maximum allowable number of entries per instance. */
    int maximalEntryPerInstanceCount;

    /*e Control growth in number of instances. */
    struct REDAFastBufferPoolGrowthProperty instanceCount;

    /*e Control growth in number of remote writers per instance. */
    struct REDAFastBufferPoolGrowthProperty remoteWriterCountPerInstance;

    /*e Control growth in number of infos. */
    struct REDAFastBufferPoolGrowthProperty infoCount;

    /*e Control growth in number of concurrent reads. */
    struct REDAFastBufferPoolGrowthProperty outstandingReadCount;

    /*e The maximum samples that can be returned from read, to address #9375 */
    int maximalSamplesPerRead;
    /*e The reliability QoS. */
    struct PRESReliabilityQosPolicy reliabilityQos;
    /*e The presentation QoS. */
    struct PRESPresentationQosPolicy presentationQos;
    /*e The deadline QoS.
      A period set to RTI_NTP_TIME_MAX is interpreted as infinite.  In addition,
      the period may not exceed PRES_DEADLINE_QOS_POLICY_DEADLINE_PERIOD_MAX. */
    struct PRESDeadlineQosPolicy deadlineQos;
    /*e The ownership QoS. */
    struct PRESOwnershipQosPolicy ownershipQos;
    /* The destination order QoS */
    struct PRESDestinationOrderQosPolicy destinationOrderQos;
    /*e The time based filter QoS.  The minimumSeparation may not exceed 
      PRES_TIME_BASED_FILTER_QOS_POLICY_MINIMUM_SEPARATION_MAX. */
    struct PRESTimeBasedFilterQosPolicy timeBasedFilterQos;
    /*e The history QoS. */
    struct PRESHistoryQosPolicy historyQos;
    /*e The reader data lifecycle QoS. */
    struct PRESReaderDataLifecycleQosPolicy readerDataLifecycleQos;
    /*e The durability Qos */
    struct PRESDurabilityQosPolicy durabilityQos;

    /*e Restore reader queue state */
    /* This member is used when the reader state can be retrieved from a persistence storage */
    RTIBool restoreState;

    /*e Filter redundant samples */
    /* This property is used to filter redundant samples or not.
       If the value is RTI_FALSE, the reader will not keep information 
       about lastAppProcessedSn or lastCommittedSn */
    RTIBool filterRedundantSamples;

    int requestDepth;
};


  #define PRES_CST_READER_COLLATOR_PROPERTY_DEFAULT {      \
    /* readerGuid */ \
    MIG_RTPS_GUID_UNKNOWN, \
    /* virtualReaderGuid */ \
    MIG_RTPS_GUID_UNKNOWN, \
    /* entryCount */                           \
    {32, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    -1,  /* maximalEntryPerRemoteWriterCount: unlimited */ \
    /* remoteWriterCount */ \
    {2, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* virtualWriterCount */ \
    {2, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    -1,  /* maximalEntryPerInstanceCount: unlimited */     \
    /* instanceCount */                        \
    {8, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* remoteWriterCountPerInstance */ \
    {1, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* infoCount */ \
    {32, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* outstandingReadCount */ \
    {1, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    256, /* maximalSamplesPerRead */                       \
    {PRES_BEST_EFFORT_RELIABILITY_QOS},                    \
    {PRES_TOPIC_PRESENTATION_QOS,RTI_FALSE,RTI_TRUE},      \
    {RTI_NTP_TIME_MAX},                                    \
    {PRES_SHARED_OWNERSHIP_QOS},                           \
    {PRES_BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS,     \
     PRES_INSTANCE_SCOPE_DESTINATIONORDER_QOS},            \
    {RTI_NTP_TIME_ZERO},                                   \
    {PRES_KEEP_LAST_HISTORY_QOS,PRES_NONE_REFILTER_QOS,1}, \
    {RTI_NTP_TIME_MAX, RTI_NTP_TIME_MAX},/* readerDataLifecycleQos */ \
    {PRES_VOLATILE_DURABILITY_QOS,RTI_TRUE}, /* durability qos policy */\
    RTI_FALSE,RTI_FALSE, \
    0 /* requestDepth */ }


  #define PRES_CST_READER_COLLATOR_GET_FAILURE_INTERNAL (1)


  #define PRES_CST_READER_COLLATOR_GET_FAILURE_NO_INSTANCE (2)


  #define PRES_CST_READER_COLLATOR_GET_FAILURE_OUT_OF_RESOURCES (3)

extern PRESDllExport RTIBool
PRESCstReaderCollator_hasOutstandingLoans(
    struct PRESCstReaderCollator *me,
    struct REDAWorker *worker);

  
    #define PRES_CST_READER_COLLATOR_READ_TAKE_MAX_COUNT_UNLIMITED (-1)

extern PRESDllExport RTIBool
PRESCstReaderCollator_take(
    struct PRESCstReaderCollator *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount,
    int maxCount, PRESSampleStateMask sMask,
    PRESViewStateMask vMask, PRESInstanceStateMask iMask,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_read(
    struct PRESCstReaderCollator *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount,
    int maxCount, PRESSampleStateMask sMask,
    PRESViewStateMask vMask, PRESInstanceStateMask iMask,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport void
PRESCstReaderCollator_finish(
    struct PRESCstReaderCollator *me,
    void **dataArray, int dataCount,
    struct PRESLoanedSampleInfo **infoArray, int infoCount, int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_takeInstance(
    struct PRESCstReaderCollator *me, int *successReason, int *failReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount,
    int maxCount, const struct PRESInstanceHandle *handle,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask, PRESInstanceStateMask iMask,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_readInstance(
    struct PRESCstReaderCollator *me, int *successReason, int *failReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount,
    int maxCount, const struct PRESInstanceHandle *handle,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask, PRESInstanceStateMask iMask,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_takeNextInstance(
    struct PRESCstReaderCollator *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount,
    int maxCount, const struct PRESInstanceHandle *handle,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask, PRESInstanceStateMask iMask,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_readNextInstance(
    struct PRESCstReaderCollator *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount,
    int maxCount, const struct PRESInstanceHandle *handle,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask, PRESInstanceStateMask iMask,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_takeNextSample(
    struct PRESCstReaderCollator *me, RTIBool *validSample,
    void *data, struct PRESSampleInfo *info,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_readNextSample(
    struct PRESCstReaderCollator *me, RTIBool *validSample,
    void *data, struct PRESSampleInfo *info,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_getKey(
    struct PRESCstReaderCollator *me, int *failReason, void *instance,
    const struct PRESInstanceHandle *handle, struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESCstReaderCollator_getKeyX(
    struct PRESCstReaderCollator *me, int *failReason, void *key,
    const struct PRESInstanceHandle *handle, struct REDAWorker *worker);

extern PRESDllExport struct PRESCstReaderCollatorRemoteWriterQueue *
PRESCstReaderCollator_getRemoteWriterQueue(
    struct PRESCstReaderCollator *me, int *failReason, 
    struct REDASequenceNumber * lastAppProcessedSn,
    const struct MIGRtpsGuid *guid,
    const struct MIGRtpsGuid *virtualGuid,
    const struct PRESLifespanQosPolicy *lifespanQos,
    const struct PRESDurabilityQosPolicy * durabilityQos,
    const struct PRESServiceQosPolicy * serviceQos);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_returnRemoteWriterQueue(
    struct PRESCstReaderCollator *me, 
    struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue,
    int *readConditionStateOut,
    const struct RTINtpTime* receptionTsIn);

extern PRESDllExport void 
PRESCstReaderCollator_activateRemoteWriterQueue(
    struct PRESCstReaderCollator *me, 
    struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_inactivateRemoteWriterQueue(
    struct PRESCstReaderCollator *me, 
    struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue,
    int *readConditionStateOut, const struct RTINtpTime* receptionTsIn);

extern PRESDllExport void 
PRESCstReaderCollator_addReadCondition(
    struct PRESCstReaderCollator *me, 
    int *readConditionState);

/*e \ingroup PRESCstReaderCollatorModule

  Informs the collator of the removal of a read condition.

  @param me \b In. "this"
  @param readConditionState \b Out.  "Inventory " of ReadCondition states
         represented by the samples contained in the ReaderCollatorQueue.
*/
extern PRESDllExport void 
PRESCstReaderCollator_removeReadCondition(
    struct PRESCstReaderCollator *me, 
    int *readConditionState);


/*e \ingroup PRESCstReaderCollatorModule

  Begin iterator access to the instances held by the collator.

  Once begun, access to the instance iteration methods is now legal.  
  However, the caller must not leave the EA used to maintain single 
  threaded access to the collator, until iterator access is ended.  
  In addition, only instance access methods may be called during 
  iteration, currently checkDeadline being the only one provided.

  @pre Valid collator not currently being accessed via iteration.
  @post Any of the instance iteration methods may now be called.

  @param me \b In. "this"
  @param remoteWriterQueue \b In. The specific remote writer queue.
*/
extern PRESDllExport void 
PRESCstReaderCollator_beginInstanceIteration(struct PRESCstReaderCollator *me);

extern PRESDllExport void 
PRESCstReaderCollator_endInstanceIteration(struct PRESCstReaderCollator *me);

extern PRESDllExport struct PRESCstReaderCollatorInstance *
PRESCstReaderCollator_getInstanceIteration(struct PRESCstReaderCollator *me);

extern PRESDllExport void 
PRESCstReaderCollator_getInstanceHandle(
    struct PRESCstReaderCollator *me, 
    struct PRESInstanceHandle *handle, 
    struct PRESCstReaderCollatorInstance *instance);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_checkInstanceDeadline(
    struct PRESCstReaderCollator *me, 
    struct RTINtpTime *nextDeadline, struct RTINtpTime *now, 
    struct PRESCstReaderCollatorInstance *instance);

typedef RTIBool (*PRESCstReaderCollatorTransformSampleFunction)(
    void *out, const void *in, void *transformOption);

typedef enum {
    PRES_CST_READER_COLLATOR_SAMPLE_KIND_DATA       = 0x00,
    PRES_CST_READER_COLLATOR_SAMPLE_KIND_DISPOSED   = 0x01,
    PRES_CST_READER_COLLATOR_SAMPLE_KIND_NO_WRITERS = 0x02
} PRESCstReaderCollatorSampleKind;

extern PRESDllExport RTIBool 
PRESCstReaderCollator_addSample(
    struct PRESCstReaderCollator *me, 
    RTIBool *dataAvailable, RTIBool *sampleLost, RTIBool *sampleRejected, 
    PRESSampleRejectedStatusKind *rejectedReason, 
    struct MIGRtpsGuid* rejectedInstanceGuid,
    PRESCstReaderCollatorTransformSampleFunction transformFnc, 
    const void *data, void *transformOption,
    const struct MIGRtpsGuid *remoteWriterGuid, const struct MIGRtpsGuid *guid,
    const struct RTINtpTime *sourceTimestamp, 
    PRESCstReaderCollatorSampleKind sampleKind, 
    const struct RTINtpTime *receptionTimestamp, 
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_newAnonData(
    struct PRESCstReaderCollator *me,
    RTIBool *dataAvailable, int *lostCount, int *rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    struct MIGRtpsGuid* rejectedInstanceGuid,
    const struct COMMENDReaderServiceData *data,
    const struct RTINtpTime *timestamp,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_newData(
    struct PRESCstReaderCollator *me,
    RTIBool *dataAvailable, int *lostCount, int *rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    struct MIGRtpsGuid* rejectedInstanceGuid,
    int *receivedInlineQosBitmap,
    struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue,
    const struct REDASequenceNumber *firstRelevantSn,
    const struct REDASequenceNumber *firstRelevantRangeEndSn,
    RTIBool isMatching,
    const struct COMMENDReaderServiceData *data, int strength,
    int reservedCount,
    const struct RTINtpTime *timestamp,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_commitData(
    struct PRESCstReaderCollator *me,
    int *lostCount, int *rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    struct MIGRtpsGuid* rejectedInstanceGuid,
    struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue,
    const struct REDASequenceNumber *firstRelevantSn,
    int reservedCount,
    const struct RTINtpTime *timestamp,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_lostData(
    struct PRESCstReaderCollator *me,
    int *lostCount, int *rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    struct MIGRtpsGuid* rejectedInstanceGuid,
    struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue,
    const struct REDASequenceNumber *firstRelevantSn,
    int reservedCount,
    const struct RTINtpTime *timestamp,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport int 
PRESCstReaderCollator_getFreeCount(
    struct PRESCstReaderCollator *me, 
    struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue, 
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_retryCommittal(
    struct PRESCstReaderCollator *me,
    int *lostCount, int *rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    struct MIGRtpsGuid* rejectedInstanceGuid,
    const struct RTINtpTime *timestamp,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESCstReaderCollator_pruneAndUpdate(
    struct PRESCstReaderCollator *me, 
    const struct RTINtpTime *now,
    int requiredEntryCount,
    RTIBool updateExpirationTime,
    const struct MIGRtpsGuid *remoteWriterGuid,
    PRESInstanceStateKind targetUpdateKind,
    const struct RTINtpTime* newLeaseIn,
    RTIBool alwaysCalculateState,
    int *readConditionState);

extern PRESDllExport 
RTIBool PRESCstReaderCollator_pruneLifespanExpiredEntries(
    struct PRESCstReaderCollator *me, 
    const struct RTINtpTime *now, /* required */
    int requiredEntryCount,
    RTIBool alwaysCalculateState,
    int *readConditionState);

extern PRESDllExport void
PRESCstReaderCollator_lookupInstance(struct PRESCstReaderCollator *me,
                                     const void* key_holder,
                                     struct PRESInstanceHandle *handle);

extern PRESDllExport void
PRESCstReaderCollator_lookupInstanceX(struct PRESCstReaderCollator *me,
                                      const void* key_holder,
                                      struct PRESInstanceHandle *handle);

extern PRESDllExport void 
PRESCstReaderCollator_setRemoteWriterLifespan(
    struct PRESCstReaderCollator *me, 
    struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue,
    const struct MIGRtpsGuid *remoteWriterGuid,
    const struct PRESLifespanQosPolicy *lifespanQos,
    const struct RTINtpTime *now,
    int *readConditionState);

extern PRESDllExport void 
PRESCstReaderCollator_setMinimumSeparation(
    struct PRESCstReaderCollator *me, 
    const struct RTINtpTime *minimumSeparation);

extern PRESDllExport void 
PRESCstReaderCollator_setDeadlinePeriod(
    struct PRESCstReaderCollator *me, 
    const struct RTINtpTime *deadlinePeriod);

extern PRESDllExport void 
PRESCstReaderCollator_setContentFilterPolicy(
    struct PRESCstReaderCollator *me, 
    const struct PRESContentFilterQosPolicy *policy);

extern PRESDllExport void
PRESCstReaderCollator_setReaderDataLifecyclePolicy(
    struct PRESCstReaderCollator *me, 
    const struct PRESReaderDataLifecycleQosPolicy *policy,
    const struct RTINtpTime* now,
    int *readConditionState);

struct PRESTypePluginData;

struct PRESTypePluginDataPool;

struct PRESLoanedSampleInfoListener;

extern PRESDllExport struct PRESCstReaderCollator *
PRESCstReaderCollator_new(
    const struct PRESCstReaderCollatorProperty *property,
    const struct PRESTypePluginData *typePluginData,
    const struct PRESTypePluginDataPool *typePluginDataPool,
    void *deserializeOption,
    struct RTIClock *clock,
    const struct PRESContentFilterQosPolicy *filterPolicy,
    const struct PRESLoanedSampleInfoListener *sampleInfoListener, 
    RTIBool gatherStatistics,
    const struct PRESOdbcDatabaseConnection * odbcDatabaseCx);

extern PRESDllExport void
PRESCstReaderCollator_preDelete(struct PRESCstReaderCollator *me);

extern PRESDllExport void
PRESCstReaderCollator_delete(struct PRESCstReaderCollator *me);

extern PRESDllExport void 
PRESCstReaderCollator_getRemoteWriterNextCommittalSn(
    struct PRESCstReaderCollator *me, 
    struct REDASequenceNumber *nextCommittalSn,
    const struct PRESCstReaderCollatorRemoteWriterQueue *remoteWriterQueue);

extern PRESDllExport void 
PRESCstReaderCollator_getStatistics(
    struct PRESCstReaderCollator *me, 
    struct PRESPsReaderStatistics *stats);

extern PRESDllExport void 
PRESCstReaderCollator_resetStatistics(
    struct PRESCstReaderCollator *me);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

  #include "pres/pres_cstReaderCollator_impl.h"

#endif /* pres_cstReaderCollator_h */
