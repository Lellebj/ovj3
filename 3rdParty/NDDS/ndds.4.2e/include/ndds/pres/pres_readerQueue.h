/*
 * @(#)pres_readerQueue.h    generated by: makeheader    Mon Dec  3 23:08:15 2007
 *
 *		built from:	readerQueue.ifc
 */

#ifndef pres_readerQueue_h
#define pres_readerQueue_h


  #include "reda/reda_fastBuffer.h"
  #include "reda/reda_skiplist.h"
  #include "mig/mig_rtps.h"
  #include "reda/reda_sequenceNumber.h"
  #include "pres/pres_common.h"

#ifdef __cplusplus
    extern "C" {
#endif


#define PRES_READER_QUEUE_INLINE_QOS_FLAG_NONE               (0x00000000)

#define PRES_READER_QUEUE_INLINE_QOS_FLAG_DURABILITY         (0x00000001)
#define PRES_READER_QUEUE_INLINE_QOS_FLAG_PRESENTATION       (0x00000002)
#define PRES_READER_QUEUE_INLINE_QOS_FLAG_DEADLINE           (0x00000004)
#define PRES_READER_QUEUE_INLINE_QOS_FLAG_LATENCY_BUDGET     (0x00000008)
#define PRES_READER_QUEUE_INLINE_QOS_FLAG_OWNERSHIP          (0x00000010)
#define PRES_READER_QUEUE_INLINE_QOS_FLAG_OWNERSHIP_STRENGTH (0x00000020)
#define PRES_READER_QUEUE_INLINE_QOS_FLAG_LIVELINESS         (0x00000040)
#define PRES_READER_QUEUE_INLINE_QOS_FLAG_PARTITION          (0x00000080)
#define PRES_READER_QUEUE_INLINE_QOS_FLAG_RELIABILITY        (0x00000100)
#define PRES_READER_QUEUE_INLINE_QOS_FLAG_TRANSPORT_PRIORITY (0x00000200)
#define PRES_READER_QUEUE_INLINE_QOS_FLAG_LIFESPAN           (0x00000400)
#define PRES_READER_QUEUE_INLINE_QOS_FLAG_DESTINATION_ORDER  (0x00000800)
#define PRES_READER_QUEUE_INLINE_QOS_FLAG_COHERENT_SET       (0x00001000)
#define PRES_READER_QUEUE_INLINE_QOS_FLAG_FILTER_SIGNATURE   (0x00002000)

#define PRES_READER_QUEUE_INLINE_QOS_FLAG_UNKNOWN            (0x80000000)

#define PRES_READER_QUEUE_STATE_ODBC_DSN_PROPERTY "dds.data_reader.state.odbc.dsn"
#define PRES_READER_QUEUE_STATE_ODBC_USERNAME_PROPERTY "dds.data_reader.state.odbc.username"
#define PRES_READER_QUEUE_STATE_ODBC_PASSWORD_PROPERTY "dds.data_reader.state.odbc.password"
#define PRES_READER_QUEUE_STATE_ODBC_DRIVER_PROPERTY "dds.data_reader.state.odbc.driver"
#define PRES_READER_QUEUE_STATE_RESTORE_PROPERTY "dds.data_reader.state.restore"
#define PRES_READER_QUEUE_STATE_FILTER_REDUNDANT_SAMPLES "dds.data_reader.state.filter_redundant_samples"
#define PRES_READER_QUEUE_STATE_PERSISTENCE_SERVICE_REQUEST_DEPTH "dds.data_reader.state.persistence_service.request_depth"

#define PRES_READER_QUEUE_MAX_VIRTUAL_WRITERS_PER_SAMPLE 5



struct PRESReaderQueueVirtualWriterList;


struct PRESReaderQueueVirtualWriterListEntry {
    /*i Virtual GUID */
    struct MIGRtpsGuid guid;
    struct REDASequenceNumber lastComittedSn;
    struct REDASequenceNumber lastApplicationProcessedSn;
};

struct PRESReaderQueueVirtualWriterListProperty {
    /*e Control growth in number of entries */
    struct REDAFastBufferPoolGrowthProperty entryCount;
    /*e*/
    RTIBool restore;
};


  #define PRES_READER_QUEUE_VIRTUAL_WRITER_LIST_PROPERTY_DEFAULT { \
    /* entryCount */ \
    {32, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED} \
  }

extern PRESDllExport struct PRESReaderQueueVirtualWriterList *
PRESReaderQueueVirtualWriterList_new(
    const struct MIGRtpsGuid * readerVirtualGuid,
    const struct PRESReaderQueueVirtualWriterListProperty *property,
    const struct PRESOdbcDatabaseConnection * odbcDatabaseCx);

extern PRESDllExport void
PRESReaderQueueVirtualWriterList_preDelete(
    struct PRESReaderQueueVirtualWriterList *me);

extern PRESDllExport void
PRESReaderQueueVirtualWriterList_delete(struct PRESReaderQueueVirtualWriterList *me);

extern PRESDllExport struct PRESReaderQueueVirtualWriterListEntry *
PRESReaderQueueVirtualWriterList_assertEntry(
    struct PRESReaderQueueVirtualWriterList *me,
    const struct MIGRtpsGuid * guid,
    RTIBool persist);

extern PRESDllExport struct PRESReaderQueueVirtualWriterListEntry *
PRESReaderQueueVirtualWriterList_findEntry(
    struct PRESReaderQueueVirtualWriterList *me,
    const struct MIGRtpsGuid * guid);

extern PRESDllExport
RTIBool PRESReaderQueueVirtualWriterList_persistVirtualWriterEntry(
    struct PRESReaderQueueVirtualWriterList *me,
    struct PRESReaderQueueVirtualWriterListEntry * entry,
    RTIBool update);

extern PRESDllExport
RTIBool PRESReaderQueueVirtualWriterList_supportStatePersistence(
    struct PRESReaderQueueVirtualWriterList *me);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* pres_readerQueue_h */
