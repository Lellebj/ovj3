/*
 * @(#)pres_typePlugin.h    generated by: makeheader    Mon Dec  3 23:08:14 2007
 *
 *		built from:	typePlugin.ifc
 */

#ifndef pres_typePlugin_h
#define pres_typePlugin_h


 #ifndef pres_dll_h
    #include "pres/pres_dll.h"
 #endif
 #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
 #endif
 #ifndef reda_fastBuffer_h
    #include "reda/reda_fastBuffer.h"
 #endif
 #ifndef cdr_stream_h
    #include "cdr/cdr_stream.h"
 #endif
 #ifndef cdr_encapsulation_h
    #include "cdr/cdr_encapsulation.h"
 #endif
 #ifndef pres_common_h
    #include "pres/pres_common.h"
 #endif
 #ifndef cdr_typeCode_h
    #include "cdr/cdr_typeCode.h"
 #endif 

#ifdef __cplusplus
    extern "C" {
#endif

struct PRESTypePlugin;

typedef enum {
    /*e Instance doesn't have key concept. User data sent as ISSUE. */
    PRES_TYPEPLUGIN_NO_KEY,
    /*e Instance with GUID as the key. User data sent as VAR */
    PRES_TYPEPLUGIN_GUID_KEY,
    /*e Instance with random key contained in the instance structure.
        User data send as VAR */
    PRES_TYPEPLUGIN_USER_KEY
} PRESTypePluginKeyKind;

typedef enum {
    /*e Java language */
	PRES_TYPEPLUGIN_JAVA_LANG = 0x4A415641,
	/* C/C++ DDS type */
	PRES_TYPEPLUGIN_DDS_TYPE = 0x00561234,
	/* C/C++ non-DDS type */
	PRES_TYPEPLUGIN_NON_DDS_TYPE = 0x00982467,
	/* Unknown */
	PRES_TYPEPLUGIN_UNKNOWN_LAN = 0x554E4B4E
} PRESTypePluginLanguageKind;

typedef RTIBool (*PRESTypePluginDataCopyFunction)
    (void *out, const void *in);

typedef PRESTypePluginKeyKind (*PRESTypePluginDataGetKeyKindFunction)();

typedef RTIBool (*PRESTypePluginDataInitializeFunction)(void* sample);

typedef RTIBool (*PRESTypePluginDataInitializeExFunction)(void* sample,RTIBool allocatePointers);

typedef void (*PRESTypePluginDataFinalizeFunction)(void* sample);

typedef void (*PRESTypePluginDataFinalizeExFunction)(void* sample,RTIBool deletePointers);

typedef void* (*PRESTypePluginDataCreateSampleFunction)();

typedef void* (*PRESTypePluginDataCreateSampleExFunction)(RTIBool allocatePointers);

typedef void (*PRESTypePluginDataDestroySampleFunction)(void *userData);

typedef void (*PRESTypePluginDataDestroySampleExFunction)(void *userData,RTIBool deletePointers);

struct MIGRtpsGuid;

typedef RTIBool (*PRESTypePluginDataInstanceToKeyFunction)
    (void *key, const void *instance);

typedef RTIBool (*PRESTypePluginDataKeyToInstanceFunction)
    (void *instance, const void *key);

typedef RTIBool (*PRESTypePluginDataInstanceToGuidFunction)
    (struct MIGRtpsGuid *guid, RTIBool *isGloballyUnique, const void *instance);

typedef RTIBool (*PRESTypePluginDataSerializedInstanceToGuidFunction)
    (struct RTICdrStream *stream, struct MIGRtpsGuid *guid,
     void *instance, void *deserialize_option);

typedef void* (*PRESTypePluginDataCreateKeyFunction) ();

typedef void (*PRESTypePluginDataDestroyKeyFunction) (void *key);

struct PRESTypePluginData {
    /* functions needed by all types */

    /* general type manipulation */

    /*e Function to serialize sample. Cannot be NULL. */
    RTICdrStreamSerializeFunction serializeFnc;
    /*e Function to serialize encapsulation. Cannot be NULL. */
    RTICdrStreamSerializeEncapsulationFunction 
        serializeEncapsulationFnc;
    /*e Function to serialize the keys of a sample*/
    RTICdrStreamSerializeFunction serializeKeyFnc;
    /*e Function to serialize data sample w/o encapsulation. */
    RTICdrStreamSerializeFunction serializeDataFnc;
    /*e Function to deserialize sample. Cannot be NULL. */
    RTICdrStreamDeserializeFunction deserializeFnc;
    /*e Function to deserialize encapsulation. Cannot be NULL. */
    RTICdrStreamDeserializeEncapsulationFunction 
        deserializeEncapsulationFnc;
    /*e Function to deserialize the keys of a sample*/
    RTICdrStreamDeserializeFunction deserializeKeyFnc;
    /*e Function to deserialize sample w/o encapsulation. */
    RTICdrStreamDeserializeFunction deserializeDataFnc;

    /*e Function to copy sample. Cannot be NULL. */
    PRESTypePluginDataCopyFunction copyFnc;
    /*e Function to get the key kind. Cannot be NULL. */
    PRESTypePluginDataGetKeyKindFunction getKeyKindFnc;

    /* for create/destroy buffer/sample, called by DataPool */

    /*e Function to get serialized buffer size. Cannot be NULL.
        This method Will only be called by the default implementation of
	data pool.
     */
    RTICdrTypeGetMaxSizeSerializedFunction getMaxSizeSerializedFnc;
    /*e Function to get serialized buffer size for keys.
        This method Will only be called by the default implementation of
	data pool.
     */
    RTICdrTypeGetMaxSizeSerializedFunction getMaxSizeSerializedKeyFnc;
    /*e Function to get serialized buffer size. Cannot be NULL.
        This method Will only be called by the default implementation of
	data pool.
     */
    RTICdrTypeGetMaxSizeSerializedFunction getMaxSizeSerializedDataFnc;
    /*e Function to create sample */
    PRESTypePluginDataCreateSampleFunction createSampleFnc;
    /*e Expanded function to create sample (pointer allocation management) */
    PRESTypePluginDataCreateSampleExFunction createSampleExFnc;    
    /*e Function to destroy sample */
    PRESTypePluginDataDestroySampleFunction destroySampleFnc;    
    /*e Expanded function to destroy sample (pointer allocation management) */
    PRESTypePluginDataDestroySampleExFunction destroySampleExFnc;
    
    /* others */
    /*e Function to initialize sample. Cannot be NULL */
    PRESTypePluginDataInitializeFunction initializeFnc;
    /*e Expanded function to initialize sample (pointer allocation management)*/
    PRESTypePluginDataInitializeExFunction initializeExFnc;        
    /*e Function to finalize sample. Cannot be NULL */
    PRESTypePluginDataFinalizeFunction finalizeFnc;
    /*e Expended function to finalize sample (pointer allocation management) */
    PRESTypePluginDataFinalizeExFunction finalizeExFnc;
    /*e Function to print sample. Cannot be NULL */
    RTICdrTypePrintFunction printFnc;

    /* key translation -- only user USER_KEY type */

    /*e Function to convert instance to key.
        Cannot be NULL if key kind is
	::PRES_TYPEPLUGIN_USER_KEY. */
    PRESTypePluginDataInstanceToKeyFunction instanceToKeyFnc;    
    /*e Function to fill an instance with a key.
        Cannot be NULL if key kind is
	::PRES_TYPEPLUGIN_USER_KEY. */
    PRESTypePluginDataKeyToInstanceFunction keyToInstanceFnc;    
    /*e Function to convert instance to guid.
        Cannot be NULL if key kind is
	::PRES_TYPEPLUGIN_USER_KEY. */
    PRESTypePluginDataInstanceToGuidFunction instanceToGuidFnc;
    /*e Function to convert serialized instance to guid.
        Cannot be NULL if key kind is
	::PRES_TYPEPLUGIN_USER_KEY. */
    PRESTypePluginDataSerializedInstanceToGuidFunction
        serializedInstanceToGuidFnc;

    /* create/destroy key -- only user USER_KEY type, called by data pool */

    /*e Function to create new key for writer or reader.
        Cannot be NULL if key kind is
	::PRES_TYPEPLUGIN_USER_KEY. */
    PRESTypePluginDataCreateKeyFunction createKeyFnc;
    /*e Function to destroy key for writer or reader.
        Cannot be NULL if key kind is
	::PRES_TYPEPLUGIN_USER_KEY. */
    PRESTypePluginDataDestroyKeyFunction destroyKeyFnc;
};

struct PRESTypePluginDataPool;

typedef int (*PRESTypePluginDataPoolGetMaxSizeSerializedFunction)
    (const struct PRESTypePluginDataPool *self);

typedef char* (*PRESTypePluginDataPoolGetBufferFunction)
    (const struct PRESTypePluginDataPool *self, int* bufferLength);

typedef void (*PRESTypePluginDataPoolReturnBufferFunction)
    (const struct PRESTypePluginDataPool *self, char *buffer);

typedef void* (*PRESTypePluginDataPoolGetSampleFunction)
    (const struct PRESTypePluginDataPool *self, void** handle);

typedef void (*PRESTypePluginDataPoolReturnSampleFunction)
    (const struct PRESTypePluginDataPool *self, void *sample, void* handle);

typedef void* (*PRESTypePluginDataPoolGetKeyFunction) 
    (const struct PRESTypePluginDataPool *self, void** handle);

typedef void (*PRESTypePluginDataPoolReturnKeyFunction)
    (const struct PRESTypePluginDataPool *self, void *key, void* handle);

struct PRESTypePluginDataPool {

    /* functions needed by all types */

    /*e Function to obtain buffer size. Cannot be NULL. */
    PRESTypePluginDataPoolGetMaxSizeSerializedFunction getMaxSizeSerializedFnc;
    /*e Function to obtain buffer for serialization. Cannot be NULL. */
    PRESTypePluginDataPoolGetBufferFunction getBufferFnc;
    /*e Function to return buffer back to pool. Cannot be NULL. */
    PRESTypePluginDataPoolReturnBufferFunction returnBufferFnc;

    /*e Function to obtain sample for deserialization. Cannot be NULL. */
    PRESTypePluginDataPoolGetSampleFunction getSampleFnc;
    /*e Function to return sample back to pool. Cannot be NULL. */
    PRESTypePluginDataPoolReturnSampleFunction returnSampleFnc;

    /* only needed for keyed type */

    /*e Function to obtain key. Cannot be NULL for keyed type. */
    PRESTypePluginDataPoolGetKeyFunction getKeyFnc;
    /*e Function to return key back to pool. Cannot be NULL for keyed type. */
    PRESTypePluginDataPoolReturnKeyFunction returnKeyFnc;
};

typedef struct PRESTypePluginDataPool*
(*PRESTypePluginDataPoolFactoryCreatePoolFunction)
    (int initialBuffers, int maxBuffers,
     int initialSamples, int maxSamples,
     int initialInstances, int maxInstances,
     const struct PRESTypePluginData *data);

typedef void (*PRESTypePluginDataPoolFactoryDestroyPoolFunction)
    (struct PRESTypePluginDataPool* pool);

struct PRESTypePluginDataPoolFactory {

    /* functions needed by all types */

    /*e Function to create data pool. Cannot be NULL. */
    PRESTypePluginDataPoolFactoryCreatePoolFunction createPoolFnc;
    /*e Function to destroy data pool. Cannot be NULL. */
    PRESTypePluginDataPoolFactoryDestroyPoolFunction destroyPoolFnc;
};

 extern PRESDllVariable struct PRESTypePluginDataPoolFactory
 PRES_TYPEPLUGIN_DEFAULT_DATA_POOL_FACTORY;


struct PRESTypePluginVersion {
    char majorRev;
    char minorRev;
    char majorOptions;
    char minorOptions;
};

/* plugin version copied from nddsgen module version */
/* CURRENT VERSION: 1.1 */
#define PRES_TYPE_PLUGIN_VERSION_1_0  {1, 0, 0, 0}

#define PRES_TYPE_PLUGIN_VERSION_1_1  {1, 1, 0, 0}

#define PRES_TYPE_PLUGIN_VERSION_CURRENT  PRES_TYPE_PLUGIN_VERSION_1_1


struct PRESTypePlugin {    
    /*e Function for manipulating data. */
    struct PRESTypePluginData data;
    /*e Function for managing memory of data. */
    struct PRESTypePluginDataPoolFactory dataPoolFactory;
    /*e Type Code associated to the type*/
    struct RTICdrTypeCode * typeCode;
    /*i Opaque buffer for storing user data */
    PRESWord* _userBuffer;
    /*i Opaque buffer for storing user data for a specific 
        language */
    PRESWord* _userLanguageBuffer;
    /*e Plugin kind */
    PRESTypePluginLanguageKind languageKind;
    /*i Version */
    struct PRESTypePluginVersion version;
};


/*i \ingroup PRESTypePluginModule
  Parameter alignment.
*/
#define PRES_TYPEPLUGIN_PARAMETER_ALIGNMENT (4)

extern PRESDllExport 
PRESWord *PRESTypePlugin_getUserData(const struct PRESTypePlugin *self);

extern PRESDllExport
RTIBool PRESTypePlugin_serializePrimitiveParameter(
    struct RTICdrStream *stream, const void *in,
    RTICdrPrimitiveType type,
    RTICdrUnsignedShort parameterId);

extern PRESDllExport
RTIBool PRESTypePlugin_serializeNonPrimitiveParameter(
    struct RTICdrStream *stream, const void *in,
    RTICdrStreamSerializeFunction serializeFunction,
    RTICdrUnsignedShort parameterId,
    void* serializeOption);

extern PRESDllExport
RTIBool PRESTypePlugin_serializePrimitiveArrayParameter(
    struct RTICdrStream *stream, const void *in,
    RTICdrUnsignedLong length,
    RTICdrPrimitiveType type, RTICdrUnsignedShort parameterId);

/*i \ingroup PRESTypePluginModule
  Helper method for serializing array of non-primitive type parameter in
  parameter sequence.

  @param stream \b InOut. Stream used for serialization.
  @param in \b In. non-primitive type that is used as in the array of parameter.
  @param length \b In. Length of array.
  @param serializefunction \b In. Function used for serialization.
  @param parameterId \b In. ID used for parameter.
  @param serializeOption \b In. serialize option obtained from writer property.

  @return RTI_TRUE if successful. RTI_FALSE otherwise.
*/
extern PRESDllExport
RTIBool PRESTypePlugin_serializeNonPrimitiveArrayParameter(
    struct RTICdrStream *stream, const void *in,
    RTICdrUnsignedLong length, unsigned int elementSize,
    RTICdrStreamSerializeFunction serializeFunction,
    RTICdrUnsignedShort parameterId,
    void* serializeOption);

extern PRESDllExport
RTIBool PRESTypePlugin_serializePrimitiveSequenceParameter(
    struct RTICdrStream *stream, const void *in,
    RTICdrUnsignedLong length, RTICdrUnsignedLong maximumLength,
    RTICdrPrimitiveType type, RTICdrUnsignedShort parameterId);

extern PRESDllExport
RTIBool PRESTypePlugin_serializeNonPrimitiveSequenceParameter(
    struct RTICdrStream *stream, const void *in,
    RTICdrUnsignedLong length, RTICdrUnsignedLong maximumLength,
    unsigned int elementSize,
    RTICdrStreamSerializeFunction serializeFunction,
    RTICdrUnsignedShort parameterId,
    void *serializeOption);

extern PRESDllExport
RTIBool PRESTypePlugin_serializeStringSequenceParameter(
    struct RTICdrStream *stream, const void *in,
    RTICdrUnsignedLong length, RTICdrUnsignedLong maximumLength,
    RTICdrUnsignedLong maximumStringLength,
    RTICdrUnsignedShort parameterId,
    void *serializeOption);

/*i \ingroup PRESTypePluginModule
  Helper method for serializing string parameter in parameter sequence.

  @param stream \b InOut. Stream used for serialization.
  @param in \b In. String used as parameter.
  @param maximumLength \b In. Maximum length of string.
  @param parameterId \b In. ID used for parameter.

  @return RTI_TRUE if successful. RTI_FALSE otherwise.
*/
extern PRESDllExport
RTIBool PRESTypePlugin_serializeStringParameter(
    struct RTICdrStream *stream, const char *in,
    RTICdrUnsignedLong maximumLength,
    RTICdrUnsignedShort parameterId);

extern PRESDllExport
RTIBool PRESTypePlugin_serializeWstringParameter(
    struct RTICdrStream *stream, const RTICdrWchar *in,
    RTICdrUnsignedLong length, RTICdrUnsignedLong maximumLength,
    RTICdrUnsignedShort parameterId);

extern PRESDllExport
RTIBool PRESTypePlugin_serializeParameterSequenceEnd(
    struct RTICdrStream *stream);

typedef RTIBool (*PRESTypePluginDeserializeParameterValueFunction)
    (RTIBool *ok, void *parameters, struct RTICdrStream *stream,
     unsigned short parameterId, unsigned short parameterLength,
     void *deserializeOption);

typedef void (*PRESTypePluginSetDefaultParameterValuesFunction)
    (void *parameter);

extern PRESDllExport RTIBool PRESTypePlugin_serializeParameterSequence(
    struct RTICdrStream *stream, const void *parameters,
    RTICdrStreamSerializeFunction serializeParametersFunction,
    void *serializeOption);

extern PRESDllExport RTIBool PRESTypePlugin_deserializeParameterSequence(
    void *parameter, struct RTICdrStream *stream,
    PRESTypePluginSetDefaultParameterValuesFunction
    setDefaultParameterValuesFnc,
    PRESTypePluginDeserializeParameterValueFunction
    deserializeParameterValueFnc,
    void *deserializeOption);

extern PRESDllExport
unsigned int PRESTypePlugin_getParameterHeaderMaxSizeSerialized(
    unsigned int size);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* pres_typePlugin_h */
