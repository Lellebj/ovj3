/*
 * @(#)pres_psReaderQueue.h    generated by: makeheader    Mon Dec  3 23:08:15 2007
 *
 *		built from:	psReaderQueue.ifc
 */

#ifndef pres_psReaderQueue_h
#define pres_psReaderQueue_h


  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef reda_fastBuffer_h
    #include "reda/reda_fastBuffer.h"
  #endif
  #ifndef reda_worker_h
    #include "reda/reda_worker.h"
  #endif
  #ifndef pres_dll_h
    #include "pres/pres_dll.h"
  #endif
  #ifndef pres_common_h
    #include "pres/pres_common.h"
  #endif
   #ifndef pres_readerStatistics_h
    #include "pres/pres_readerStatistics.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif

struct PRESPsReaderQueueRemoteWriterQueue;

struct PRESPsReaderQueue;

struct PRESPsReaderQueueProperty {
    /*e Owner of this collator. */
    struct MIGRtpsGuid readerGuid;

    /*e Virtual Reader GUID */
    struct MIGRtpsGuid virtualReaderGuid;

    /*e Control growth in number of entries. */
    struct REDAFastBufferPoolGrowthProperty entryCount;

    /*e The maximum allowable number of entries per remote writer. */
    int maximalEntryPerRemoteWriterCount;

    /*e Control growth in number of remote writers. */
    struct REDAFastBufferPoolGrowthProperty remoteWriterCount;

    /*e Control growth in number of virtual remote writers. */
    struct REDAFastBufferPoolGrowthProperty virtualWriterCount;

    /*e Control growth in number of infos. */
    struct REDAFastBufferPoolGrowthProperty infoCount;

    /*e Control growth in number of concurrent reads. */
    struct REDAFastBufferPoolGrowthProperty outstandingReadCount;

    /*e The maximum samples that can be returned from read, to address #9375 */
    int maximalSamplesPerRead;

    /*e The reliability QoS. */
    struct PRESReliabilityQosPolicy reliabilityQos;
    /*e The presentation QoS. */
    struct PRESPresentationQosPolicy presentationQos;
    /*e The deadline QoS.
      A period set to RTI_NTP_TIME_MAX is interpreted as infinite.  In addition,
      the period may not exceed PRES_DEADLINE_QOS_POLICY_DEADLINE_PERIOD_MAX. */
    struct PRESDeadlineQosPolicy deadlineQos;
    /*e The ownership QoS. */
    struct PRESOwnershipQosPolicy ownershipQos;
    /*e The destination order QoS */
    struct PRESDestinationOrderQosPolicy destinationOrderQos;
    /*e The time based filter QoS.  The minimumSeparation may not exceed 
        PRES_TIME_BASED_FILTER_QOS_POLICY_MINIMUM_SEPARATION_MAX. */
    struct PRESTimeBasedFilterQosPolicy timeBasedFilterQos;
    /*e The history QoS. */
    struct PRESHistoryQosPolicy historyQos;
    /*e The reader data lifecycle QoS. */
    struct PRESReaderDataLifecycleQosPolicy readerDataLifecycleQos;
    /*e The durability Qos */
    struct PRESDurabilityQosPolicy durabilityQos;

    /*e Restore reader queue state */
    /* This member is used when the reader state can be retrieved from a persistence storage */
    RTIBool restoreState;

    /*e Filter redundant samples */
    /* This property is used to filter redundant samples or not.
       If the value is RTI_FALSE, the reader will not keep information 
       about lastAppProcessedSn or lastCommittedSn */
    RTIBool filterRedundantSamples;

    int requestDepth;
};


  #define PRES_PS_READER_QUEUE_PROPERTY_DEFAULT {          \
    /* readerGuid */ \
    MIG_RTPS_GUID_UNKNOWN, \
    /* virtualReaderGuid */ \
    MIG_RTPS_GUID_UNKNOWN, \
    /* entryCount */                           \
    {32, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    32,  /* maximalEntryPerRemoteWriterCount */            \
    /* remoteWriterCount */ \
    {2, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* virtualWriterCount */ \
    {2, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* infoCount */ \
    {32, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    /* outstandingReadCount */ \
    {1, REDA_FAST_BUFFER_POOL_UNLIMITED, REDA_FAST_BUFFER_POOL_UNLIMITED}, \
    256, /* maximalSamplesPerRead: should never be unlimited */ \
    {PRES_BEST_EFFORT_RELIABILITY_QOS},                    \
    {PRES_TOPIC_PRESENTATION_QOS,RTI_FALSE,RTI_TRUE},      \
    {RTI_NTP_TIME_MAX},                                    \
    {PRES_SHARED_OWNERSHIP_QOS},                           \
    {PRES_BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS,     \
     PRES_INSTANCE_SCOPE_DESTINATIONORDER_QOS},            \
    {RTI_NTP_TIME_ZERO},                                   \
    {PRES_KEEP_LAST_HISTORY_QOS, PRES_NONE_REFILTER_QOS,1},\
    {RTI_NTP_TIME_MAX, RTI_NTP_TIME_MAX},/* readerDataLifecycleQos */\
    {PRES_VOLATILE_DURABILITY_QOS,RTI_TRUE}, /* durability qos policy */\
    RTI_FALSE,RTI_FALSE, \
    0 /* requestDepth */ }


  #define PRES_PS_READER_QUEUE_GET_FAILURE_INTERNAL (1)


  #define PRES_PS_READER_QUEUE_GET_FAILURE_OUT_OF_RESOURCES (2)

extern PRESDllExport RTIBool
PRESPsReaderQueue_hasOutstandingLoans(
    struct PRESPsReaderQueue *me,
    struct REDAWorker *worker);

  
    #define PRES_PS_READER_QUEUE_READ_TAKE_MAX_COUNT_UNLIMITED (-1)

extern PRESDllExport RTIBool
PRESPsReaderQueue_take(
    struct PRESPsReaderQueue *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount,
    int maxCount, PRESSampleStateMask sMask,
    PRESViewStateMask vMask, PRESInstanceStateMask iMask,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESPsReaderQueue_read(
    struct PRESPsReaderQueue *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount,
    int maxCount, PRESSampleStateMask sMask,
    PRESViewStateMask vMask, PRESInstanceStateMask iMask,
    int *readConditionState, 
    struct REDAWorker *worker);

extern PRESDllExport void
PRESPsReaderQueue_finish(
    struct PRESPsReaderQueue *me,
    void **dataArray, int dataCount,
    struct PRESLoanedSampleInfo **infoArray, int infoCount,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESPsReaderQueue_takeInstance(
    struct PRESPsReaderQueue *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount,
    int maxCount, const struct PRESInstanceHandle *handle,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask, PRESInstanceStateMask iMask,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESPsReaderQueue_readInstance(
    struct PRESPsReaderQueue *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount,
    int maxCount, const struct PRESInstanceHandle *handle,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask, PRESInstanceStateMask iMask,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESPsReaderQueue_takeNextInstance(
    struct PRESPsReaderQueue *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount,
    int maxCount, const struct PRESInstanceHandle *handle,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask, PRESInstanceStateMask iMask,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESPsReaderQueue_readNextInstance(
    struct PRESPsReaderQueue *me, int *successReason,
    void ***dataArray, int *dataCount,
    struct PRESLoanedSampleInfo ***infoArray, int *infoCount,
    int maxCount, const struct PRESInstanceHandle *handle,
    PRESSampleStateMask sMask,
    PRESViewStateMask vMask, PRESInstanceStateMask iMask,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESPsReaderQueue_takeNextSample(
    struct PRESPsReaderQueue *me, RTIBool *validSample,
    void *data, struct PRESSampleInfo *info,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool
PRESPsReaderQueue_readNextSample(
    struct PRESPsReaderQueue *me, RTIBool *validSample,
    void *data, struct PRESSampleInfo *info,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport struct PRESPsReaderQueueRemoteWriterQueue *
PRESPsReaderQueue_getRemoteWriterQueue(
    struct PRESPsReaderQueue *me, int *failReason, 
    struct REDASequenceNumber * lastAppProcessedSn,
    const struct MIGRtpsGuid *guid,
    const struct MIGRtpsGuid *virtualGuid,
    const struct PRESLifespanQosPolicy *lifespanQos,
    const struct PRESDurabilityQosPolicy * durabilityQos,
    const struct PRESServiceQosPolicy * serviceQos);

extern PRESDllExport RTIBool 
PRESPsReaderQueue_returnRemoteWriterQueue(
    struct PRESPsReaderQueue *me, 
    struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue,
    int *readConditionState,
    const struct RTINtpTime* receptionTsIn);

extern PRESDllExport void 
PRESPsReaderQueue_activateRemoteWriterQueue(
    struct PRESPsReaderQueue *me, 
    struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue);

extern PRESDllExport RTIBool 
PRESPsReaderQueue_inactivateRemoteWriterQueue(
    struct PRESPsReaderQueue *me, 
    struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue,
    int *readConditionState,
    const struct RTINtpTime* receptionTsIn);

struct PRESTypePluginData;

struct PRESTypePluginDataPool;

struct PRESSampleInfoListener;

extern PRESDllExport struct PRESPsReaderQueue *
PRESPsReaderQueue_new(
    const struct PRESPsReaderQueueProperty *property,
    const struct PRESTypePluginData *typePluginData,
    const struct PRESTypePluginDataPool *typePluginDataPool,
    void *deserializeOption,
    struct RTIClock *clock,
    const struct PRESContentFilterQosPolicy *filterPolicy,
    const struct PRESLoanedSampleInfoListener *sampleInfoListener,
    RTIBool gatherStatistics,
    const struct PRESOdbcDatabaseConnection * odbcDatabaseCx);

extern PRESDllExport void
PRESPsReaderQueue_enable(struct PRESPsReaderQueue* me,
			 const struct RTINtpTime* nowIn);

extern PRESDllExport void
PRESPsReaderQueue_preDelete(struct PRESPsReaderQueue *me);

extern PRESDllExport void
PRESPsReaderQueue_delete(struct PRESPsReaderQueue *me);

extern PRESDllExport void 
PRESPsReaderQueue_setMinimumSeparation(
    struct PRESPsReaderQueue *me, 
    const struct RTINtpTime *minimumSeparation);

extern PRESDllExport void 
PRESPsReaderQueue_setReaderDataLifecyclePolicy(
    struct PRESPsReaderQueue* me, 
    const struct PRESReaderDataLifecycleQosPolicy *policy,
    const struct RTINtpTime* now,
    int *readConditionState);

extern PRESDllExport void 
PRESPsReaderQueue_setContentFilterPolicy(
    struct PRESPsReaderQueue *me,
    const struct PRESContentFilterQosPolicy *policy);

extern PRESDllExport void 
PRESPsReaderQueue_setDeadlinePeriod(
    struct PRESPsReaderQueue *me, 
    const struct RTINtpTime *deadlinePeriod);

extern PRESDllExport RTIBool 
PRESPsReaderQueue_checkDeadline(
    struct PRESPsReaderQueue *me, 
    struct RTINtpTime *nextDeadline, struct RTINtpTime *now);

typedef RTIBool (*PRESPsReaderQueueTransformSampleFunction)(
    void *out, const void *in, void *transformOption);

typedef enum {
    PRES_PS_READER_QUEUE_SAMPLE_KIND_DATA       = 0x00,
    PRES_PS_READER_QUEUE_SAMPLE_KIND_NO_WRITERS = 0x01
} PRESPsReaderQueueSampleKind;

extern PRESDllExport RTIBool 
PRESPsReaderQueue_addSample(
    struct PRESPsReaderQueue *me, 
    RTIBool *dataAvailable, RTIBool *sampleRejected, 
    PRESSampleRejectedStatusKind *rejectedReason, 
    PRESPsReaderQueueTransformSampleFunction transformFnc, 
    const void *data, 
    void *transformOption,
    const struct MIGRtpsGuid *remoteWriterGuidIn,
    const struct RTINtpTime *sourceTimestamp, 
    PRESPsReaderQueueSampleKind sampleKind, 
    const struct RTINtpTime *receptionTimestamp, 
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESPsReaderQueue_newData(
    struct PRESPsReaderQueue *me,
    RTIBool *dataAvailable, int *lostCount, int *rejectedCount,
    PRESSampleRejectedStatusKind *rejectedReason,
    int *receivedInlineQosBitmap,
    struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue,
    const struct REDASequenceNumber *firstRelevantSn,
    const struct REDASequenceNumber *firstRelevantRangeEndSn,
    RTIBool isMatching,
    const struct COMMENDReaderServiceData *data, int strength,
    int reservedCount,
    const struct RTINtpTime *timestamp,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESPsReaderQueue_commitData(
    struct PRESPsReaderQueue *me,
    int *lostCount,
    struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue,
    const struct REDASequenceNumber *firstRelevantSn,
    int reservedCount,
    const struct RTINtpTime *timestamp,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESPsReaderQueue_lostData(
    struct PRESPsReaderQueue *me,
    int *lostCount,
    struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue,
    const struct REDASequenceNumber *firstRelevantSn,
    int reservedCount,
    const struct RTINtpTime *timestamp,
    int *readConditionState,
    struct REDAWorker *worker);

extern PRESDllExport int 
PRESPsReaderQueue_getFreeCount(
    struct PRESPsReaderQueue *me, 
    struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue, 
    struct REDAWorker *worker);

extern PRESDllExport RTIBool 
PRESPsReaderQueue_pruneAndUpdate(
    struct PRESPsReaderQueue *me, 
    const struct RTINtpTime *now,
    int requiredEntryCount,
    RTIBool updateExpirationTime,
    const struct MIGRtpsGuid *remoteWriterGuid,
    PRESInstanceStateKind targetUpdateKind,
    const struct RTINtpTime *newLeaseForTargetState,
    int *readConditionState);

extern PRESDllExport 
RTIBool PRESPsReaderQueue_pruneLifespanExpiredEntries(
    struct PRESPsReaderQueue *me, 
    const struct RTINtpTime *now, /* required */
    int requiredEntryCount,
    int *readConditionState);

extern PRESDllExport void 
PRESPsReaderQueue_setRemoteWriterLifespan(
    struct PRESPsReaderQueue *me, 
    struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue,
    const struct MIGRtpsGuid *remoteWriterGuid,
    const struct PRESLifespanQosPolicy *lifespanQos,
    const struct RTINtpTime *now,
    int *readConditionState);

extern PRESDllExport void 
PRESPsReaderQueue_getRemoteWriterNextCommittalSn(
    struct PRESPsReaderQueue *me, struct REDASequenceNumber *nextCommittalSn,
    const struct PRESPsReaderQueueRemoteWriterQueue *remoteWriterQueue);

extern PRESDllExport void 
PRESPsReaderQueue_getStatistics(
    struct PRESPsReaderQueue *me, 
    struct PRESPsReaderStatistics *stats);

extern PRESDllExport void 
PRESPsReaderQueue_resetStatistics(
    struct PRESPsReaderQueue *me);


#ifdef __cplusplus
    }	/* extern "C" */
#endif


  #include "pres/pres_psReaderQueue_impl.h"

#endif /* pres_psReaderQueue_h */
