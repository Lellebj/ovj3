/*
 * @(#)pres_liveliness.h    generated by: makeheader    Mon Dec  3 23:08:15 2007
 *
 *		built from:	liveliness.ifc
 */

#ifndef pres_liveliness_h
#define pres_liveliness_h


 #ifndef pres_dll_h
    #include "pres/pres_dll.h"
 #endif
 #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
 #endif
 #ifndef reda_fastBuffer_h
    #include "reda/reda_fastBuffer.h"
 #endif
 #ifndef cdr_stream_h
    #include "cdr/cdr_stream.h"
 #endif
 #ifndef pres_common_h
    #include "pres/pres_common.h"
 #endif
 #ifndef cdr_typeCode_h
    #include "cdr/cdr_typeCode.h"
 #endif 
 #ifndef pres_psService_h
    #include "pres/pres_psService.h"
 #endif

#ifdef __cplusplus
    extern "C" {
#endif


/*e \ingroup PRESInterParticipantModule
    Name of type used for liveliness topic.
*/
#define PRES_INTER_PARTICIPANT_TYPE_PARAMETER "PRESInterParticipantParameter"
/*e \ingroup PRESInterParticipantModule
    Name of topic used for liveliness support.
*/
#define PRES_INTER_PARTICIPANT_TOPIC "PRESInterParticipantTopic"
/*e \ingroup PRESInterParticipantModule
    Object ID for liveliness writer, specified in RTPS spec.
*/
#define PRES_INTER_PARTICIPANT_RTPS_OBJECT_ID_WRITER (0x000200C2)
/*e \ingroup PRESInterParticipantModule
    Object ID for liveliness reader, specified in RTPS spec.
*/
#define PRES_INTER_PARTICIPANT_RTPS_OBJECT_ID_READER (0x000200C7)
/*e \ingroup PRESInterParticipantModule
    Default inter participant message kind
*/
#define PRES_INTER_PARTICIPANT_MESSAGE_KIND_UNKNOWN (0x00000000)
/*e \ingroup PRESInterParticipantModule
    Automatic liveliness update message kind.
*/
#define PRES_INTER_PARTICIPANT_MESSAGE_KIND_AUTOMATIC_LIVELINESS_UPDATE (0x00000001)
/*e \ingroup PRESInterParticipantModule
    Manual liveliness update message kind.
*/
#define PRES_INTER_PARTICIPANT_MESSAGE_KIND_MANUAL_LIVELINESS_UPDATE (0x00000002)

#define PRES_INTER_PARTICIPANT_DATA_MAX_LENGTH_DEFAULT  (256)


struct PRESInterParticipantProperty {
    /*e property used to govern liveliness reader behavior */
    struct PRESPsSrReaderProperty readerProperty;

    /*e property used to govern liveliness writer behavior */
    struct PRESPsSrWriterProperty writerProperty;

    /*e priority of liveliness traffic on transport */
    struct PRESTransportPriorityQosPolicy transportPriority;

    /*e enabled transports */
    struct RTINetioAliasList transportAliasList;

    /*e service ID of service used by liveliness */
    PRESServiceId serviceId;

    /*e ID of participant */
    MIGRtpsParticipantId participantId;

    /*e Maximum length of inter participant data sequence */
    int interParticipantDataMaximumLength;
};


#define PRES_INTER_PARTICIPANT_PROPERTY_DEFAULT {               \
    PRES_PS_SR_READER_PROPERTY_DEFAULT, /* readerProperty */    \
    PRES_PS_SR_WRITER_PROPERTY_DEFAULT, /* writerProperty */    \
    {NDDS_TRANSPORT_PRIORITY_DEFAULT},/* transportPriority */   \
    RTI_NETIO_ALIAS_LIST_DEFAULT,/* transportAliasList */       \
    PRES_SERVICE_ID_UNKNOWN, /* service Id */                   \
    MIG_RTPS_GUID_PREFIX_UNKNOWN, /* participant Id */              \
    PRES_INTER_PARTICIPANT_DATA_MAX_LENGTH_DEFAULT /* interParticipantDataMaximumLength */\
}

struct PRESInterParticipant;


struct PRESInterParticipantKey {
    MIGRtpsParticipantId participantId;

    RTI_UINT32      kind;
};


#define PRES_INTER_PARTICIPANT_KEY_DEFAULT {                \
    MIG_RTPS_GUID_PREFIX_UNKNOWN /* participantId */,           \
    PRES_INTER_PARTICIPANT_MESSAGE_KIND_UNKNOWN /* kind */  \
}

 
struct PRESInterParticipantData {
    struct PRESInterParticipantKey key;

    struct PRESSequenceOctet data;
};


#define PRES_INTER_PARTICIPANT_DATA_DEFAULT {       \
    PRES_INTER_PARTICIPANT_KEY_DEFAULT /* key */,   \
    PRES_SEQUENCE_OCTET_DEFAULT /* data */          \
}

extern PRESDllExport RTIBool
PRESInterParticipantKey_serialize(
    struct RTICdrStream *stream,
    const struct PRESInterParticipantKey *key,
    void *serializeOption);

extern PRESDllExport RTIBool
PRESInterParticipantKey_deserialize(
    struct RTICdrStream *stream,
    struct PRESInterParticipantKey *key,
    void *deserializeOption);

extern PRESDllExport unsigned int
PRESInterParticipantKey_getMaxSizeSerialized(
    unsigned int size);

extern PRESDllExport RTIBool
PRESInterParticipantKey_copy(
    struct PRESInterParticipantKey *dst,
    const struct PRESInterParticipantKey *src);

extern PRESDllExport void
PRESInterParticipantKey_print(
    const struct PRESInterParticipantKey *key, 
    const char *desc, unsigned int indent);

extern PRESDllExport struct PRESInterParticipant * 
PRESInterParticipant_new(   
    struct PRESParticipant *participant,
    struct COMMENDFacade *facade,
    struct REDAExclusiveArea* readerGroupEA,
    struct REDAExclusiveArea* writerGroupEA,
    struct PRESInterParticipantProperty *property,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESInterParticipant_enable(
    struct PRESInterParticipant *me,
    struct REDAWorker *worker);

extern PRESDllExport
RTIBool PRESInterParticipant_shutdown(
    struct PRESInterParticipant *me,
    struct REDAWorker *worker);

extern PRESDllExport void
PRESInterParticipant_delete(
    struct PRESInterParticipant *me, 
    struct REDAWorker *worker);

extern PRESDllExport void
PRESInterParticipant_finalizePlugin();

extern PRESDllExport RTIBool
PRESInterParticipant_write(
    struct PRESInterParticipant* me,
    RTI_UINT32 kind,
    struct PRESSequenceOctet *value,
    struct REDAWorker *worker);



/* TODO/FIXME: Remove this when bugfix merged into DISC branch */
#define TOPIC_MASKED_IN_NULL_LISTENER_NOT_SUPPORTED

#ifdef __cplusplus
    }	/* extern "C" */
#endif


#endif /* pres_liveliness_h */
