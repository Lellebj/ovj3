/*
 * @(#)transport_udpv4_impl.h    generated by: makeheader    Mon Dec  3 23:08:03 2007
 *
 *		built from:	udpv4_impl.ifc
 */

#ifndef transport_udpv4_impl_h
#define transport_udpv4_impl_h


#include "osapi/osapi_socket.h"

#ifdef __cplusplus
    extern "C" {
#endif


#define NDDS_TRANSPORT_UDPV4_INTERFACE_FLAG_UP           (0x1)


#define NDDS_TRANSPORT_UDPV4_INTERFACE_FLAG_BROADCAST    (0x2)


#define NDDS_TRANSPORT_UDPV4_INTERFACE_FLAG_LOOPBACK     (0x4)


#define NDDS_TRANSPORT_UDPV4_INTERFACE_FLAG_POINTOPOINT  (0x8)


#define NDDS_TRANSPORT_UDPV4_INTERFACE_FLAG_MULTICAST   (0x10)


#define NDDS_TRANSPORT_UDPV4_INTERFACE_FLAG_RUNNING     (0x20)


struct NDDS_Transport_UDPv4 {
    NDDS_Transport_Plugin                       parent;
    struct NDDS_Transport_UDPv4_Property_t     _property;
    struct NDDS_Transport_UDPv4_SocketFactory *_socketFactory;

    /* for built-in performance measurement */
    struct RTIClock                   *_clock; 

    /* default sockets used to send */
    int                                _unisocket;
    NDDS_Transport_Port_t              _unisocket_port;
    int                               *_multisocket;

    /* store system information about the running NICs */
    int                                _interfacesUpCount; 
    NDDS_Transport_Interface_t        *_interfaceArray;  
    unsigned int                      *_interfaceArrayFlags;
    int                                _interfaceArraySize; 

    /* user installed function that will be used to prevent an
       instance from using the interface */
    struct NDDS_Transport_UDPv4_InterfaceListener* _interfaceListener;

    char _id[NDDS_TRANSPORT_UDPV4_UNBLOCK_MESSAGE_SIZE];

#if defined(RTI_UDPV4_GATHER_SEND) 
    struct NDDS_Transport_UDPv4_gatherSendBuffer* gatherSendBuffer;
#endif
};


struct NDDS_Transport_UDPv4_SendResource_t {
    RTI_INT32             unisocket;
    NDDS_Transport_Port_t unisocket_port;
    RTI_INT32            *multisocket;
    RTI_INT32             transport_priority;
};


struct NDDS_Transport_UDPv4_RecvResource_t {
    RTI_INT32             socket;
    NDDS_Transport_Port_t port;
    RTI_INT32             is_multicast;
    /* Address stored in host byte order when receive resource is created
       This address is used to send the unblock message.
     */
    RTI_UINT32            multicast_address;
    struct sockaddr_in last_source_socket_address;
};


#define NDDS_Transport_UDPv4_new(property_in) \
        NDDS_Transport_UDPv4_newI(property_in, NULL, NULL, NULL)


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* transport_udpv4_impl_h */
