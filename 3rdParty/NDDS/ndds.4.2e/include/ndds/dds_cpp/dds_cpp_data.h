/*
 * @(#)dds_cpp_data.h    generated by: makeheader    Mon Dec  3 23:08:33 2007
 *
 *		built from:	data.ifcxx
 */

#ifndef dds_cpp_data_h
#define dds_cpp_data_h



  #ifndef dds_cpp_infrastructure_h
    #include "dds_cpp/dds_cpp_infrastructure.h"
  #endif
  #ifndef dds_c_topic_impl_h
    #include "dds_c/dds_c_topic_impl.h"
  #endif
  #ifndef dds_cpp_publication_h
    #include "dds_cpp/dds_cpp_publication.h"
  #endif
  #ifndef dds_cpp_subscription_h
    #include "dds_cpp/dds_cpp_subscription.h"
  #endif
  #ifndef dds_cpp_domain_h
    #include "dds_cpp/dds_cpp_domain.h"
  #endif



#define NDDSUSERDllExport


#define DDS_TYPESUPPORT_CPP(TTypeSupport, TData)                         \
                                                                         \
class NDDSUSERDllExport DDSCPPDllExport TTypeSupport :                   \
        public DDSTypeSupport {                                          \
public:                                                                  \
  static DDS_ReturnCode_t register_type(                                 \
                               DDSDomainParticipant* participant,        \
                               const char* type_name = #TData);          \
                                                                         \
  static const char* get_type_name();		                         \
                                                                         \
  static TData* create_data();                                           \
                                                                         \
  static TData* create_data_ex(DDS_Boolean allocatePointers);            \
                                                                         \
  static DDS_ReturnCode_t delete_data(TData* a_data);                    \
  		                                                         \
  static DDS_ReturnCode_t delete_data_ex(TData* a_data,                  \
  		DDS_Boolean deletePointers);                             \
                                                                         \
  static void print_data(const TData* a_data);                           \
                                                                         \
  static DDS_ReturnCode_t copy_data(TData* dst_data, const TData* src_data); \
                                                                         \
  static DDS_ReturnCode_t initialize_data(TData* a_data);                \
                                                                         \
  static DDS_ReturnCode_t initialize_data_ex(TData* a_data,              \
      DDS_Boolean allocatePointers);                                     \
                                                                         \
  static DDS_ReturnCode_t finalize_data(TData* a_data);                  \
                                                                         \
  static DDS_ReturnCode_t finalize_data_ex(TData* a_data,                \
	  DDS_Boolean deletePointers);                                   \
	                                                                 \
  DDSDataReader* create_datareaderI(DDSDataReader* dataReader);          \
  DDS_ReturnCode_t destroy_datareaderI(DDSDataReader* dataReader);       \
  DDSDataWriter* create_datawriterI(DDSDataWriter* dataWriter);          \
  DDS_ReturnCode_t destroy_datawriterI(DDSDataWriter* dataWriter);       \
                                                                         \
  static void finalize();                                                \
  virtual ~TTypeSupport();                                               \
private:                                                                 \
  static DDSTypeSupport* get_or_delete_instanceI(DDS_Boolean deleteInstance); \
  TTypeSupport(struct DDS_DataTypeUtilityImpl* cDataTypeUtility);        \
}


#define DDS_DATAWRITER_CPP(TDataWriter, TData)                       \
                                                                     \
class NDDSUSERDllExport DDSCPPDllExport TDataWriter :                \
        public DDSDataWriter {                                       \
public:                                                              \
                                                                     \
    virtual DDSEntity_impl* get_impl_EntityI();                      \
                                                                     \
    static TDataWriter* createI(DDSDataWriter* dataWriter);          \
    static DDS_ReturnCode_t destroyI(TDataWriter* dataWriter);       \
                                                                     \
    static TDataWriter* narrow(DDSDataWriter *writer);               \
public:                                                              \
                                                                     \
  virtual DDS_ReturnCode_t get_liveliness_lost_status(               \
        DDS_LivelinessLostStatus& status);                           \
                                                                     \
  virtual DDS_ReturnCode_t get_offered_deadline_missed_status(       \
        DDS_OfferedDeadlineMissedStatus& status);                    \
                                                                     \
    virtual DDS_ReturnCode_t get_offered_incompatible_qos_status(    \
        DDS_OfferedIncompatibleQosStatus& status);                   \
                                                                     \
    virtual DDS_ReturnCode_t get_publication_matched_status(         \
        DDS_PublicationMatchedStatus& status);                       \
                                                                     \
    virtual DDS_ReturnCode_t assert_liveliness();                    \
                                                                     \
    virtual DDS_ReturnCode_t get_matched_subscriptions(              \
	DDS_InstanceHandleSeq& subscription_handles);                \
                                                                     \
    virtual DDS_ReturnCode_t get_matched_subscription_data(          \
	DDS_SubscriptionBuiltinTopicData& subscription_data,         \
	const DDS_InstanceHandle_t& subscription_handle);            \
                                                                     \
    virtual DDSTopic* get_topic();                                   \
    virtual DDSPublisher* get_publisher();                           \
                                                                     \
    virtual DDS_ReturnCode_t wait_for_acknowledgments(               \
        const DDS_Duration_t& max_wait);                             \
                                                                     \
    virtual DDS_ReturnCode_t set_qos(const DDS_DataWriterQos& qos);  \
    virtual DDS_ReturnCode_t get_qos(DDS_DataWriterQos& qos);        \
    virtual DDS_ReturnCode_t set_listener(DDSDataWriterListener* l,  \
        DDS_StatusMask mask = DDS_STATUS_MASK_ALL);                  \
    virtual DDSDataWriterListener* get_listener();                   \
                                                                     \
    virtual DDS_ReturnCode_t enable();                               \
    virtual DDSStatusCondition* get_statuscondition();               \
    virtual DDS_StatusMask get_status_changes();                     \
    virtual DDS_InstanceHandle_t get_instance_handle();              \
                                                                     \
public:                                                              \
                                                                     \
  virtual DDS_InstanceHandle_t register_instance(                    \
                                const TData& instance_data);         \
                                                                     \
  virtual DDS_InstanceHandle_t register_instance_w_timestamp(        \
                                const TData& instance_data,          \
                                const DDS_Time_t& source_timestamp); \
                                                                     \
  virtual DDS_ReturnCode_t unregister_instance(                      \
                                const TData& instance_data,          \
			        const DDS_InstanceHandle_t& handle); \
                                                                     \
  virtual DDS_ReturnCode_t unregister_instance_w_timestamp(          \
                                const TData& instance_data,          \
			        const DDS_InstanceHandle_t& handle,  \
			        const DDS_Time_t& source_timestamp); \
                                                                     \
  virtual DDS_ReturnCode_t write(                                    \
                                const TData& instance_data,          \
                                const DDS_InstanceHandle_t& handle); \
                                                                     \
  virtual DDS_ReturnCode_t write_w_timestamp(                        \
                                const TData& instance_data,          \
  	 		        const DDS_InstanceHandle_t& handle,  \
 			        const DDS_Time_t& source_timestamp); \
                                                                     \
  virtual DDS_ReturnCode_t dispose(                                  \
                                const TData& instance_data,          \
 		                const DDS_InstanceHandle_t& handle); \
                                                                     \
  virtual DDS_ReturnCode_t dispose_w_timestamp(                      \
                            const TData& instance_data,              \
			    const DDS_InstanceHandle_t& handle,      \
			    const DDS_Time_t& source_timestamp);     \
                                                                     \
  virtual DDS_ReturnCode_t get_key_value(                            \
                            TData& key_holder,                       \
			    const DDS_InstanceHandle_t& handle);     \
                                                                     \
  virtual DDS_InstanceHandle_t lookup_instance(                      \
                                const TData& key_holder);            \
                                                                     \
protected:                                                           \
                                                                     \
  TDataWriter(DDSDataWriter* impl);                                  \
  virtual ~TDataWriter();                                            \
}


#define USE_TYPEDEF_TDATAWRITER(Foo)                                 \
   typedef  Foo ## DataWriter  TDataWriter;                          


#define DDS_DATAREADER_CPP(TDataReader, TDataSeq, TData)                 \
                                                                         \
class NDDSUSERDllExport DDSCPPDllExport TDataReader :                    \
        public DDSDataReader {                                           \
                                                                         \
  public:                                                                \
                                                                         \
    virtual DDSEntity_impl* get_impl_EntityI();                          \
                                                                         \
    virtual DDSReadCondition* create_readcondition(                      \
                                DDS_SampleStateMask sample_states,       \
    				DDS_ViewStateMask view_states,           \
    				DDS_InstanceStateMask instance_states);  \
                                                                         \
    virtual DDSQueryCondition* create_querycondition(                    \
                        DDS_SampleStateMask sample_states,               \
    			DDS_ViewStateMask view_states,                   \
    			DDS_InstanceStateMask instance_states,           \
    			const char* query,                               \
       		const struct DDS_StringSeq& query_parameters);           \
                                                                         \
    virtual DDS_ReturnCode_t delete_readcondition(                       \
           DDSReadCondition* condition);                                 \
                                                                         \
    virtual DDS_ReturnCode_t delete_contained_entities();                \
                                                                         \
    virtual DDS_ReturnCode_t wait_for_historical_data(                   \
           const DDS_Duration_t& max_wait);                              \
                                                                         \
    virtual DDS_ReturnCode_t get_matched_publications(                   \
	DDS_InstanceHandleSeq& publication_handles);                     \
                                                                         \
    virtual DDS_ReturnCode_t get_matched_publication_data(               \
	DDS_PublicationBuiltinTopicData& publication_data,               \
	const DDS_InstanceHandle_t& publication_handle);                 \
                                                                         \
    virtual DDSTopicDescription* get_topicdescription();                 \
                                                                         \
    virtual DDSSubscriber* get_subscriber();                             \
                                                                         \
    virtual DDS_ReturnCode_t set_qos(const DDS_DataReaderQos& qos);      \
                                                                         \
    virtual DDS_ReturnCode_t get_qos(DDS_DataReaderQos& qos);            \
                                                                         \
    virtual DDS_ReturnCode_t set_listener(DDSDataReaderListener* l,      \
        DDS_StatusMask mask = DDS_STATUS_MASK_ALL);                 \
                                                                         \
    virtual DDSDataReaderListener* get_listener();                       \
                                                                         \
    virtual DDS_ReturnCode_t get_sample_rejected_status(                 \
        DDS_SampleRejectedStatus& status);                               \
                                                                         \
    virtual DDS_ReturnCode_t get_liveliness_changed_status(              \
        	DDS_LivelinessChangedStatus& status);                    \
                                                                         \
    virtual DDS_ReturnCode_t get_requested_deadline_missed_status(       \
        	DDS_RequestedDeadlineMissedStatus& status);              \
                                                                         \
    virtual DDS_ReturnCode_t get_requested_incompatible_qos_status(      \
        	DDS_RequestedIncompatibleQosStatus& status);             \
                                                                         \
    virtual DDS_ReturnCode_t get_sample_lost_status(                     \
        	DDS_SampleLostStatus& status);                           \
                                                                         \
    virtual DDS_ReturnCode_t get_subscription_matched_status(            \
        	DDS_SubscriptionMatchedStatus& status);                  \
                                                                         \
  public:                                                                \
                                                                         \
  virtual DDS_ReturnCode_t read(TDataSeq& received_data,                 \
   	DDS_SampleInfoSeq& info_seq,                                     \
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     \
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        \
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              \
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); \
                                                                         \
  virtual DDS_ReturnCode_t take(TDataSeq& received_data,                 \
        DDS_SampleInfoSeq& info_seq,                                     \
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     \
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        \
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              \
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); \
                                                                         \
  virtual DDS_ReturnCode_t read_w_condition(TDataSeq& received_data,     \
 				      DDS_SampleInfoSeq& info_seq,       \
                                      DDS_Long max_samples,              \
 				      DDSReadCondition* condition);      \
                                                                         \
  virtual DDS_ReturnCode_t take_w_condition(TDataSeq& received_data,     \
 				      DDS_SampleInfoSeq& info_seq,       \
                                      DDS_Long max_samples,              \
 				      DDSReadCondition* condition);      \
                                                                         \
  virtual DDS_ReturnCode_t read_next_sample(TData& received_data,        \
   			  DDS_SampleInfo& sample_info);                  \
                                                                         \
  virtual DDS_ReturnCode_t take_next_sample(TData& received_data,        \
 			  DDS_SampleInfo& sample_info);                  \
                                                                         \
  virtual DDS_ReturnCode_t read_instance(TDataSeq& received_data,        \
        DDS_SampleInfoSeq& info_seq,                                     \
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     \
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,           \
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        \
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              \
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); \
                                                                         \
  virtual DDS_ReturnCode_t take_instance(TDataSeq& received_data,        \
        DDS_SampleInfoSeq& info_seq,                                     \
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     \
        const DDS_InstanceHandle_t& a_handle = DDS_HANDLE_NIL,           \
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        \
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              \
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); \
                                                                         \
  virtual DDS_ReturnCode_t read_next_instance(TDataSeq& received_data,   \
        DDS_SampleInfoSeq& info_seq,                                     \
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     \
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,    \
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        \
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              \
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); \
                                                                         \
  virtual DDS_ReturnCode_t take_next_instance(TDataSeq& received_data,   \
        DDS_SampleInfoSeq& info_seq,                                     \
        DDS_Long max_samples = DDS_LENGTH_UNLIMITED,                     \
        const DDS_InstanceHandle_t& previous_handle = DDS_HANDLE_NIL,    \
        DDS_SampleStateMask sample_states = DDS_ANY_SAMPLE_STATE,        \
        DDS_ViewStateMask view_states = DDS_ANY_VIEW_STATE,              \
        DDS_InstanceStateMask instance_states = DDS_ANY_INSTANCE_STATE); \
                                                                         \
  virtual DDS_ReturnCode_t read_next_instance_w_condition(               \
                          TDataSeq& received_data,                       \
 			  DDS_SampleInfoSeq& info_seq,                   \
                          DDS_Long max_samples,                          \
                          const DDS_InstanceHandle_t& previous_handle,   \
 			  DDSReadCondition* condition);                  \
                                                                         \
  virtual DDS_ReturnCode_t take_next_instance_w_condition(               \
                          TDataSeq& received_data,                       \
 			  DDS_SampleInfoSeq& info_seq,                   \
                          DDS_Long max_samples,                          \
                          const DDS_InstanceHandle_t& previous_handle,   \
 			  DDSReadCondition* condition);                  \
                                                                         \
  virtual DDS_ReturnCode_t return_loan(TDataSeq& received_data,          \
                          DDS_SampleInfoSeq& info_seq);                  \
                                                                         \
  virtual DDS_ReturnCode_t get_key_value(TData& key_holder,              \
				    const DDS_InstanceHandle_t& handle); \
                                                                         \
  virtual DDS_InstanceHandle_t lookup_instance(                          \
                                const TData& key_holder);                \
                                                                         \
    virtual DDS_ReturnCode_t enable();                                   \
                                                                         \
    virtual DDSStatusCondition* get_statuscondition();                   \
                                                                         \
    virtual DDS_StatusMask get_status_changes();                         \
                                                                         \
    virtual DDS_InstanceHandle_t get_instance_handle();                  \
                                                                         \
  public:                                                                \
                                                                         \
    static TDataReader* createI(DDSDataReader* dataReader);              \
    static DDS_ReturnCode_t destroyI(TDataReader* dataReader);           \
                                                                         \
    static TDataReader* narrow(DDSDataReader *reader);                   \
                                                                         \
  private:                                                               \
    virtual DDS_ReturnCode_t read_or_takeI(TDataSeq& received_data,      \
				  DDS_SampleInfoSeq& info_seq,           \
				  DDS_Long max_samples,                  \
				  DDS_SampleStateMask sample_states,     \
				  DDS_ViewStateMask view_states,         \
				  DDS_InstanceStateMask instance_states, \
				  bool take);                            \
                                                                         \
    virtual DDS_ReturnCode_t read_or_take_w_conditionI(                  \
                                  TDataSeq& received_data,               \
				  DDS_SampleInfoSeq& info_seq,           \
				  DDS_Long max_samples,                  \
                                  DDSReadCondition* condition,           \
				  bool take);                            \
                                                                         \
    virtual DDS_ReturnCode_t read_or_take_next_sampleI(                  \
                                  TData& received_data,                  \
				  DDS_SampleInfo& sample_info,           \
				  bool take);                            \
                                                                         \
    virtual DDS_ReturnCode_t read_or_take_instanceI(                     \
                                  TDataSeq& received_data,               \
				  DDS_SampleInfoSeq& info_seq,           \
				  DDS_Long max_samples,                  \
                                  const DDS_InstanceHandle_t& a_handle,  \
				  DDS_SampleStateMask sample_states,     \
				  DDS_ViewStateMask view_states,         \
				  DDS_InstanceStateMask instance_states, \
				  bool take);                            \
                                                                         \
    virtual DDS_ReturnCode_t read_or_take_next_instanceI(                \
                                  TDataSeq& received_data,               \
				  DDS_SampleInfoSeq& info_seq,           \
				  DDS_Long max_samples,                  \
                          const DDS_InstanceHandle_t& previous_handle,    \
				  DDS_SampleStateMask sample_states,     \
				  DDS_ViewStateMask view_states,         \
				  DDS_InstanceStateMask instance_states, \
				  bool take);                            \
                                                                         \
    virtual DDS_ReturnCode_t read_or_take_next_instance_w_conditionI(    \
                                  TDataSeq& received_data,               \
				  DDS_SampleInfoSeq& info_seq,           \
				  DDS_Long max_samples,                  \
                          const DDS_InstanceHandle_t& previous_handle,    \
                                  DDSReadCondition* condition,           \
				  bool take);                            \
                                                                         \
  protected:                                                             \
                                                                         \
    TDataReader(DDSDataReader* impl);                                    \
                                                                         \
  protected:                                                             \
  virtual ~TDataReader();                                                \
}

#endif /* dds_cpp_data_h */
