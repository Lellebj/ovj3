/*
 * @(#)ndds_namespace_cpp.h    generated by: makeheader    Mon Dec  3 23:08:34 2007
 *
 *		built from:	ndds_namespace_cpp.ifcxx
 */

#ifndef ndds_namespace_cpp_h
#define ndds_namespace_cpp_h



 #ifndef ndds_cpp_h
    #include "ndds/ndds_cpp.h"
  #endif

/*To fix compiler issues on some Integrity architectures, TheParticipantFactory is defined 
as a macro, which means that it can be invoqued after including the namespace header file only
(no need to invoque using namespace DDS first)*/
#define TheParticipantFactory DDSDomainParticipantFactory::get_instance()

namespace DDS {
    // ----------------------------------------------------------------------
    // Primitive data types
    // ----------------------------------------------------------------------
#ifndef NDDS_EXCLUDE_PRIMITIVE_TYPES_FROM_NAMESPACE
    typedef DDS_Char Char;
    typedef DDS_CharSeq CharSeq;
    typedef DDS_Wchar Wchar;
    typedef DDS_WcharSeq WcharSeq;
    typedef DDS_Octet Octet;
    typedef DDS_OctetSeq OctetSeq;
    typedef DDS_Short Short;
    typedef DDS_ShortSeq ShortSeq;
    typedef DDS_UnsignedShort UnsignedShort;
    typedef DDS_UnsignedShortSeq UnsignedShortSeq;
    typedef DDS_Long Long;
    typedef DDS_LongSeq LongSeq;
    typedef DDS_UnsignedLong UnsignedLong;
    typedef DDS_UnsignedLongSeq UnsignedLongSeq;
    typedef DDS_LongLong LongLong;
    typedef DDS_LongLongSeq LongLongSeq;
    typedef DDS_UnsignedLongLong UnsignedLongLong;
    typedef DDS_UnsignedLongLongSeq UnsignedLongLongSeq; 
    typedef DDS_Float Float;
    typedef DDS_FloatSeq FloatSeq;
    typedef DDS_Double Double;
    typedef DDS_DoubleSeq DoubleSeq;
    typedef DDS_LongDouble LongDouble;
    typedef DDS_LongDoubleSeq LongDoubleSeq;
    typedef DDS_Enum Enum;
#ifndef RTI_INTY
    typedef DDS_Boolean Boolean;
    typedef DDS_BooleanSeq BooleanSeq;
#endif

#endif

    // ----------------------------------------------------------------------
    // Basic types
    // ----------------------------------------------------------------------
    typedef DDS_DomainId_t            DomainId_t;
    typedef DDS_InstanceId_t          InstanceId_t;
    typedef DDS_InstanceHandle_t      InstanceHandle_t;
    typedef DDS_BuiltinTopicKey_t     BuiltinTopicKey_t;

    typedef DDS_InstanceHandleSeq     InstanceHandleSeq;

    typedef DDS_ReturnCode_t          ReturnCode_t;
    typedef DDS_ExceptionCode_t       ExceptionCode_t;
    typedef DDS_QosPolicyId_t         QosPolicyId_t;
    typedef DDS_StringSeq             StringSeq;
    typedef DDS_WstringSeq            WstringSeq;

    typedef DDS_Duration_t            Duration_t;
    typedef DDS_Time_t                Time_t;

    typedef DDS_SequenceNumber_t      SequenceNumber_t;
    typedef DDS_GUID_t                GUID_t;

    typedef DDS_Locator_t             Locator_t;
    typedef DDS_LocatorSeq            LocatorSeq;
    typedef DDS_ProtocolVersion_t     ProtocolVersion_t;
    typedef DDS_VendorId_t            VendorId_t;
    typedef DDS_ContentFilterProperty_t ContentFilterProperty_t;
    typedef DDS_ProductVersion_t      ProductVersion_t;
    typedef DDS_DiscoveryPluginPromiscuityKind DiscoveryPluginPromiscuityKind;
    // ----------------------------------------------------------------------
    // TypeCodes
    // ----------------------------------------------------------------------
    typedef DDS_TCKind                   TCKind;
    typedef DDS_ValueModifier            ValueModifier;
    typedef DDS_Visibility               Visibility;
    typedef DDS_TypeCode_Member          TypeCode_Member;
    typedef DDS_TypeCode                 TypeCode;
    typedef DDS_TypeCodeFactory          TypeCodeFactory;
    typedef DDS_StructMember             StructMember;
    typedef DDS_StructMemberSeq          StructMemberSeq;
    typedef DDS_UnionMember              UnionMember;
    typedef DDS_UnionMemberSeq           UnionMemberSeq;
    typedef DDS_EnumMember               EnumMember;
    typedef DDS_EnumMemberSeq            EnumMemberSeq;
    typedef DDS_ValueMember              ValueMember;
    typedef DDS_ValueMemberSeq           ValueMemberSeq;
 
    // ----------------------------------------------------------------------
    // Pre-defined values
    // ----------------------------------------------------------------------

#if !(defined(RTI_VXWORKS) && !defined(__RTP__))
    extern DDSCPPDllVariable const DDS_InstanceHandle_t      &HANDLE_NIL;

    extern DDSCPPDllVariable const DDS_Long         &LENGTH_UNLIMITED;

    extern DDSCPPDllVariable const DDS_Long         &DURATION_INFINITE_SEC;
    extern DDSCPPDllVariable const DDS_UnsignedLong &DURATION_INFINITE_NSEC;
    extern DDSCPPDllVariable const DDS_Duration_t   &DURATION_INFINITE;

    extern DDSCPPDllVariable const DDS_Long         &DURATION_ZERO_SEC;
    extern DDSCPPDllVariable const DDS_UnsignedLong &DURATION_ZERO_NSEC;
    extern DDSCPPDllVariable const DDS_Duration_t   &DURATION_ZERO;

    extern DDSCPPDllVariable const DDS_Long         &TIME_INVALID_SEC;
    extern DDSCPPDllVariable const DDS_UnsignedLong &TIME_INVALID_NSEC;
    extern DDSCPPDllVariable const DDS_Time_t       &TIME_INVALID;

    /*i deprecated */
    extern DDSCPPDllVariable const DDS_Long         &DURATION_INFINITY_SEC;
    extern DDSCPPDllVariable const DDS_UnsignedLong &DURATION_INFINITY_NSEC;
    extern DDSCPPDllVariable const DDS_Long         &TIMESTAMP_INVALID_SEC;
    extern DDSCPPDllVariable const DDS_UnsignedLong &TIMESTAMP_INVALID_NSEC;

    extern DDSCPPDllVariable const DDS_SequenceNumber_t &SEQUENCE_NUMBER_UNKNOWN;
    extern DDSCPPDllVariable const DDS_SequenceNumber_t &SEQUENCE_NUMBER_ZERO;
    extern DDSCPPDllVariable const DDS_SequenceNumber_t &SEQUENCE_NUMBER_MAX;

    extern DDSCPPDllVariable const DDS_GUID_t &GUID_UNKNOWN;
    extern DDSCPPDllVariable const DDS_GUID_t &GUID_AUTO;
    
    extern DDSCDllVariable const DDS_Locator_t         &LOCATOR_INVALID;
#else
    const DDS_InstanceHandle_t      &HANDLE_NIL = DDS_HANDLE_NIL;

    const DDS_Long         &LENGTH_UNLIMITED = DDS_LENGTH_UNLIMITED;

    const DDS_Long         &DURATION_INFINITE_SEC = DDS_DURATION_INFINITE_SEC;
    const DDS_UnsignedLong &DURATION_INFINITE_NSEC = DDS_DURATION_INFINITE_NSEC;
    const DDS_Duration_t   &DURATION_INFINITE = DDS_DURATION_INFINITE;

    const DDS_Long         &DURATION_ZERO_SEC = DDS_DURATION_ZERO_SEC;
    const DDS_UnsignedLong &DURATION_ZERO_NSEC = DDS_DURATION_ZERO_NSEC;
    const DDS_Duration_t   &DURATION_ZERO = DDS_DURATION_ZERO;

    const DDS_Long         &TIME_INVALID_SEC = DDS_TIME_INVALID_SEC;
    const DDS_UnsignedLong &TIME_INVALID_NSEC = DDS_TIME_INVALID_NSEC;
    const DDS_Time_t       &TIME_INVALID = DDS_TIME_INVALID;

    /*i deprecated */
    const DDS_Long         &DURATION_INFINITY_SEC = DDS_DURATION_INFINITY_SEC;
    const DDS_UnsignedLong &DURATION_INFINITY_NSEC = DDS_DURATION_INFINITY_NSEC;
    const DDS_Long         &TIMESTAMP_INVALID_SEC = DDS_TIMESTAMP_INVALID_SEC;
    const DDS_UnsignedLong &TIMESTAMP_INVALID_NSEC = DDS_TIMESTAMP_INVALID_NSEC;

    const DDS_SequenceNumber_t &SEQUENCE_NUMBER_UNKNOWN = DDS_SEQUENCE_NUMBER_UNKNOWN;
    const DDS_SequenceNumber_t &SEQUENCE_NUMBER_ZERO = DDS_SEQUENCE_NUMBER_ZERO;
    const DDS_SequenceNumber_t &SEQUENCE_NUMBER_MAX = DDS_SEQUENCE_NUMBER_MAX;

    const DDS_GUID_t &GUID_UNKNOWN = DDS_GUID_UNKNOWN;
    const DDS_GUID_t &GUID_AUTO = DDS_GUID_AUTO;

    const DDS_Locator_t         &LOCATOR_INVALID = DDS_LOCATOR_INVALID;
#endif

    // ----------------------------------------------------------------------
    // Return codes
    // ----------------------------------------------------------------------
    extern DDSCPPDllVariable const DDS_ReturnCode_t RETCODE_OK;
    extern DDSCPPDllVariable const DDS_ReturnCode_t RETCODE_ERROR;
    extern DDSCPPDllVariable const DDS_ReturnCode_t RETCODE_UNSUPPORTED;
    extern DDSCPPDllVariable const DDS_ReturnCode_t RETCODE_BAD_PARAMETER;
    extern DDSCPPDllVariable const DDS_ReturnCode_t RETCODE_PRECONDITION_NOT_MET;
    extern DDSCPPDllVariable const DDS_ReturnCode_t RETCODE_OUT_OF_RESOURCES;
    extern DDSCPPDllVariable const DDS_ReturnCode_t RETCODE_NOT_ENABLED;
    extern DDSCPPDllVariable const DDS_ReturnCode_t RETCODE_IMMUTABLE_POLICY;
    extern DDSCPPDllVariable const DDS_ReturnCode_t RETCODE_INCONSISTENT_POLICY;
    extern DDSCPPDllVariable const DDS_ReturnCode_t RETCODE_ALREADY_DELETED;
    extern DDSCPPDllVariable const DDS_ReturnCode_t RETCODE_TIMEOUT;
    extern DDSCPPDllVariable const DDS_ReturnCode_t RETCODE_NO_DATA;
    extern DDSCPPDllVariable const DDS_ReturnCode_t RETCODE_ILLEGAL_OPERATION;
    
    // ----------------------------------------------------------------------
    // Type codes
    // ----------------------------------------------------------------------
    extern DDSCPPDllVariable const DDS_TCKind       TK_NULL;
    extern DDSCPPDllVariable const DDS_TCKind       TK_SHORT;
    extern DDSCPPDllVariable const DDS_TCKind       TK_LONG;
    extern DDSCPPDllVariable const DDS_TCKind       TK_USHORT;
    extern DDSCPPDllVariable const DDS_TCKind       TK_ULONG;
    extern DDSCPPDllVariable const DDS_TCKind       TK_FLOAT;
    extern DDSCPPDllVariable const DDS_TCKind       TK_DOUBLE;
    extern DDSCPPDllVariable const DDS_TCKind       TK_BOOLEAN;
    extern DDSCPPDllVariable const DDS_TCKind       TK_CHAR;
    extern DDSCPPDllVariable const DDS_TCKind       TK_OCTET;
    extern DDSCPPDllVariable const DDS_TCKind       TK_STRUCT;
    extern DDSCPPDllVariable const DDS_TCKind       TK_UNION;
    extern DDSCPPDllVariable const DDS_TCKind       TK_ENUM;
    extern DDSCPPDllVariable const DDS_TCKind       TK_STRING;
    extern DDSCPPDllVariable const DDS_TCKind       TK_SEQUENCE;
    extern DDSCPPDllVariable const DDS_TCKind       TK_ARRAY;
    extern DDSCPPDllVariable const DDS_TCKind       TK_ALIAS;
    extern DDSCPPDllVariable const DDS_TCKind       TK_LONGLONG;
    extern DDSCPPDllVariable const DDS_TCKind       TK_ULONGLONG;
    extern DDSCPPDllVariable const DDS_TCKind       TK_LONGDOUBLE;
    extern DDSCPPDllVariable const DDS_TCKind       TK_WCHAR;
    extern DDSCPPDllVariable const DDS_TCKind       TK_WSTRING;
    extern DDSCPPDllVariable const DDS_TCKind       TK_VALUE;

    // ----------------------------------------------------------------------
    // Exception codes
    // ----------------------------------------------------------------------
    extern DDSCPPDllVariable const DDS_ExceptionCode_t NO_EXCEPTION_CODE;
    extern DDSCPPDllVariable const DDS_ExceptionCode_t USER_EXCEPTION_CODE;
    extern DDSCPPDllVariable const DDS_ExceptionCode_t SYSTEM_EXCEPTION_CODE;
    extern DDSCPPDllVariable const DDS_ExceptionCode_t BAD_PARAM_SYSTEM_EXCEPTION_CODE;
    extern DDSCPPDllVariable const DDS_ExceptionCode_t NO_MEMORY_SYSTEM_EXCEPTION_CODE;
    extern DDSCPPDllVariable const DDS_ExceptionCode_t BAD_TYPECODE_SYSTEM_EXCEPTION_CODE;
    extern DDSCPPDllVariable const DDS_ExceptionCode_t BADKIND_USER_EXCEPTION_CODE;
    extern DDSCPPDllVariable const DDS_ExceptionCode_t BOUNDS_USER_EXCEPTION_CODE;
    


    // ----------------------------------------------------------------------
    // Status to support listeners and conditions
    // ----------------------------------------------------------------------

    typedef DDS_StatusKind StatusKind;
    typedef DDS_StatusMask StatusMask;

    extern DDSCPPDllVariable const DDS_StatusKind INCONSISTENT_TOPIC_STATUS;
    extern DDSCPPDllVariable const DDS_StatusKind OFFERED_DEADLINE_MISSED_STATUS;
    extern DDSCPPDllVariable const DDS_StatusKind REQUESTED_DEADLINE_MISSED_STATUS;
    extern DDSCPPDllVariable const DDS_StatusKind OFFERED_INCOMPATIBLE_QOS_STATUS;
    extern DDSCPPDllVariable const DDS_StatusKind REQUESTED_INCOMPATIBLE_QOS_STATUS;
    extern DDSCPPDllVariable const DDS_StatusKind SAMPLE_LOST_STATUS;
    extern DDSCPPDllVariable const DDS_StatusKind SAMPLE_REJECTED_STATUS;
    extern DDSCPPDllVariable const DDS_StatusKind DATA_ON_READERS_STATUS;
    extern DDSCPPDllVariable const DDS_StatusKind DATA_AVAILABLE_STATUS;
    extern DDSCPPDllVariable const DDS_StatusKind LIVELINESS_LOST_STATUS;
    extern DDSCPPDllVariable const DDS_StatusKind LIVELINESS_CHANGED_STATUS;

    extern DDSCPPDllVariable const DDS_StatusKind PUBLICATION_MATCHED_STATUS;
    extern DDSCPPDllVariable const DDS_StatusKind SUBSCRIPTION_MATCHED_STATUS;

    extern DDSCPPDllVariable const DDS_StatusKind RELIABLE_WRITER_CACHE_CHANGED_STATUS;
    extern DDSCPPDllVariable const DDS_StatusKind RELIABLE_READER_ACTIVITY_CHANGED_STATUS;


    extern DDSCPPDllVariable const DDS_SampleRejectedStatusKind NOT_REJECTED;
    extern DDSCPPDllVariable const DDS_SampleRejectedStatusKind REJECTED_BY_INSTANCES_LIMIT;
    extern DDSCPPDllVariable const DDS_SampleRejectedStatusKind REJECTED_BY_SAMPLES_LIMIT;
    extern DDSCPPDllVariable const DDS_SampleRejectedStatusKind REJECTED_BY_SAMPLES_PER_INSTANCE_LIMIT;
    extern DDSCPPDllVariable const DDS_SampleRejectedStatusKind REJECTED_BY_REMOTE_WRITERS_LIMIT;    
    extern DDSCPPDllVariable const DDS_SampleRejectedStatusKind REJECTED_BY_REMOTE_WRITERS_PER_INSTANCE_LIMIT;
    extern DDSCPPDllVariable const DDS_SampleRejectedStatusKind REJECTED_BY_SAMPLES_PER_REMOTE_WRITER_LIMIT;

    /*i deprecated */
    extern DDSCPPDllVariable const DDS_SampleRejectedStatusKind REJECTED_BY_INSTANCE_LIMIT;

    typedef DDS_InconsistentTopicStatus         InconsistentTopicStatus;
    typedef DDS_SampleLostStatus                SampleLostStatus;
    typedef DDS_SampleRejectedStatusKind        SampleRejectedStatusKind;
    typedef DDS_SampleRejectedStatus            SampleRejectedStatus;
    typedef DDS_LivelinessLostStatus            LivelinessLostStatus;
    typedef DDS_LivelinessChangedStatus         LivelinessChangedStatus;
    typedef DDS_OfferedDeadlineMissedStatus     OfferedDeadlineMissedStatus;
    typedef DDS_RequestedDeadlineMissedStatus   RequestedDeadlineMissedStatus;
    typedef DDS_QosPolicyCount                  QosPolicyCount;
    typedef DDS_QosPolicyCountSeq               QosPolicyCountSeq;
    typedef DDS_OfferedIncompatibleQosStatus    OfferedIncompatibleQosStatus;
    typedef DDS_RequestedIncompatibleQosStatus  RequestedIncompatibleQosStatus;
    typedef DDS_PublicationMatchedStatus        PublicationMatchedStatus;
    typedef DDS_SubscriptionMatchedStatus       SubscriptionMatchedStatus;
    typedef DDS_ReliableReaderActivityChangedStatus  ReliableReaderActivityChangedStatus;
    typedef DDS_ReliableWriterCacheChangedStatus     ReliableWriterCacheChangedStatus;
    typedef DDS_ReliableWriterCacheEventCount        ReliableWriterCacheEventCount;
    
    // ----------------------------------------------------------------------
    // Listeners 
    // ----------------------------------------------------------------------
    typedef DDSListener                   Listener; 
    typedef DDSTopicListener              TopicListener;
    typedef DDSDataWriterListener         DataWriterListener;
    typedef DDSPublisherListener          PublisherListener;
    typedef DDSDataReaderListener         DataReaderListener;
    typedef DDSSubscriberListener         SubscriberListener;
    typedef DDSDomainParticipantListener  DomainParticipantListener;
    typedef DDS_DomainParticipantFactoryEntityListener   DomainParticipantFactoryEntityListener;

    // ----------------------------------------------------------------------
    // Conditions
    // ----------------------------------------------------------------------

#ifndef RTI_INTY
    typedef DDSCondition        Condition;
    typedef DDSConditionSeq     ConditionSeq;
    typedef DDSCondition_ptr    Condition_ptr;
#endif
    typedef DDSWaitSet          WaitSet;
    typedef DDSGuardCondition   GuardCondition;
    typedef DDSStatusCondition  StatusCondition;

    // Sample states to support reads
    typedef DDS_SampleStateKind  SampleStateKind;
    extern DDSCPPDllVariable const DDS_SampleStateKind        READ_SAMPLE_STATE;
    extern DDSCPPDllVariable const DDS_SampleStateKind        NOT_READ_SAMPLE_STATE;

    // This is a bit-mask SampleStateKind
    typedef DDS_SampleStateMask  SampleStateMask;

    // View states to support reads
    typedef DDS_ViewStateKind    ViewStateKind;
    extern DDSCPPDllVariable const DDS_ViewStateKind          NEW_VIEW_STATE;
    extern DDSCPPDllVariable const DDS_ViewStateKind          NOT_NEW_VIEW_STATE;

    // This is a bit-mask ViewStateKind
    typedef DDS_ViewStateMask    ViewStateMask;

    // Instance states to support reads
    typedef DDS_InstanceStateKind InstanceStateKind;
    extern DDSCPPDllVariable const DDS_InstanceStateKind       ALIVE_INSTANCE_STATE;
    extern DDSCPPDllVariable const DDS_InstanceStateKind       NOT_ALIVE_DISPOSED_INSTANCE_STATE;
    extern DDSCPPDllVariable const DDS_InstanceStateKind       NOT_ALIVE_NO_WRITERS_INSTANCE_STATE;

    // This is a bit-mask InstanceStateKind
    typedef DDS_InstanceStateMask InstanceStateMask;

    typedef DDSReadCondition   ReadCondition;
    typedef DDSQueryCondition  QueryCondition;

    typedef DDS_SampleInfo               SampleInfo;
    typedef DDS_SampleInfoSeq            SampleInfoSeq;

#if !(defined(RTI_VXWORKS) && !defined(__RTP__))

    extern DDSCPPDllVariable const DDS_SampleStateMask       &ANY_SAMPLE_STATE;
    extern DDSCPPDllVariable const DDS_ViewStateMask          &ANY_VIEW_STATE;
    extern DDSCPPDllVariable const DDS_InstanceStateMask       &ANY_INSTANCE_STATE;
    extern DDSCPPDllVariable const DDS_InstanceStateMask       &NOT_ALIVE_INSTANCE_STATE;

#else

    const DDS_SampleStateMask       &ANY_SAMPLE_STATE = DDS_ANY_SAMPLE_STATE;
    const DDS_ViewStateMask          &ANY_VIEW_STATE = DDS_ANY_VIEW_STATE;
    const DDS_InstanceStateMask       &ANY_INSTANCE_STATE = DDS_ANY_INSTANCE_STATE;
    const DDS_InstanceStateMask       &NOT_ALIVE_INSTANCE_STATE = DDS_NOT_ALIVE_INSTANCE_STATE;
#endif

    // ----------------------------------------------------------------------
    // Qos
    // ----------------------------------------------------------------------

#if !(defined(RTI_VXWORKS) && !defined(__RTP__))
    extern DDSCPPDllVariable const char *const &USERDATA_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &DURABILITY_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &PRESENTATION_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &DEADLINE_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &LATENCYBUDGET_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &OWNERSHIP_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &OWNERSHIPSTRENGTH_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &LIVELINESS_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &TIMEBASEDFILTER_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &PARTITION_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &RELIABILITY_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &DESTINATIONORDER_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &HISTORY_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &RESOURCELIMITS_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &ENTITYFACTORY_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &WRITERDATALIFECYCLE_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &READERDATALIFECYCLE_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &TOPICDATA_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &GROUPDATA_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &TRANSPORTPRIORITY_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &LIFESPAN_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &DURABILITYSERVICE_QOS_POLICY_NAME;

    extern DDSCPPDllVariable const char *const &TRANSPORTSELECTION_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &TRANSPORTUNICAST_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &TRANSPORTMULTICAST_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &DISCOVERY_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &TRANSPORTBUILTIN_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &WIREPROTOCOL_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &DATAREADERRESOURCELIMITS_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &DATAWRITERRESOURCELIMITS_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &DATAREADERPROTOCOL_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &DATAWRITERPROTOCOL_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &SYSTEMRESOURCELIMITS_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &DOMAINPARTICIPANTRESOURCELIMITS_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &EVENT_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &DATABASE_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &RECEIVERPOOL_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &DISCOVERYCONFIG_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &USEROBJECT_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &EXCLUSIVEAREA_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &TYPESUPPORT_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &PROPERTY_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &ASYNCHRONOUSPUBLISHER_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &PUBLISHMODE_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &STATISTICS_QOS_POLICY_NAME;
    extern DDSCPPDllVariable const char *const &ENTITYNAME_QOS_POLICY_NAME;
#else
    const char *const &USERDATA_QOS_POLICY_NAME = DDS_USERDATA_QOS_POLICY_NAME;
    const char *const &DURABILITY_QOS_POLICY_NAME = DDS_DURABILITY_QOS_POLICY_NAME;
    const char *const &PRESENTATION_QOS_POLICY_NAME = DDS_PRESENTATION_QOS_POLICY_NAME;
    const char *const &DEADLINE_QOS_POLICY_NAME = DDS_DEADLINE_QOS_POLICY_NAME;
    const char *const &LATENCYBUDGET_QOS_POLICY_NAME = DDS_LATENCYBUDGET_QOS_POLICY_NAME;
    const char *const &OWNERSHIP_QOS_POLICY_NAME = DDS_OWNERSHIP_QOS_POLICY_NAME;
    const char *const &OWNERSHIPSTRENGTH_QOS_POLICY_NAME = DDS_OWNERSHIPSTRENGTH_QOS_POLICY_NAME;
    const char *const &LIVELINESS_QOS_POLICY_NAME = DDS_LIVELINESS_QOS_POLICY_NAME;
    const char *const &TIMEBASEDFILTER_QOS_POLICY_NAME = DDS_TIMEBASEDFILTER_QOS_POLICY_NAME;
    const char *const &PARTITION_QOS_POLICY_NAME = DDS_PARTITION_QOS_POLICY_NAME;
    const char *const &RELIABILITY_QOS_POLICY_NAME = DDS_RELIABILITY_QOS_POLICY_NAME;
    const char *const &DESTINATIONORDER_QOS_POLICY_NAME = DDS_DESTINATIONORDER_QOS_POLICY_NAME;
    const char *const &HISTORY_QOS_POLICY_NAME = DDS_HISTORY_QOS_POLICY_NAME;
    const char *const &RESOURCELIMITS_QOS_POLICY_NAME = DDS_RESOURCELIMITS_QOS_POLICY_NAME;
    const char *const &ENTITYFACTORY_QOS_POLICY_NAME = DDS_ENTITYFACTORY_QOS_POLICY_NAME;
    const char *const &WRITERDATALIFECYCLE_QOS_POLICY_NAME = DDS_WRITERDATALIFECYCLE_QOS_POLICY_NAME;
    const char *const &READERDATALIFECYCLE_QOS_POLICY_NAME = DDS_READERDATALIFECYCLE_QOS_POLICY_NAME;
    const char *const &TOPICDATA_QOS_POLICY_NAME = DDS_TOPICDATA_QOS_POLICY_NAME;
    const char *const &GROUPDATA_QOS_POLICY_NAME = DDS_GROUPDATA_QOS_POLICY_NAME;
    const char *const &TRANSPORTPRIORITY_QOS_POLICY_NAME = DDS_TRANSPORTPRIORITY_QOS_POLICY_NAME;
    const char *const &LIFESPAN_QOS_POLICY_NAME = DDS_LIFESPAN_QOS_POLICY_NAME;
    const char *const &DURABILITYSERVICE_QOS_POLICY_NAME = DDS_DURABILITYSERVICE_QOS_POLICY_NAME;

    const char *const &TRANSPORTSELECTION_QOS_POLICY_NAME = DDS_TRANSPORTSELECTION_QOS_POLICY_NAME;
    const char *const &TRANSPORTUNICAST_QOS_POLICY_NAME = DDS_TRANSPORTUNICAST_QOS_POLICY_NAME;
    const char *const &TRANSPORTMULTICAST_QOS_POLICY_NAME = DDS_TRANSPORTMULTICAST_QOS_POLICY_NAME;
    const char *const &DISCOVERY_QOS_POLICY_NAME = DDS_DISCOVERY_QOS_POLICY_NAME;
    const char *const &TRANSPORTBUILTIN_QOS_POLICY_NAME = DDS_TRANSPORTBUILTIN_QOS_POLICY_NAME;
    const char *const &WIREPROTOCOL_QOS_POLICY_NAME = DDS_WIREPROTOCOL_QOS_POLICY_NAME;
    const char *const &DATAREADERRESOURCELIMITS_QOS_POLICY_NAME = DDS_DATAREADERRESOURCELIMITS_QOS_POLICY_NAME;
    const char *const &DATAWRITERRESOURCELIMITS_QOS_POLICY_NAME = DDS_DATAWRITERRESOURCELIMITS_QOS_POLICY_NAME;
    const char *const &DATAREADERPROTOCOL_QOS_POLICY_NAME = DDS_DATAREADERPROTOCOL_QOS_POLICY_NAME;
    const char *const &DATAWRITERPROTOCOL_QOS_POLICY_NAME = DDS_DATAWRITERPROTOCOL_QOS_POLICY_NAME;
    const char *const &SYSTEMRESOURCELIMITS_QOS_POLICY_NAME = DDS_SYSTEMRESOURCELIMITS_QOS_POLICY_NAME;
    const char *const &DOMAINPARTICIPANTRESOURCELIMITS_QOS_POLICY_NAME = DDS_DOMAINPARTICIPANTRESOURCELIMITS_QOS_POLICY_NAME;
    const char *const &EVENT_QOS_POLICY_NAME = DDS_EVENT_QOS_POLICY_NAME;
    const char *const &DATABASE_QOS_POLICY_NAME = DDS_DATABASE_QOS_POLICY_NAME;
    const char *const &RECEIVERPOOL_QOS_POLICY_NAME = DDS_RECEIVERPOOL_QOS_POLICY_NAME;
    const char *const &DISCOVERYCONFIG_QOS_POLICY_NAME = DDS_DISCOVERYCONFIG_QOS_POLICY_NAME;
    const char *const &USEROBJECT_QOS_POLICY_NAME = DDS_USEROBJECT_QOS_POLICY_NAME;
    const char *const &EXCLUSIVEAREA_QOS_POLICY_NAME = DDS_EXCLUSIVEAREA_QOS_POLICY_NAME;
    const char *const &TYPESUPPORT_QOS_POLICY_NAME = DDS_TYPESUPPORT_QOS_POLICY_NAME;
    const char *const &PROPERTY_QOS_POLICY_NAME = DDS_PROPERTY_QOS_POLICY_NAME;
    const char *const &ASYNCHRONOUSPUBLISHER_QOS_POLICY_NAME = DDS_ASYNCHRONOUSPUBLISHER_QOS_POLICY_NAME;
    const char *const &PUBLISHMODE_QOS_POLICY_NAME = DDS_PUBLISHMODE_QOS_POLICY_NAME;
    const char *const &STATISTICS_QOS_POLICY_NAME = DDS_STATISTICS_QOS_POLICY_NAME;
    const char *const &ENTITYNAME_QOS_POLICY_NAME = DDS_ENTITYNAME_QOS_POLICY_NAME;    
#endif

    extern DDSCPPDllVariable const DDS_QosPolicyId_t USERDATA_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t DURABILITY_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t PRESENTATION_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t DEADLINE_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t LATENCYBUDGET_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t OWNERSHIP_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t OWNERSHIPSTRENGTH_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t LIVELINESS_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t TIMEBASEDFILTER_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t PARTITION_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t RELIABILITY_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t DESTINATIONORDER_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t HISTORY_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t RESOURCELIMITS_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t ENTITYFACTORY_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t WRITERDATALIFECYCLE_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t READERDATALIFECYCLE_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t TOPICDATA_QOS_POLICY_ID; 
    extern DDSCPPDllVariable const DDS_QosPolicyId_t GROUPDATA_QOS_POLICY_ID; 
    extern DDSCPPDllVariable const DDS_QosPolicyId_t TRANSPORTPRIORITY_QOS_POLICY_ID; 
    extern DDSCPPDllVariable const DDS_QosPolicyId_t LIFESPAN_QOS_POLICY_ID; 
    extern DDSCPPDllVariable const DDS_QosPolicyId_t DURABILITYSERVICE_QOS_POLICY_ID; 

    extern DDSCPPDllVariable const DDS_QosPolicyId_t TRANSPORTSELECTION_QOS_POLICY_ID ;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t TRANSPORTUNICAST_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t TRANSPORTMULTICAST_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t DISCOVERY_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t TRANSPORTBUILTIN_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t WIREPROTOCOL_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t DATAREADERRESOURCELIMITS_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t DATAWRITERRESOURCELIMITS_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t DATAREADERPROTOCOL_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t DATAWRITERPROTOCOL_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t SYSTEMRESOURCELIMITS_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t DOMAINPARTICIPANTRESOURCELIMITS_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t EVENT_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t DATABASE_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t RECEIVERPOOL_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t DISCOVERYCONFIG_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t USEROBJECT_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t EXCLUSIVEAREA_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t TYPESUPPORT_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t PROPERTY_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t INVALID_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t PUBLISHMODE_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t ASYNCHRONOUSPUBLISHER_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t STATISTICS_QOS_POLICY_ID;
    extern DDSCPPDllVariable const DDS_QosPolicyId_t ENTITYNAME_QOS_POLICY_ID;

    typedef DDS_UserDataQosPolicy           UserDataQosPolicy;
    typedef DDS_TopicDataQosPolicy          TopicDataQosPolicy;
    typedef DDS_GroupDataQosPolicy          GroupDataQosPolicy;
    typedef DDS_TransportPriorityQosPolicy  TransportPriorityQosPolicy;
    typedef DDS_LifespanQosPolicy           LifespanQosPolicy;

    typedef DDS_DurabilityQosPolicyKind     DurabilityQosPolicyKind;
    extern DDSCPPDllVariable const DDS_DurabilityQosPolicyKind  VOLATILE_DURABILITY_QOS;
    extern DDSCPPDllVariable const DDS_DurabilityQosPolicyKind  TRANSIENT_LOCAL_DURABILITY_QOS;
    extern DDSCPPDllVariable const DDS_DurabilityQosPolicyKind  TRANSIENT_DURABILITY_QOS;
    extern DDSCPPDllVariable const DDS_DurabilityQosPolicyKind  PERSISTENT_DURABILITY_QOS;
    typedef DDS_DurabilityQosPolicy         DurabilityQosPolicy;

    typedef DDS_ServiceQosPolicyKind     ServiceQosPolicyKind;
    extern DDSCPPDllVariable const DDS_ServiceQosPolicyKind  NO_SERVICE_QOS;
    extern DDSCPPDllVariable const DDS_ServiceQosPolicyKind  PERSISTENCE_SERVICE_QOS;
    typedef DDS_ServiceQosPolicy         ServiceQosPolicy;

    typedef DDS_PresentationQosPolicyAccessScopeKind PresentationQosPolicyAccessScopeKind;
    extern DDSCPPDllVariable const DDS_PresentationQosPolicyAccessScopeKind INSTANCE_PRESENTATION_QOS;
    extern DDSCPPDllVariable const DDS_PresentationQosPolicyAccessScopeKind TOPIC_PRESENTATION_QOS;
    extern DDSCPPDllVariable const DDS_PresentationQosPolicyAccessScopeKind GROUP_PRESENTATION_QOS;
    typedef DDS_PresentationQosPolicy       PresentationQosPolicy;

    typedef DDS_DeadlineQosPolicy           DeadlineQosPolicy;
    typedef DDS_LatencyBudgetQosPolicy      LatencyBudgetQosPolicy;

    typedef DDS_OwnershipQosPolicyKind      OwnershipQosPolicyKind;
    extern DDSCPPDllVariable const DDS_OwnershipQosPolicyKind SHARED_OWNERSHIP_QOS;
    extern DDSCPPDllVariable const DDS_OwnershipQosPolicyKind EXCLUSIVE_OWNERSHIP_QOS;
    typedef DDS_OwnershipQosPolicy          OwnershipQosPolicy;
    typedef DDS_OwnershipStrengthQosPolicy  OwnershipStrengthQosPolicy;

    typedef DDS_LivelinessQosPolicyKind     LivelinessQosPolicyKind;
    extern DDSCPPDllVariable const DDS_LivelinessQosPolicyKind  AUTOMATIC_LIVELINESS_QOS;
    extern DDSCPPDllVariable const DDS_LivelinessQosPolicyKind  MANUAL_BY_PARTICIPANT_LIVELINESS_QOS;
    extern DDSCPPDllVariable const DDS_LivelinessQosPolicyKind  MANUAL_BY_TOPIC_LIVELINESS_QOS;
    typedef DDS_LivelinessQosPolicy         LivelinessQosPolicy;

    typedef DDS_TimeBasedFilterQosPolicy    TimeBasedFilterQosPolicy;
    typedef DDS_PartitionQosPolicy          PartitionQosPolicy;

    typedef DDS_ReliabilityQosPolicyKind    ReliabilityQosPolicyKind;
    extern DDSCPPDllVariable const DDS_ReliabilityQosPolicyKind BEST_EFFORT_RELIABILITY_QOS;
    extern DDSCPPDllVariable const DDS_ReliabilityQosPolicyKind RELIABLE_RELIABILITY_QOS;
    typedef DDS_ReliabilityQosPolicy        ReliabilityQosPolicy;

    typedef DDS_DestinationOrderQosPolicyKind DestinationOrderQosPolicyKind;
    extern DDSCPPDllVariable const DDS_DestinationOrderQosPolicyKind  BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS;
    extern DDSCPPDllVariable const DDS_DestinationOrderQosPolicyKind  BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS;
    typedef DDS_DestinationOrderQosPolicy   DestinationOrderQosPolicy;
    
    typedef DDS_DestinationOrderQosPolicyScopeKind DestinationOrderQosPolicyScopeKind;
    extern DDSCPPDllVariable const DDS_DestinationOrderQosPolicyScopeKind     INSTANCE_SCOPE_DESTINATIONORDER_QOS;
    extern DDSCPPDllVariable const DDS_DestinationOrderQosPolicyScopeKind TOPIC_SCOPE_DESTINATIONORDER_QOS;


    typedef DDS_HistoryQosPolicyKind HistoryQosPolicyKind;
    extern DDSCPPDllVariable const DDS_HistoryQosPolicyKind KEEP_LAST_HISTORY_QOS;
    extern DDSCPPDllVariable const DDS_HistoryQosPolicyKind KEEP_ALL_HISTORY_QOS;
    typedef DDS_HistoryQosPolicy            HistoryQosPolicy;

    typedef DDS_RefilterQosPolicyKind RefilterQosPolicyKind;
    extern DDSCPPDllVariable const DDS_RefilterQosPolicyKind NONE_REFILTER_QOS;
    extern DDSCPPDllVariable const DDS_RefilterQosPolicyKind ALL_REFILTER_QOS;
    extern DDSCPPDllVariable const DDS_RefilterQosPolicyKind ON_DEMAND_REFILTER_QOS;
    

    typedef DDS_ResourceLimitsQosPolicy      ResourceLimitsQosPolicy;
    typedef DDS_EntityFactoryQosPolicy       EntityFactoryQosPolicy;
    typedef DDS_WriterDataLifecycleQosPolicy WriterDataLifecycleQosPolicy;
    typedef DDS_ReaderDataLifecycleQosPolicy ReaderDataLifecycleQosPolicy;
    typedef DDS_DurabilityServiceQosPolicy   DurabilityServiceQosPolicy;

    typedef DDS_AllocationSettings_t AllocationSettings_t;
    typedef DDS_RtpsReliableReaderProtocol_t RtpsReliableReaderProtocol_t;
    typedef DDS_RtpsReliableWriterProtocol_t RtpsReliableWriterProtocol_t;
    typedef DDS_UserObjectSettings_t UserObjectSettings_t;

    typedef DDS_TransportUnicastSettings_t TransportUnicastSettings_t;
    typedef DDS_TransportUnicastSettingsSeq TransportUnicastSettingsSeq;
    typedef DDS_TransportMulticastSettings_t TransportMulticastSettings_t;
    typedef DDS_TransportMulticastSettingsSeq TransportMulticastSettingsSeq;
    typedef DDS_TransportSelectionQosPolicy TransportSelectionQosPolicy;

    typedef DDS_TransportUnicastQosPolicy TransportUnicastQosPolicy;
    typedef DDS_TransportMulticastQosPolicy TransportMulticastQosPolicy;
    typedef DDS_DiscoveryQosPolicy DiscoveryQosPolicy;

    typedef DDS_DiscoveryConfigBuiltinPluginKind     DiscoveryConfigBuiltinPluginKind;
    extern DDSCPPDllVariable const DDS_DiscoveryConfigBuiltinPluginKind DISCOVERYCONFIG_BUILTIN_SDP;
    extern DDSCPPDllVariable const DDS_DiscoveryConfigBuiltinPluginKind DISCOVERYCONFIG_BUILTIN_EDS;
    typedef DDS_RemoteParticipantPurgeKind           RemoteParticipantPurgeKind;
    extern DDSCPPDllVariable const DDS_RemoteParticipantPurgeKind LIVELINESS_BASED_REMOTE_PARTICIPANT_PURGE;
    extern DDSCPPDllVariable const DDS_RemoteParticipantPurgeKind NO_REMOTE_PARTICIPANT_PURGE;
    typedef DDS_DiscoveryConfigQosPolicy DiscoveryConfigQosPolicy;
    typedef DDS_EntityNameQosPolicy EntityNameQosPolicy;
    
    typedef DDS_Discovery_ParticipantInformation  Discovery_ParticipantInformation;
    typedef DDS_Discovery_ParticipantInformationSeq Discovery_ParticipantInformationSeq;
    typedef DDS_Discovery_EndpointInformation     Discovery_EndpointInformation;
    typedef DDS_Discovery_EndpointInformationSeq    Discovery_EndpointInformationSeq;

    typedef DDS_TransportBuiltinKind TransportBuiltinKind;
    extern DDSCPPDllVariable const DDS_TransportBuiltinKind TRANSPORTBUILTIN_UDPv4;
    extern DDSCPPDllVariable const DDS_TransportBuiltinKind TRANSPORTBUILTIN_SHMEM;
    extern DDSCPPDllVariable const DDS_TransportBuiltinKind TRANSPORTBUILTIN_INTRA;

#if !(defined(RTI_VXWORKS) && !defined(__RTP__))
    extern DDSCPPDllVariable const char *const &TRANSPORTBUILTIN_INTRA_ALIAS;
    extern DDSCPPDllVariable const char *const &TRANSPORTBUILTIN_SHMEM_ALIAS;
    extern DDSCPPDllVariable const char *const &TRANSPORTBUILTIN_UDPv4_ALIAS;
#else
    const char *const &TRANSPORTBUILTIN_INTRA_ALIAS = DDS_TRANSPORTBUILTIN_INTRA_ALIAS;
    const char *const &TRANSPORTBUILTIN_SHMEM_ALIAS = DDS_TRANSPORTBUILTIN_SHMEM_ALIAS;
    const char *const &TRANSPORTBUILTIN_UDPv4_ALIAS = DDS_TRANSPORTBUILTIN_UDPv4_ALIAS;
#endif

    typedef DDS_TransportBuiltinKindMask  TransportBuiltinKindMask;
    typedef DDS_TransportBuiltinQosPolicy TransportBuiltinQosPolicy;
    typedef DDS_ThreadSettingsKindMask    ThreadSettingsKindMask;
    typedef DDS_ThreadSettingsKind ThreadSettingsKind;
    extern DDSCPPDllVariable const DDS_ThreadSettingsKind  THREAD_SETTINGS_FLOATING_POINT;
    extern DDSCPPDllVariable const DDS_ThreadSettingsKind  THREAD_SETTINGS_STDIO;
    extern DDSCPPDllVariable const DDS_ThreadSettingsKind  THREAD_SETTINGS_REALTIME_PRIORITY;
    extern DDSCPPDllVariable const DDS_ThreadSettingsKind  THREAD_SETTINGS_PRIORITY_ENFORCE;
    extern DDSCPPDllVariable const DDS_ThreadSettingsKind  THREAD_SETTINGS_CANCEL_ASYNCHRONOUS;

    typedef DDS_ThreadSettings_t       ThreadSettings_t;
    typedef DDS_WireProtocolQosPolicy  WireProtocolQosPolicy;
    extern DDSCPPDllVariable const int RTPS_AUTO_ID;

    typedef DDS_DataReaderResourceLimitsQosPolicy DataReaderResourceLimitsQosPolicy;
    typedef DDS_DataWriterResourceLimitsQosPolicy DataWriterResourceLimitsQosPolicy;
    typedef DDS_DataReaderProtocolQosPolicy DataReaderProtocolQosPolicy;
    typedef DDS_DataWriterProtocolQosPolicy DataWriterProtocolQosPolicy;
    typedef DDS_SystemResourceLimitsQosPolicy SystemResourceLimitsQosPolicy;
    typedef DDS_DomainParticipantResourceLimitsQosPolicy DomainParticipantResourceLimitsQosPolicy;

    typedef DDS_EventQosPolicy EventQosPolicy;
    typedef DDS_DatabaseQosPolicy DatabaseQosPolicy;
    typedef DDS_ReceiverPoolQosPolicy ReceiverPoolQosPolicy;
    typedef DDS_BuiltinTopicReaderResourceLimits_t BuiltinTopicReaderResourceLimits_t;
    typedef DDS_UserObjectQosPolicy UserObjectQosPolicy;
    typedef DDS_ExclusiveAreaQosPolicy ExclusiveAreaQosPolicy;

    typedef DDS_Property_t                 Property_t;
    typedef DDS_PropertySeq                PropertySeq;
    typedef DDS_PropertyQosPolicy          PropertyQosPolicy;	
    typedef DDSPropertyQosPolicyHelper     PropertyQosPolicyHelper;	
    typedef DDS_RefilterQosPolicyKind      RefilterQosPolicyKind;
    typedef DDS_TypeSupportQosPolicy       TypeSupportQosPolicy;
   
    typedef NDDS_InternalDefaults          InternalDefaults;
    typedef DDS_HANDLE_TYPE_NATIVE         HANDLE_TYPE_NATIVE;
    extern DDSCPPDllVariable const NDDS_InternalDefaults INTERNAL_DEFAULTS_PROFILE_DEFAULT;
   
    typedef DDS_PublishModeQosPolicy PublishModeQosPolicy; 
    typedef DDS_PublishModeQosPolicyKind PublishModeQosPolicyKind;
    extern DDSCPPDllVariable const DDS_PublishModeQosPolicyKind SYNCHRONOUS_PUBLISH_MODE_QOS;
    extern DDSCPPDllVariable const DDS_PublishModeQosPolicyKind ASYNCHRONOUS_PUBLISH_MODE_QOS;   

    typedef DDS_AsynchronousPublisherQosPolicy AsynchronousPublisherQosPolicy;
    typedef DDS_StatisticsQosPolicy StatisticsQosPolicy;

    // ----------------------------------------------------------------------
    typedef DDS_DomainParticipantFactoryQos  DomainParticipantFactoryQos;
    typedef DDS_DomainParticipantQos         DomainParticipantQos;
    typedef DDS_TopicQos                     TopicQos;
    typedef DDS_DataWriterQos                DataWriterQos;
    typedef DDS_PublisherQos                 PublisherQos;
    typedef DDS_DataReaderQos                DataReaderQos;
    typedef DDS_SubscriberQos                SubscriberQos;

    // ----------------------------------------------------------------------

#if !(defined(RTI_VXWORKS) && !defined(__RTP__))
    extern DDSCPPDllVariable const DDS_DomainParticipantQos &PARTICIPANT_QOS_DEFAULT;
    extern DDSCPPDllVariable const DDS_TopicQos             &TOPIC_QOS_DEFAULT;
    extern DDSCPPDllVariable const DDS_PublisherQos         &PUBLISHER_QOS_DEFAULT;
    extern DDSCPPDllVariable const DDS_SubscriberQos        &SUBSCRIBER_QOS_DEFAULT;
    extern DDSCPPDllVariable const DDS_DataWriterQos        &DATAWRITER_QOS_DEFAULT;
    extern DDSCPPDllVariable const DDS_DataReaderQos        &DATAREADER_QOS_DEFAULT;

    extern DDSCPPDllVariable const DDS_DataWriterQos        &DATAWRITER_QOS_USE_TOPIC_QOS;
    extern DDSCPPDllVariable const DDS_DataReaderQos        &DATAREADER_QOS_USE_TOPIC_QOS;
#else
    const DDS_DomainParticipantQos &PARTICIPANT_QOS_DEFAULT = DDS_PARTICIPANT_QOS_DEFAULT;
    const DDS_TopicQos             &TOPIC_QOS_DEFAULT = DDS_TOPIC_QOS_DEFAULT;
    const DDS_PublisherQos         &PUBLISHER_QOS_DEFAULT = DDS_PUBLISHER_QOS_DEFAULT;
    const DDS_SubscriberQos        &SUBSCRIBER_QOS_DEFAULT = DDS_SUBSCRIBER_QOS_DEFAULT;
    const DDS_DataWriterQos        &DATAWRITER_QOS_DEFAULT = DDS_DATAWRITER_QOS_DEFAULT;
    const DDS_DataReaderQos        &DATAREADER_QOS_DEFAULT = DDS_DATAREADER_QOS_DEFAULT;
    const DDS_DataWriterQos        &DATAWRITER_QOS_USE_TOPIC_QOS = DDS_DATAWRITER_QOS_USE_TOPIC_QOS;
    const DDS_DataReaderQos        &DATAREADER_QOS_USE_TOPIC_QOS = DDS_DATAREADER_QOS_USE_TOPIC_QOS;
#endif

#if !(defined(RTI_VXWORKS) && !defined(__RTP__))
    extern DDSCPPDllVariable const char *const &AUTO_NAME_ENTITY;
#else
    const char *const &AUTO_NAME_ENTITY = DDS_AUTO_NAME_ENTITY;
#endif
    
    // ----------------------------------------------------------------------
    // Flow Controller
    // ----------------------------------------------------------------------
    typedef DDS_FlowControllerProperty_t FlowControllerProperty_t;    

    typedef DDS_FlowControllerSchedulingPolicy FlowControllerSchedulingPolicy;
    extern DDSCPPDllVariable const DDS_FlowControllerSchedulingPolicy RR_FLOW_CONTROLLER_SCHED_POLICY;
    extern DDSCPPDllVariable const DDS_FlowControllerSchedulingPolicy EDF_FLOW_CONTROLLER_SCHED_POLICY;

    typedef DDS_FlowControllerTokenBucketProperty_t FlowControllerTokenBucketProperty_t;
    typedef DDSFlowController FlowController;


    // ----------------------------------------------------------------------
    // Builtin Topic type definition
    // ----------------------------------------------------------------------
    typedef DDS_ParticipantBuiltinTopicData  ParticipantBuiltinTopicData;
    typedef DDS_ParticipantBuiltinTopicDataSeq  ParticipantBuiltinTopicDataSeq;
    typedef DDS_TopicBuiltinTopicData        TopicBuiltinTopicData;
    typedef DDS_TopicBuiltinTopicDataSeq     TopicBuiltinTopicDataSeq;
    typedef DDS_PublicationBuiltinTopicData  PublicationBuiltinTopicData;
    typedef DDS_PublicationBuiltinTopicDataSeq  PublicationBuiltinTopicDataSeq;
    typedef DDS_SubscriptionBuiltinTopicData SubscriptionBuiltinTopicData;
    typedef DDS_SubscriptionBuiltinTopicDataSeq SubscriptionBuiltinTopicDataSeq;

#if !(defined(RTI_VXWORKS) && !defined(__RTP__))
    extern DDSCPPDllVariable const char * &PARTICIPANT_TOPIC_NAME;
    extern DDSCPPDllVariable const char * &TOPIC_TOPIC_NAME;
    extern DDSCPPDllVariable const char * &PUBLICATION_TOPIC_NAME;
    extern DDSCPPDllVariable const char * &SUBSCRIPTION_TOPIC_NAME;
#else
    const char * &PARTICIPANT_TOPIC_NAME = DDS_PARTICIPANT_TOPIC_NAME;
    const char * &TOPIC_TOPIC_NAME = DDS_TOPIC_TOPIC_NAME;
    const char * &PUBLICATION_TOPIC_NAME = DDS_PUBLICATION_TOPIC_NAME;
    const char * &SUBSCRIPTION_TOPIC_NAME = DDS_SUBSCRIPTION_TOPIC_NAME;
#endif

    // ----------------------------------------------------------------------
    // Entities
    // ----------------------------------------------------------------------
    typedef DDSEntity                    Entity;
    typedef DDS_DomainEntity             DomainEntity;
    typedef DDSDomainParticipant         DomainParticipant;
    typedef DDSDomainParticipantFactory  DomainParticipantFactory;
    typedef DDSTypeSupport               TypeSupport;
    typedef DDSTopicDescription          TopicDescription;
    typedef DDSTopic                     Topic;
    typedef DDS_TopicWrapperI            TopicWrapperI;
    typedef DDSContentFilter             ContentFilter;
    typedef DDSContentFilteredTopic      ContentFilteredTopic;
    typedef DDS_ContentFilteredTopicWrapperI     ContentFilteredTopicWrapperI;    
    typedef DDSMultiTopic                MultiTopic;
    typedef DDSPublisher                 Publisher;
    typedef DDSPublisherSeq              PublisherSeq;
    typedef DDSPublisher_ptr             Publisher_ptr;
    typedef DDSDataWriter                DataWriter;
    typedef DDSSubscriber                Subscriber;
    typedef DDSSubscriberSeq             SubscriberSeq;
    typedef DDSSubscriber_ptr            Subscriber_ptr;
    typedef DDSDataReader                DataReader;
    typedef DDSDataReaderSeq             DataReaderSeq;
    typedef DDSDataReader_ptr            DataReader_ptr;

    // ----------------------------------------------------------------------
    // DDS SQL
    // ----------------------------------------------------------------------
    typedef DDSSqlFilter                   SqlFilter;

    typedef DDS_SqlFilterLongLong          SqlFilterLongLong;
    typedef DDS_SqlFilterUnsignedLongLong  SqlFilterUnsignedLongLong;
    typedef DDS_SqlFilterDereferenceEntry  SqlFilterDereferenceEntry;
    typedef DDS_SqlFilterDereference       SqlFilterDereference;
    typedef DDS_SqlFilterSymbolValue       SqlFilterSymbolValue;
    typedef DDS_SqlFilterSymbol            SqlFilterSymbol;
    typedef DDS_SqlFilterGeneratorQos      SqlFilterGeneratorQos;

#if !(defined(RTI_VXWORKS) && !defined(__RTP__))
    extern DDSCPPDllVariable const char *const &SQLFILTER_NAME;
#else
    const char *const &SQLFILTER_NAME = DDS_SQLFILTER_NAME;   
#endif 

    // ----------------------------------------------------------------------
    // DDS Macros -> constants
    // ----------------------------------------------------------------------

    /*infrastructure*/
    extern DDSCPPDllVariable const StatusMask STATUS_MASK_NONE;
    extern DDSCPPDllVariable const StatusMask STATUS_MASK_ALL;
    extern DDSCPPDllVariable const DDS_TransportBuiltinKindMask TRANSPORTBUILTIN_MASK_NONE;
    extern DDSCPPDllVariable const DDS_TransportBuiltinKindMask TRANSPORTBUILTIN_MASK_ALL;

    /*typecodes*/
    extern DDSCPPDllVariable const short VM_NONE;
    extern DDSCPPDllVariable const short VM_CUSTOM;
    extern DDSCPPDllVariable const short VM_ABSTRACT;
    extern DDSCPPDllVariable const short VM_TRUNCATABLE;
    extern DDSCPPDllVariable const short PRIVATE_MEMBER;
    extern DDSCPPDllVariable const short PUBLIC_MEMBER;

    /*log*/
    extern DDSCPPDllVariable const short SUBMODULE_MASK_INFRASTRUCTURE;
    extern DDSCPPDllVariable const short SUBMODULE_MASK_TOPIC;
    extern DDSCPPDllVariable const short SUBMODULE_MASK_PUBLICATION;
    extern DDSCPPDllVariable const short SUBMODULE_MASK_SUBSCRIPTION;
    extern DDSCPPDllVariable const short SUBMODULE_MASK_DOMAIN;
    extern DDSCPPDllVariable const short SUBMODULE_MASK_SEQUENCE;
    extern DDSCPPDllVariable const short SUBMODULE_MASK_DATA;
    extern DDSCPPDllVariable const short SUBMODULE_MASK_BUILTIN;
    extern DDSCPPDllVariable const short SUBMODULE_MASK_STRING;
    extern DDSCPPDllVariable const short SUBMODULE_MASK_TYPECODE;
    extern DDSCPPDllVariable const short SUBMODULE_MASK_ALL;

    /*commom*/
    extern DDSCPPDllVariable const DDS_Boolean BOOLEAN_TRUE;
    extern DDSCPPDllVariable const DDS_Boolean BOOLEAN_FALSE;

    extern DDSCPPDllVariable const DDS_ProtocolVersion_t PROTOCOLVERSION_1_0;
    extern DDSCPPDllVariable const DDS_ProtocolVersion_t PROTOCOLVERSION_1_1;
    extern DDSCPPDllVariable const DDS_ProtocolVersion_t PROTOCOLVERSION_1_2;
    extern DDSCPPDllVariable const DDS_ProtocolVersion_t PROTOCOLVERSION_2_0;
    extern DDSCPPDllVariable const DDS_ProtocolVersion_t PROTOCOLVERSION_2_1;
    extern DDSCPPDllVariable const DDS_ProtocolVersion_t PROTOCOLVERSION;
    extern DDSCPPDllVariable const DDS_VendorId_t        VENDORID_UNKNOWN;

    extern DDSCPPDllVariable const DDS_DiscoveryPluginPromiscuityKind 
        DISCOVERYPLUGIN_DISCOVER_MATCHING_REMOTE_ENTITIES_PROMISCUITY;
    extern DDSCPPDllVariable const DDS_DiscoveryPluginPromiscuityKind 
        DISCOVERYPLUGIN_DISCOVER_ALL_REMOTE_ENTITIES_PROMISCUITY;
}


#endif /* ndds_namespace_cpp_h */
